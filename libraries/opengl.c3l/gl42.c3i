module opengl::gl42;
import opengl;

/*=====Constants=====*/

const GL_COPY_READ_BUFFER_BINDING       = 0x8F36;
const GL_COPY_WRITE_BUFFER_BINDING      = 0x8F37;
const GL_TRANSFORM_FEEDBACK_ACTIVE      = 0x8E24;
const GL_TRANSFORM_FEEDBACK_PAUSED      = 0x8E23;
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH  = 0x9127;
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH  = 0x9129;
const GL_UNPACK_COMPRESSED_BLOCK_SIZE   = 0x912A;
const GL_PACK_COMPRESSED_BLOCK_WIDTH    = 0x912B;
const GL_PACK_COMPRESSED_BLOCK_HEIGHT   = 0x912C;
const GL_PACK_COMPRESSED_BLOCK_DEPTH    = 0x912D;
const GL_PACK_COMPRESSED_BLOCK_SIZE     = 0x912E;
const GL_NUM_SAMPLE_COUNTS              = 0x9380;
const GL_MIN_MAP_BUFFER_ALIGNMENT       = 0x90BC;
const GL_ATOMIC_COUNTER_BUFFER          = 0x92C0;
const GL_ATOMIC_COUNTER_BUFFER_BINDING  = 0x92C1;
const GL_ATOMIC_COUNTER_BUFFER_START    = 0x92C2;
const GL_ATOMIC_COUNTER_BUFFER_SIZE     = 0x92C3;
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GL_MAX_VERTEX_ATOMIC_COUNTERS     = 0x92D2;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS   = 0x92D5;
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS   = 0x92D6;
const GL_MAX_COMBINED_ATOMIC_COUNTERS   = 0x92D7;
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  = 0x92D9;
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GL_UNSIGNED_INT_ATOMIC_COUNTER    = 0x92DB;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GL_ELEMENT_ARRAY_BARRIER_BIT      = 0x00000002;
const GL_UNIFORM_BARRIER_BIT            = 0x00000004;
const GL_TEXTURE_FETCH_BARRIER_BIT      = 0x00000008;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GL_COMMAND_BARRIER_BIT            = 0x00000040;
const GL_PIXEL_BUFFER_BARRIER_BIT       = 0x00000080;
const GL_TEXTURE_UPDATE_BARRIER_BIT     = 0x00000100;
const GL_BUFFER_UPDATE_BARRIER_BIT      = 0x00000200;
const GL_FRAMEBUFFER_BARRIER_BIT        = 0x00000400;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GL_ATOMIC_COUNTER_BARRIER_BIT     = 0x00001000;
const GL_ALL_BARRIER_BITS               = 0xFFFFFFFF;
const GL_MAX_IMAGE_UNITS                = 0x8F38;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GL_IMAGE_BINDING_NAME             = 0x8F3A;
const GL_IMAGE_BINDING_LEVEL            = 0x8F3B;
const GL_IMAGE_BINDING_LAYERED          = 0x8F3C;
const GL_IMAGE_BINDING_LAYER            = 0x8F3D;
const GL_IMAGE_BINDING_ACCESS           = 0x8F3E;
const GL_IMAGE_1D                       = 0x904C;
const GL_IMAGE_2D                       = 0x904D;
const GL_IMAGE_3D                       = 0x904E;
const GL_IMAGE_2D_RECT                  = 0x904F;
const GL_IMAGE_CUBE                     = 0x9050;
const GL_IMAGE_BUFFER                   = 0x9051;
const GL_IMAGE_1D_ARRAY                 = 0x9052;
const GL_IMAGE_2D_ARRAY                 = 0x9053;
const GL_IMAGE_CUBE_MAP_ARRAY           = 0x9054;
const GL_IMAGE_2D_MULTISAMPLE           = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY     = 0x9056;
const GL_INT_IMAGE_1D                   = 0x9057;
const GL_INT_IMAGE_2D                   = 0x9058;
const GL_INT_IMAGE_3D                   = 0x9059;
const GL_INT_IMAGE_2D_RECT              = 0x905A;
const GL_INT_IMAGE_CUBE                 = 0x905B;
const GL_INT_IMAGE_BUFFER               = 0x905C;
const GL_INT_IMAGE_1D_ARRAY             = 0x905D;
const GL_INT_IMAGE_2D_ARRAY             = 0x905E;
const GL_INT_IMAGE_CUBE_MAP_ARRAY       = 0x905F;
const GL_INT_IMAGE_2D_MULTISAMPLE       = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GL_UNSIGNED_INT_IMAGE_1D          = 0x9062;
const GL_UNSIGNED_INT_IMAGE_2D          = 0x9063;
const GL_UNSIGNED_INT_IMAGE_3D          = 0x9064;
const GL_UNSIGNED_INT_IMAGE_2D_RECT     = 0x9065;
const GL_UNSIGNED_INT_IMAGE_CUBE        = 0x9066;
const GL_UNSIGNED_INT_IMAGE_BUFFER      = 0x9067;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY    = 0x9068;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY    = 0x9069;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GL_MAX_IMAGE_SAMPLES              = 0x906D;
const GL_IMAGE_BINDING_FORMAT           = 0x906E;
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GL_MAX_VERTEX_IMAGE_UNIFORMS      = 0x90CA;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS    = 0x90CD;
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS    = 0x90CE;
const GL_MAX_COMBINED_IMAGE_UNIFORMS    = 0x90CF;
const GL_COMPRESSED_RGBA_BPTC_UNORM     = 0x8E8C;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GL_TEXTURE_IMMUTABLE_FORMAT       = 0x912F;

/*=====END=====*/

/*=====Functions=====*/

fn void drawArraysInstancedBaseInstance (GLenum mode, CInt first, usz count, usz instancecount, CUInt baseinstance) @extern("glDrawArraysInstancedBaseInstance");
fn void drawElementsInstancedBaseInstance (GLenum mode, usz count, GLenum type, void *indices, usz instancecount, CUInt baseinstance) @extern("glDrawElementsInstancedBaseInstance");
fn void drawElementsInstancedBaseVertexBaseInstance (GLenum mode, usz count, GLenum type, void *indices, usz instancecount, CInt basevertex, CUInt baseinstance) @extern("glDrawElementsInstancedBaseVertexBaseInstance");
fn void getInternalformativ (GLenum target, GLenum internalformat, GLenum pname, usz count, CInt *params) @extern("glGetInternalformativ");
fn void getActiveAtomicCounterBufferiv (CUInt program, CUInt bufferIndex, GLenum pname, CInt *params) @extern("glGetActiveAtomicCounterBufferiv");
fn void bindImageTexture (CUInt unit, CUInt texture, CInt level, bool layered, CInt layer, GLenum access, GLenum format) @extern("glBindImageTexture");
fn void memoryBarrier (GLbitfield barriers) @extern("glMemoryBarrier");
fn void texStorage1D (GLenum target, usz levels, GLenum internalformat, usz width) @extern("glTexStorage1D");
fn void texStorage2D (GLenum target, usz levels, GLenum internalformat, usz width, usz height) @extern("glTexStorage2D");
fn void texStorage3D (GLenum target, usz levels, GLenum internalformat, usz width, usz height, usz depth) @extern("glTexStorage3D");
fn void drawTransformFeedbackInstanced (GLenum mode, CUInt id, usz instancecount) @extern("glDrawTransformFeedbackInstanced");
fn void drawTransformFeedbackStreamInstanced (GLenum mode, CUInt id, CUInt stream, usz instancecount) @extern("glDrawTransformFeedbackStreamInstanced");

/*=====END=====*/
