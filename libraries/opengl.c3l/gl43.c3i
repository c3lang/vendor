module opengl::gl43;
import opengl;


//Callback
def GLDebugProc = fn void(GLenum source,GLenum type,CUInt id,GLenum severity, usz length, ZString message, void *userParam);


/*=====Constants=====*/

const GL_NUM_SHADING_LANGUAGE_VERSIONS  = 0x82E9;
const GL_VERTEX_ATTRIB_ARRAY_LONG       = 0x874E;
const GL_COMPRESSED_RGB8_ETC2           = 0x9274;
const GL_COMPRESSED_SRGB8_ETC2          = 0x9275;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GL_COMPRESSED_RGBA8_ETC2_EAC      = 0x9278;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GL_COMPRESSED_R11_EAC             = 0x9270;
const GL_COMPRESSED_SIGNED_R11_EAC      = 0x9271;
const GL_COMPRESSED_RG11_EAC            = 0x9272;
const GL_COMPRESSED_SIGNED_RG11_EAC     = 0x9273;
const GL_PRIMITIVE_RESTART_FIXED_INDEX  = 0x8D69;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GL_MAX_ELEMENT_INDEX              = 0x8D6B;
const GL_COMPUTE_SHADER                 = 0x91B9;
const GL_MAX_COMPUTE_UNIFORM_BLOCKS     = 0x91BB;
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GL_MAX_COMPUTE_IMAGE_UNIFORMS     = 0x91BD;
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GL_MAX_COMPUTE_ATOMIC_COUNTERS    = 0x8265;
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GL_MAX_COMPUTE_WORK_GROUP_COUNT   = 0x91BE;
const GL_MAX_COMPUTE_WORK_GROUP_SIZE    = 0x91BF;
const GL_COMPUTE_WORK_GROUP_SIZE        = 0x8267;
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GL_DISPATCH_INDIRECT_BUFFER       = 0x90EE;
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GL_COMPUTE_SHADER_BIT             = 0x00000020;
const GL_DEBUG_OUTPUT_SYNCHRONOUS       = 0x8242;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GL_DEBUG_CALLBACK_FUNCTION        = 0x8244;
const GL_DEBUG_CALLBACK_USER_PARAM      = 0x8245;
const GL_DEBUG_SOURCE_API               = 0x8246;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM     = 0x8247;
const GL_DEBUG_SOURCE_SHADER_COMPILER   = 0x8248;
const GL_DEBUG_SOURCE_THIRD_PARTY       = 0x8249;
const GL_DEBUG_SOURCE_APPLICATION       = 0x824A;
const GL_DEBUG_SOURCE_OTHER             = 0x824B;
const GL_DEBUG_TYPE_ERROR               = 0x824C;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  = 0x824E;
const GL_DEBUG_TYPE_PORTABILITY         = 0x824F;
const GL_DEBUG_TYPE_PERFORMANCE         = 0x8250;
const GL_DEBUG_TYPE_OTHER               = 0x8251;
const GL_MAX_DEBUG_MESSAGE_LENGTH       = 0x9143;
const GL_MAX_DEBUG_LOGGED_MESSAGES      = 0x9144;
const GL_DEBUG_LOGGED_MESSAGES          = 0x9145;
const GL_DEBUG_SEVERITY_HIGH            = 0x9146;
const GL_DEBUG_SEVERITY_MEDIUM          = 0x9147;
const GL_DEBUG_SEVERITY_LOW             = 0x9148;
const GL_DEBUG_TYPE_MARKER              = 0x8268;
const GL_DEBUG_TYPE_PUSH_GROUP          = 0x8269;
const GL_DEBUG_TYPE_POP_GROUP           = 0x826A;
const GL_DEBUG_SEVERITY_NOTIFICATION    = 0x826B;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH    = 0x826C;
const GL_DEBUG_GROUP_STACK_DEPTH        = 0x826D;
const GL_BUFFER                         = 0x82E0;
const GL_SHADER                         = 0x82E1;
const GL_PROGRAM                        = 0x82E2;
const GL_QUERY                          = 0x82E3;
const GL_PROGRAM_PIPELINE               = 0x82E4;
const GL_SAMPLER                        = 0x82E6;
const GL_MAX_LABEL_LENGTH               = 0x82E8;
const GL_DEBUG_OUTPUT                   = 0x92E0;
const GL_CONTEXT_FLAG_DEBUG_BIT         = 0x00000002;
const GL_MAX_UNIFORM_LOCATIONS          = 0x826E;
const GL_FRAMEBUFFER_DEFAULT_WIDTH      = 0x9310;
const GL_FRAMEBUFFER_DEFAULT_HEIGHT     = 0x9311;
const GL_FRAMEBUFFER_DEFAULT_LAYERS     = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_SAMPLES    = 0x9313;
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GL_MAX_FRAMEBUFFER_WIDTH          = 0x9315;
const GL_MAX_FRAMEBUFFER_HEIGHT         = 0x9316;
const GL_MAX_FRAMEBUFFER_LAYERS         = 0x9317;
const GL_MAX_FRAMEBUFFER_SAMPLES        = 0x9318;
const GL_INTERNALFORMAT_SUPPORTED       = 0x826F;
const GL_INTERNALFORMAT_PREFERRED       = 0x8270;
const GL_INTERNALFORMAT_RED_SIZE        = 0x8271;
const GL_INTERNALFORMAT_GREEN_SIZE      = 0x8272;
const GL_INTERNALFORMAT_BLUE_SIZE       = 0x8273;
const GL_INTERNALFORMAT_ALPHA_SIZE      = 0x8274;
const GL_INTERNALFORMAT_DEPTH_SIZE      = 0x8275;
const GL_INTERNALFORMAT_STENCIL_SIZE    = 0x8276;
const GL_INTERNALFORMAT_SHARED_SIZE     = 0x8277;
const GL_INTERNALFORMAT_RED_TYPE        = 0x8278;
const GL_INTERNALFORMAT_GREEN_TYPE      = 0x8279;
const GL_INTERNALFORMAT_BLUE_TYPE       = 0x827A;
const GL_INTERNALFORMAT_ALPHA_TYPE      = 0x827B;
const GL_INTERNALFORMAT_DEPTH_TYPE      = 0x827C;
const GL_INTERNALFORMAT_STENCIL_TYPE    = 0x827D;
const GL_MAX_WIDTH                      = 0x827E;
const GL_MAX_HEIGHT                     = 0x827F;
const GL_MAX_DEPTH                      = 0x8280;
const GL_MAX_LAYERS                     = 0x8281;
const GL_MAX_COMBINED_DIMENSIONS        = 0x8282;
const GL_COLOR_COMPONENTS               = 0x8283;
const GL_DEPTH_COMPONENTS               = 0x8284;
const GL_STENCIL_COMPONENTS             = 0x8285;
const GL_COLOR_RENDERABLE               = 0x8286;
const GL_DEPTH_RENDERABLE               = 0x8287;
const GL_STENCIL_RENDERABLE             = 0x8288;
const GL_FRAMEBUFFER_RENDERABLE         = 0x8289;
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GL_FRAMEBUFFER_BLEND              = 0x828B;
const GL_READ_PIXELS                    = 0x828C;
const GL_READ_PIXELS_FORMAT             = 0x828D;
const GL_READ_PIXELS_TYPE               = 0x828E;
const GL_TEXTURE_IMAGE_FORMAT           = 0x828F;
const GL_TEXTURE_IMAGE_TYPE             = 0x8290;
const GL_GET_TEXTURE_IMAGE_FORMAT       = 0x8291;
const GL_GET_TEXTURE_IMAGE_TYPE         = 0x8292;
const GL_MIPMAP                         = 0x8293;
const GL_MANUAL_GENERATE_MIPMAP         = 0x8294;
const GL_AUTO_GENERATE_MIPMAP           = 0x8295;
const GL_COLOR_ENCODING                 = 0x8296;
const GL_SRGB_READ                      = 0x8297;
const GL_SRGB_WRITE                     = 0x8298;
const GL_FILTER                         = 0x829A;
const GL_VERTEX_TEXTURE                 = 0x829B;
const GL_TESS_CONTROL_TEXTURE           = 0x829C;
const GL_TESS_EVALUATION_TEXTURE        = 0x829D;
const GL_GEOMETRY_TEXTURE               = 0x829E;
const GL_FRAGMENT_TEXTURE               = 0x829F;
const GL_COMPUTE_TEXTURE                = 0x82A0;
const GL_TEXTURE_SHADOW                 = 0x82A1;
const GL_TEXTURE_GATHER                 = 0x82A2;
const GL_TEXTURE_GATHER_SHADOW          = 0x82A3;
const GL_SHADER_IMAGE_LOAD              = 0x82A4;
const GL_SHADER_IMAGE_STORE             = 0x82A5;
const GL_SHADER_IMAGE_ATOMIC            = 0x82A6;
const GL_IMAGE_TEXEL_SIZE               = 0x82A7;
const GL_IMAGE_COMPATIBILITY_CLASS      = 0x82A8;
const GL_IMAGE_PIXEL_FORMAT             = 0x82A9;
const GL_IMAGE_PIXEL_TYPE               = 0x82AA;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE  = 0x82B3;
const GL_CLEAR_BUFFER                   = 0x82B4;
const GL_TEXTURE_VIEW                   = 0x82B5;
const GL_VIEW_COMPATIBILITY_CLASS       = 0x82B6;
const GL_FULL_SUPPORT                   = 0x82B7;
const GL_CAVEAT_SUPPORT                 = 0x82B8;
const GL_IMAGE_CLASS_4_X_32             = 0x82B9;
const GL_IMAGE_CLASS_2_X_32             = 0x82BA;
const GL_IMAGE_CLASS_1_X_32             = 0x82BB;
const GL_IMAGE_CLASS_4_X_16             = 0x82BC;
const GL_IMAGE_CLASS_2_X_16             = 0x82BD;
const GL_IMAGE_CLASS_1_X_16             = 0x82BE;
const GL_IMAGE_CLASS_4_X_8              = 0x82BF;
const GL_IMAGE_CLASS_2_X_8              = 0x82C0;
const GL_IMAGE_CLASS_1_X_8              = 0x82C1;
const GL_IMAGE_CLASS_11_11_10           = 0x82C2;
const GL_IMAGE_CLASS_10_10_10_2         = 0x82C3;
const GL_VIEW_CLASS_128_BITS            = 0x82C4;
const GL_VIEW_CLASS_96_BITS             = 0x82C5;
const GL_VIEW_CLASS_64_BITS             = 0x82C6;
const GL_VIEW_CLASS_48_BITS             = 0x82C7;
const GL_VIEW_CLASS_32_BITS             = 0x82C8;
const GL_VIEW_CLASS_24_BITS             = 0x82C9;
const GL_VIEW_CLASS_16_BITS             = 0x82CA;
const GL_VIEW_CLASS_8_BITS              = 0x82CB;
const GL_VIEW_CLASS_S3TC_DXT1_RGB       = 0x82CC;
const GL_VIEW_CLASS_S3TC_DXT1_RGBA      = 0x82CD;
const GL_VIEW_CLASS_S3TC_DXT3_RGBA      = 0x82CE;
const GL_VIEW_CLASS_S3TC_DXT5_RGBA      = 0x82CF;
const GL_VIEW_CLASS_RGTC1_RED           = 0x82D0;
const GL_VIEW_CLASS_RGTC2_RG            = 0x82D1;
const GL_VIEW_CLASS_BPTC_UNORM          = 0x82D2;
const GL_VIEW_CLASS_BPTC_FLOAT          = 0x82D3;
const GL_UNIFORM                        = 0x92E1;
const GL_UNIFORM_BLOCK                  = 0x92E2;
const GL_PROGRAM_INPUT                  = 0x92E3;
const GL_PROGRAM_OUTPUT                 = 0x92E4;
const GL_BUFFER_VARIABLE                = 0x92E5;
const GL_SHADER_STORAGE_BLOCK           = 0x92E6;
const GL_VERTEX_SUBROUTINE              = 0x92E8;
const GL_TESS_CONTROL_SUBROUTINE        = 0x92E9;
const GL_TESS_EVALUATION_SUBROUTINE     = 0x92EA;
const GL_GEOMETRY_SUBROUTINE            = 0x92EB;
const GL_FRAGMENT_SUBROUTINE            = 0x92EC;
const GL_COMPUTE_SUBROUTINE             = 0x92ED;
const GL_VERTEX_SUBROUTINE_UNIFORM      = 0x92EE;
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GL_GEOMETRY_SUBROUTINE_UNIFORM    = 0x92F1;
const GL_FRAGMENT_SUBROUTINE_UNIFORM    = 0x92F2;
const GL_COMPUTE_SUBROUTINE_UNIFORM     = 0x92F3;
const GL_TRANSFORM_FEEDBACK_VARYING     = 0x92F4;
const GL_ACTIVE_RESOURCES               = 0x92F5;
const GL_MAX_NAME_LENGTH                = 0x92F6;
const GL_MAX_NUM_ACTIVE_VARIABLES       = 0x92F7;
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GL_NAME_LENGTH                    = 0x92F9;
const GL_TYPE                           = 0x92FA;
const GL_ARRAY_SIZE                     = 0x92FB;
const GL_OFFSET                         = 0x92FC;
const GL_BLOCK_INDEX                    = 0x92FD;
const GL_ARRAY_STRIDE                   = 0x92FE;
const GL_MATRIX_STRIDE                  = 0x92FF;
const GL_IS_ROW_MAJOR                   = 0x9300;
const GL_ATOMIC_COUNTER_BUFFER_INDEX    = 0x9301;
const GL_BUFFER_BINDING                 = 0x9302;
const GL_BUFFER_DATA_SIZE               = 0x9303;
const GL_NUM_ACTIVE_VARIABLES           = 0x9304;
const GL_ACTIVE_VARIABLES               = 0x9305;
const GL_REFERENCED_BY_VERTEX_SHADER    = 0x9306;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GL_REFERENCED_BY_GEOMETRY_SHADER  = 0x9309;
const GL_REFERENCED_BY_FRAGMENT_SHADER  = 0x930A;
const GL_REFERENCED_BY_COMPUTE_SHADER   = 0x930B;
const GL_TOP_LEVEL_ARRAY_SIZE           = 0x930C;
const GL_TOP_LEVEL_ARRAY_STRIDE         = 0x930D;
const GL_LOCATION                       = 0x930E;
const GL_LOCATION_INDEX                 = 0x930F;
const GL_IS_PER_PATCH                   = 0x92E7;
const GL_SHADER_STORAGE_BUFFER          = 0x90D2;
const GL_SHADER_STORAGE_BUFFER_BINDING  = 0x90D3;
const GL_SHADER_STORAGE_BUFFER_START    = 0x90D4;
const GL_SHADER_STORAGE_BUFFER_SIZE     = 0x90D5;
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE  = 0x90DE;
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GL_SHADER_STORAGE_BARRIER_BIT     = 0x00002000;
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GL_DEPTH_STENCIL_TEXTURE_MODE     = 0x90EA;
const GL_TEXTURE_BUFFER_OFFSET          = 0x919D;
const GL_TEXTURE_BUFFER_SIZE            = 0x919E;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GL_TEXTURE_VIEW_MIN_LEVEL         = 0x82DB;
const GL_TEXTURE_VIEW_NUM_LEVELS        = 0x82DC;
const GL_TEXTURE_VIEW_MIN_LAYER         = 0x82DD;
const GL_TEXTURE_VIEW_NUM_LAYERS        = 0x82DE;
const GL_TEXTURE_IMMUTABLE_LEVELS       = 0x82DF;
const GL_VERTEX_ATTRIB_BINDING          = 0x82D4;
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET  = 0x82D5;
const GL_VERTEX_BINDING_DIVISOR         = 0x82D6;
const GL_VERTEX_BINDING_OFFSET          = 0x82D7;
const GL_VERTEX_BINDING_STRIDE          = 0x82D8;
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GL_MAX_VERTEX_ATTRIB_BINDINGS     = 0x82DA;
const GL_VERTEX_BINDING_BUFFER          = 0x8F4F;

/*=====END=====*/

/*=====Functions=====*/

fn void clearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, void *data) @extern("glClearBufferData");
fn void clearBufferSubData (GLenum target, GLenum internalformat, int* offset, isz* size, GLenum format, GLenum type, void *data) @extern("glClearBufferSubData");
fn void dispatchCompute (CUInt num_groups_x, CUInt num_groups_y, CUInt num_groups_z) @extern("glDispatchCompute");
fn void dispatchComputeIndirect (int* indirect) @extern("glDispatchComputeIndirect");
fn void copyImageSubData (CUInt srcName, GLenum srcTarget, CInt srcLevel, CInt srcX, CInt srcY, CInt srcZ, CUInt dstName, GLenum dstTarget, CInt dstLevel, CInt dstX, CInt dstY, CInt dstZ, usz srcWidth, usz srcHeight, usz srcDepth) @extern("glCopyImageSubData");
fn void framebufferParameteri (GLenum target, GLenum pname, CInt param) @extern("glFramebufferParameteri");
fn void getFramebufferParameteriv (GLenum target, GLenum pname, CInt *params) @extern("glGetFramebufferParameteriv");
fn void getInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, usz count, long *params) @extern("glGetInternalformati64v");
fn void invalidateTexSubImage (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth) @extern("glInvalidateTexSubImage");
fn void invalidateTexImage (CUInt texture, CInt level) @extern("glInvalidateTexImage");
fn void invalidateBufferSubData (CUInt buffer, int* offset, isz* length) @extern("glInvalidateBufferSubData");
fn void invalidateBufferData (CUInt buffer) @extern("glInvalidateBufferData");
fn void invalidateFramebuffer (GLenum target, usz numAttachments, GLenum *attachments) @extern("glInvalidateFramebuffer");
fn void invalidateSubFramebuffer (GLenum target, usz numAttachments, GLenum *attachments, CInt x, CInt y, usz width, usz height) @extern("glInvalidateSubFramebuffer");
fn void multiDrawArraysIndirect (GLenum mode, void *indirect, usz drawcount, usz stride) @extern("glMultiDrawArraysIndirect");
fn void multiDrawElementsIndirect (GLenum mode, GLenum type, void *indirect, usz drawcount, usz stride) @extern("glMultiDrawElementsIndirect");
fn void getProgramInterfaceiv (CUInt program, GLenum programInterface, GLenum pname, CInt *params) @extern("glGetProgramInterfaceiv");
fn CUInt getProgramResourceIndex (CUInt program, GLenum programInterface, char *name) @extern("glGetProgramResourceIndex");
fn void getProgramResourceName (CUInt program, GLenum programInterface, CUInt index, usz bufSize, usz *length, char *name) @extern("glGetProgramResourceName");
fn void getProgramResourceiv (CUInt program, GLenum programInterface, CUInt index, usz propCount, GLenum *props, usz count, usz *length, CInt *params) @extern("glGetProgramResourceiv");
fn CInt getProgramResourceLocation (CUInt program, GLenum programInterface, char *name) @extern("glGetProgramResourceLocation");
fn CInt getProgramResourceLocationIndex (CUInt program, GLenum programInterface, char *name) @extern("glGetProgramResourceLocationIndex");
fn void shaderStorageBlockBinding (CUInt program, CUInt storageBlockIndex, CUInt storageBlockBinding) @extern("glShaderStorageBlockBinding");
fn void texBufferRange (GLenum target, GLenum internalformat, CUInt buffer, int* offset, isz* size) @extern("glTexBufferRange");
fn void texStorage2DMultisample (GLenum target, usz samples, GLenum internalformat, usz width, usz height, bool fixedsamplelocations) @extern("glTexStorage2DMultisample");
fn void texStorage3DMultisample (GLenum target, usz samples, GLenum internalformat, usz width, usz height, usz depth, bool fixedsamplelocations) @extern("glTexStorage3DMultisample");
fn void textureView (CUInt texture, GLenum target, CUInt origtexture, GLenum internalformat, CUInt minlevel, CUInt numlevels, CUInt minlayer, CUInt numlayers) @extern("glTextureView");
fn void bindVertexBuffer (CUInt bindingindex, CUInt buffer, int* offset, usz stride) @extern("glBindVertexBuffer");
fn void vertexAttribFormat (CUInt attribindex, CInt size, GLenum type, bool normalized, CUInt relativeoffset) @extern("glVertexAttribFormat");
fn void vertexAttribIFormat (CUInt attribindex, CInt size, GLenum type, CUInt relativeoffset) @extern("glVertexAttribIFormat");
fn void vertexAttribLFormat (CUInt attribindex, CInt size, GLenum type, CUInt relativeoffset) @extern("glVertexAttribLFormat");
fn void vertexAttribBinding (CUInt attribindex, CUInt bindingindex) @extern("glVertexAttribBinding");
fn void vertexBindingDivisor (CUInt bindingindex, CUInt divisor) @extern("glVertexBindingDivisor");
fn void debugMessageControl (GLenum source, GLenum type, GLenum severity, usz count, CUInt *ids, bool enabled) @extern("glDebugMessageControl");
fn void debugMessageInsert (GLenum source, GLenum type, CUInt id, GLenum severity, usz length, char *buf) @extern("glDebugMessageInsert");
fn void debugMessageCallback (GLDebugProc callback, void *userParam) @extern("glDebugMessageCallback");
fn CUInt getDebugMessageLog (CUInt count, usz bufSize, GLenum *sources, GLenum *types, CUInt *ids, GLenum *severities, usz *lengths, char *messageLog) @extern("glGetDebugMessageLog");
fn void pushDebugGroup (GLenum source, CUInt id, usz length, char *message) @extern("glPushDebugGroup");
fn void popDebugGroup () @extern("glPopDebugGroup");
fn void objectLabel (GLenum identifier, CUInt name, usz length, char *label) @extern("glObjectLabel");
fn void getObjectLabel (GLenum identifier, CUInt name, usz bufSize, usz *length, char *label) @extern("glGetObjectLabel");
fn void objectPtrLabel (void *ptr, usz length, char *label) @extern("glObjectPtrLabel");
fn void getObjectPtrLabel (void *ptr, usz bufSize, usz *length, char *label) @extern("glGetObjectPtrLabel");

/*=====END=====*/
