module opengl::gl45;
import opengl;

/*=====Constants=====*/

const GL_CONTEXT_LOST                   = 0x0507;
const GL_NEGATIVE_ONE_TO_ONE            = 0x935E;
const GL_ZERO_TO_ONE                    = 0x935F;
const GL_CLIP_ORIGIN                    = 0x935C;
const GL_CLIP_DEPTH_MODE                = 0x935D;
const GL_QUERY_WAIT_INVERTED            = 0x8E17;
const GL_QUERY_NO_WAIT_INVERTED         = 0x8E18;
const GL_QUERY_BY_REGION_WAIT_INVERTED  = 0x8E19;
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
const GL_MAX_CULL_DISTANCES             = 0x82F9;
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
const GL_TEXTURE_TARGET                 = 0x1006;
const GL_QUERY_TARGET                   = 0x82EA;
const GL_GUILTY_CONTEXT_RESET           = 0x8253;
const GL_INNOCENT_CONTEXT_RESET         = 0x8254;
const GL_UNKNOWN_CONTEXT_RESET          = 0x8255;
const GL_RESET_NOTIFICATION_STRATEGY    = 0x8256;
const GL_LOSE_CONTEXT_ON_RESET          = 0x8252;
const GL_NO_RESET_NOTIFICATION          = 0x8261;
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
const GL_CONTEXT_RELEASE_BEHAVIOR       = 0x82FB;
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;

/*=====END=====*/

/*=====Functions=====*/

fn void clipControl (GLenum origin, GLenum depth) @extern("glClipControl");
fn void createTransformFeedbacks (usz n, CUInt *ids) @extern("glCreateTransformFeedbacks");
fn void transformFeedbackBufferBase (CUInt xfb, CUInt index, CUInt buffer) @extern("glTransformFeedbackBufferBase");
fn void transformFeedbackBufferRange (CUInt xfb, CUInt index, CUInt buffer, int* offset, isz* size) @extern("glTransformFeedbackBufferRange");
fn void getTransformFeedbackiv (CUInt xfb, GLenum pname, CInt *param) @extern("glGetTransformFeedbackiv");
fn void getTransformFeedbacki_v (CUInt xfb, GLenum pname, CUInt index, CInt *param) @extern("glGetTransformFeedbacki_v");
fn void getTransformFeedbacki64_v (CUInt xfb, GLenum pname, CUInt index, long *param) @extern("glGetTransformFeedbacki64_v");
fn void createBuffers (usz n, CUInt *buffers) @extern("glCreateBuffers");
fn void namedBufferStorage (CUInt buffer, isz* size, void *data, GLbitfield flags) @extern("glNamedBufferStorage");
fn void namedBufferData (CUInt buffer, isz* size, void *data, GLenum usage) @extern("glNamedBufferData");
fn void namedBufferSubData (CUInt buffer, int* offset, isz* size, void *data) @extern("glNamedBufferSubData");
fn void copyNamedBufferSubData (CUInt readBuffer, CUInt writeBuffer, int* readOffset, int* writeOffset, isz* size) @extern("glCopyNamedBufferSubData");
fn void clearNamedBufferData (CUInt buffer, GLenum internalformat, GLenum format, GLenum type, void *data) @extern("glClearNamedBufferData");
fn void clearNamedBufferSubData (CUInt buffer, GLenum internalformat, int* offset, isz* size, GLenum format, GLenum type, void *data) @extern("glClearNamedBufferSubData");
fn void* mapNamedBuffer (CUInt buffer, GLenum access) @extern("glMapNamedBuffer");
fn void* mapNamedBufferRange (CUInt buffer, int* offset, isz* length, GLbitfield access) @extern("glMapNamedBufferRange");
fn bool unmapNamedBuffer (CUInt buffer) @extern("glUnmapNamedBuffer");
fn void flushMappedNamedBufferRange (CUInt buffer, int* offset, isz* length) @extern("glFlushMappedNamedBufferRange");
fn void getNamedBufferParameteriv (CUInt buffer, GLenum pname, CInt *params) @extern("glGetNamedBufferParameteriv");
fn void getNamedBufferParameteri64v (CUInt buffer, GLenum pname, long *params) @extern("glGetNamedBufferParameteri64v");
fn void getNamedBufferPointerv (CUInt buffer, GLenum pname, void **params) @extern("glGetNamedBufferPointerv");
fn void getNamedBufferSubData (CUInt buffer, int* offset, isz* size, void *data) @extern("glGetNamedBufferSubData");
fn void createFramebuffers (usz n, CUInt *framebuffers) @extern("glCreateFramebuffers");
fn void namedFramebufferRenderbuffer (CUInt framebuffer, GLenum attachment, GLenum renderbuffertarget, CUInt renderbuffer) @extern("glNamedFramebufferRenderbuffer");
fn void namedFramebufferParameteri (CUInt framebuffer, GLenum pname, CInt param) @extern("glNamedFramebufferParameteri");
fn void namedFramebufferTexture (CUInt framebuffer, GLenum attachment, CUInt texture, CInt level) @extern("glNamedFramebufferTexture");
fn void namedFramebufferTextureLayer (CUInt framebuffer, GLenum attachment, CUInt texture, CInt level, CInt layer) @extern("glNamedFramebufferTextureLayer");
fn void namedFramebufferDrawBuffer (CUInt framebuffer, GLenum buf) @extern("glNamedFramebufferDrawBuffer");
fn void namedFramebufferDrawBuffers (CUInt framebuffer, usz n, GLenum *bufs) @extern("glNamedFramebufferDrawBuffers");
fn void namedFramebufferReadBuffer (CUInt framebuffer, GLenum src) @extern("glNamedFramebufferReadBuffer");
fn void invalidateNamedFramebufferData (CUInt framebuffer, usz numAttachments, GLenum *attachments) @extern("glInvalidateNamedFramebufferData");
fn void invalidateNamedFramebufferSubData (CUInt framebuffer, usz numAttachments, GLenum *attachments, CInt x, CInt y, usz width, usz height) @extern("glInvalidateNamedFramebufferSubData");
fn void clearNamedFramebufferiv (CUInt framebuffer, GLenum buffer, CInt drawbuffer, CInt *value) @extern("glClearNamedFramebufferiv");
fn void clearNamedFramebufferuiv (CUInt framebuffer, GLenum buffer, CInt drawbuffer, CUInt *value) @extern("glClearNamedFramebufferuiv");
fn void clearNamedFramebufferfv (CUInt framebuffer, GLenum buffer, CInt drawbuffer, float *value) @extern("glClearNamedFramebufferfv");
fn void clearNamedFramebufferfi (CUInt framebuffer, GLenum buffer, CInt drawbuffer, float depth, CInt stencil) @extern("glClearNamedFramebufferfi");
fn void blitNamedFramebuffer (CUInt readFramebuffer, CUInt drawFramebuffer, CInt srcX0, CInt srcY0, CInt srcX1, CInt srcY1, CInt dstX0, CInt dstY0, CInt dstX1, CInt dstY1, GLbitfield mask, GLenum filter) @extern("glBlitNamedFramebuffer");
fn GLenum checkNamedFramebufferStatus (CUInt framebuffer, GLenum target) @extern("glCheckNamedFramebufferStatus");
fn void getNamedFramebufferParameteriv (CUInt framebuffer, GLenum pname, CInt *param) @extern("glGetNamedFramebufferParameteriv");
fn void getNamedFramebufferAttachmentParameteriv (CUInt framebuffer, GLenum attachment, GLenum pname, CInt *params) @extern("glGetNamedFramebufferAttachmentParameteriv");
fn void createRenderbuffers (usz n, CUInt *renderbuffers) @extern("glCreateRenderbuffers");
fn void namedRenderbufferStorage (CUInt renderbuffer, GLenum internalformat, usz width, usz height) @extern("glNamedRenderbufferStorage");
fn void namedRenderbufferStorageMultisample (CUInt renderbuffer, usz samples, GLenum internalformat, usz width, usz height) @extern("glNamedRenderbufferStorageMultisample");
fn void getNamedRenderbufferParameteriv (CUInt renderbuffer, GLenum pname, CInt *params) @extern("glGetNamedRenderbufferParameteriv");
fn void createTextures (GLenum target, usz n, CUInt *textures) @extern("glCreateTextures");
fn void textureBuffer (CUInt texture, GLenum internalformat, CUInt buffer) @extern("glTextureBuffer");
fn void textureBufferRange (CUInt texture, GLenum internalformat, CUInt buffer, int* offset, isz* size) @extern("glTextureBufferRange");
fn void textureStorage1D (CUInt texture, usz levels, GLenum internalformat, usz width) @extern("glTextureStorage1D");
fn void textureStorage2D (CUInt texture, usz levels, GLenum internalformat, usz width, usz height) @extern("glTextureStorage2D");
fn void textureStorage3D (CUInt texture, usz levels, GLenum internalformat, usz width, usz height, usz depth) @extern("glTextureStorage3D");
fn void textureStorage2DMultisample (CUInt texture, usz samples, GLenum internalformat, usz width, usz height, bool fixedsamplelocations) @extern("glTextureStorage2DMultisample");
fn void textureStorage3DMultisample (CUInt texture, usz samples, GLenum internalformat, usz width, usz height, usz depth, bool fixedsamplelocations) @extern("glTextureStorage3DMultisample");
fn void textureSubImage1D (CUInt texture, CInt level, CInt xoffset, usz width, GLenum format, GLenum type, void *pixels) @extern("glTextureSubImage1D");
fn void textureSubImage2D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, usz width, usz height, GLenum format, GLenum type, void *pixels) @extern("glTextureSubImage2D");
fn void textureSubImage3D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth, GLenum format, GLenum type, void *pixels) @extern("glTextureSubImage3D");
fn void compressedTextureSubImage1D (CUInt texture, CInt level, CInt xoffset, usz width, GLenum format, usz imageSize, void *data) @extern("glCompressedTextureSubImage1D");
fn void compressedTextureSubImage2D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, usz width, usz height, GLenum format, usz imageSize, void *data) @extern("glCompressedTextureSubImage2D");
fn void compressedTextureSubImage3D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth, GLenum format, usz imageSize, void *data) @extern("glCompressedTextureSubImage3D");
fn void copyTextureSubImage1D (CUInt texture, CInt level, CInt xoffset, CInt x, CInt y, usz width) @extern("glCopyTextureSubImage1D");
fn void copyTextureSubImage2D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt x, CInt y, usz width, usz height) @extern("glCopyTextureSubImage2D");
fn void copyTextureSubImage3D (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, CInt x, CInt y, usz width, usz height) @extern("glCopyTextureSubImage3D");
fn void textureParameterf (CUInt texture, GLenum pname, float param) @extern("glTextureParameterf");
fn void textureParameterfv (CUInt texture, GLenum pname, float *param) @extern("glTextureParameterfv");
fn void textureParameteri (CUInt texture, GLenum pname, CInt param) @extern("glTextureParameteri");
fn void textureParameterIiv (CUInt texture, GLenum pname, CInt *params) @extern("glTextureParameterIiv");
fn void textureParameterIuiv (CUInt texture, GLenum pname, CUInt *params) @extern("glTextureParameterIuiv");
fn void textureParameteriv (CUInt texture, GLenum pname, CInt *param) @extern("glTextureParameteriv");
fn void generateTextureMipmap (CUInt texture) @extern("glGenerateTextureMipmap");
fn void bindTextureUnit (CUInt unit, CUInt texture) @extern("glBindTextureUnit");
fn void getTextureImage (CUInt texture, CInt level, GLenum format, GLenum type, usz bufSize, void *pixels) @extern("glGetTextureImage");
fn void getCompressedTextureImage (CUInt texture, CInt level, usz bufSize, void *pixels) @extern("glGetCompressedTextureImage");
fn void getTextureLevelParameterfv (CUInt texture, CInt level, GLenum pname, float *params) @extern("glGetTextureLevelParameterfv");
fn void getTextureLevelParameteriv (CUInt texture, CInt level, GLenum pname, CInt *params) @extern("glGetTextureLevelParameteriv");
fn void getTextureParameterfv (CUInt texture, GLenum pname, float *params) @extern("glGetTextureParameterfv");
fn void getTextureParameterIiv (CUInt texture, GLenum pname, CInt *params) @extern("glGetTextureParameterIiv");
fn void getTextureParameterIuiv (CUInt texture, GLenum pname, CUInt *params) @extern("glGetTextureParameterIuiv");
fn void getTextureParameteriv (CUInt texture, GLenum pname, CInt *params) @extern("glGetTextureParameteriv");
fn void createVertexArrays (usz n, CUInt *arrays) @extern("glCreateVertexArrays");
fn void disableVertexArrayAttrib (CUInt vaobj, CUInt index) @extern("glDisableVertexArrayAttrib");
fn void enableVertexArrayAttrib (CUInt vaobj, CUInt index) @extern("glEnableVertexArrayAttrib");
fn void vertexArrayElementBuffer (CUInt vaobj, CUInt buffer) @extern("glVertexArrayElementBuffer");
fn void vertexArrayVertexBuffer (CUInt vaobj, CUInt bindingindex, CUInt buffer, int* offset, usz stride) @extern("glVertexArrayVertexBuffer");
fn void vertexArrayVertexBuffers (CUInt vaobj, CUInt first, usz count, CUInt *buffers, int* *offsets, usz *strides) @extern("glVertexArrayVertexBuffers");
fn void vertexArrayAttribBinding (CUInt vaobj, CUInt attribindex, CUInt bindingindex) @extern("glVertexArrayAttribBinding");
fn void vertexArrayAttribFormat (CUInt vaobj, CUInt attribindex, CInt size, GLenum type, bool normalized, CUInt relativeoffset) @extern("glVertexArrayAttribFormat");
fn void vertexArrayAttribIFormat (CUInt vaobj, CUInt attribindex, CInt size, GLenum type, CUInt relativeoffset) @extern("glVertexArrayAttribIFormat");
fn void vertexArrayAttribLFormat (CUInt vaobj, CUInt attribindex, CInt size, GLenum type, CUInt relativeoffset) @extern("glVertexArrayAttribLFormat");
fn void vertexArrayBindingDivisor (CUInt vaobj, CUInt bindingindex, CUInt divisor) @extern("glVertexArrayBindingDivisor");
fn void getVertexArrayiv (CUInt vaobj, GLenum pname, CInt *param) @extern("glGetVertexArrayiv");
fn void getVertexArrayIndexediv (CUInt vaobj, CUInt index, GLenum pname, CInt *param) @extern("glGetVertexArrayIndexediv");
fn void getVertexArrayIndexed64iv (CUInt vaobj, CUInt index, GLenum pname, long *param) @extern("glGetVertexArrayIndexed64iv");
fn void createSamplers (usz n, CUInt *samplers) @extern("glCreateSamplers");
fn void createProgramPipelines (usz n, CUInt *pipelines) @extern("glCreateProgramPipelines");
fn void createQueries (GLenum target, usz n, CUInt *ids) @extern("glCreateQueries");
fn void getQueryBufferObjecti64v (CUInt id, CUInt buffer, GLenum pname, int* offset) @extern("glGetQueryBufferObjecti64v");
fn void getQueryBufferObjectiv (CUInt id, CUInt buffer, GLenum pname, int* offset) @extern("glGetQueryBufferObjectiv");
fn void getQueryBufferObjectui64v (CUInt id, CUInt buffer, GLenum pname, int* offset) @extern("glGetQueryBufferObjectui64v");
fn void getQueryBufferObjectuiv (CUInt id, CUInt buffer, GLenum pname, int* offset) @extern("glGetQueryBufferObjectuiv");
fn void memoryBarrierByRegion (GLbitfield barriers) @extern("glMemoryBarrierByRegion");
fn void getTextureSubImage (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth, GLenum format, GLenum type, usz bufSize, void *pixels) @extern("glGetTextureSubImage");
fn void getCompressedTextureSubImage (CUInt texture, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth, usz bufSize, void *pixels) @extern("glGetCompressedTextureSubImage");
fn GLenum getGraphicsResetStatus () @extern("glGetGraphicsResetStatus");
fn void getnCompressedTexImage (GLenum target, CInt lod, usz bufSize, void *pixels) @extern("glGetnCompressedTexImage");
fn void getnTexImage (GLenum target, CInt level, GLenum format, GLenum type, usz bufSize, void *pixels) @extern("glGetnTexImage");
fn void getnUniformdv (CUInt program, CInt location, usz bufSize, double *params) @extern("glGetnUniformdv");
fn void getnUniformfv (CUInt program, CInt location, usz bufSize, float *params) @extern("glGetnUniformfv");
fn void getnUniformiv (CUInt program, CInt location, usz bufSize, CInt *params) @extern("glGetnUniformiv");
fn void getnUniformuiv (CUInt program, CInt location, usz bufSize, CUInt *params) @extern("glGetnUniformuiv");
fn void readnPixels (CInt x, CInt y, usz width, usz height, GLenum format, GLenum type, usz bufSize, void *data) @extern("glReadnPixels");
fn void textureBarrier () @extern("glTextureBarrier");

/*=====END=====*/
