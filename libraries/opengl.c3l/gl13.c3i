module opengl::gl13;

import opengl;

/*=====Constants=====*/

const GL_TEXTURE0                      = 0x84C0;
const GL_TEXTURE1                      = 0x84C1;
const GL_TEXTURE2                      = 0x84C2;
const GL_TEXTURE3                      = 0x84C3;
const GL_TEXTURE4                      = 0x84C4;
const GL_TEXTURE5                      = 0x84C5;
const GL_TEXTURE6                      = 0x84C6;
const GL_TEXTURE7                      = 0x84C7;
const GL_TEXTURE8                      = 0x84C8;
const GL_TEXTURE9                      = 0x84C9;
const GL_TEXTURE10                     = 0x84CA;
const GL_TEXTURE11                     = 0x84CB;
const GL_TEXTURE12                     = 0x84CC;
const GL_TEXTURE13                     = 0x84CD;
const GL_TEXTURE14                     = 0x84CE;
const GL_TEXTURE15                     = 0x84CF;
const GL_TEXTURE16                     = 0x84D0;
const GL_TEXTURE17                     = 0x84D1;
const GL_TEXTURE18                     = 0x84D2;
const GL_TEXTURE19                     = 0x84D3;
const GL_TEXTURE20                     = 0x84D4;
const GL_TEXTURE21                     = 0x84D5;
const GL_TEXTURE22                     = 0x84D6;
const GL_TEXTURE23                     = 0x84D7;
const GL_TEXTURE24                     = 0x84D8;
const GL_TEXTURE25                     = 0x84D9;
const GL_TEXTURE26                     = 0x84DA;
const GL_TEXTURE27                     = 0x84DB;
const GL_TEXTURE28                     = 0x84DC;
const GL_TEXTURE29                     = 0x84DD;
const GL_TEXTURE30                     = 0x84DE;
const GL_TEXTURE31                     = 0x84DF;
const GL_ACTIVE_TEXTURE                = 0x84E0;
const GL_MULTISAMPLE                   = 0x809D;
const GL_SAMPLE_ALPHA_TO_COVERAGE      = 0x809E;
const GL_SAMPLE_ALPHA_TO_ONE           = 0x809F;
const GL_SAMPLE_COVERAGE               = 0x80A0;
const GL_SAMPLE_BUFFERS                = 0x80A8;
const GL_SAMPLES                       = 0x80A9;
const GL_SAMPLE_COVERAGE_VALUE         = 0x80AA;
const GL_SAMPLE_COVERAGE_INVERT        = 0x80AB;
const GL_TEXTURE_CUBE_MAP              = 0x8513;
const GL_TEXTURE_BINDING_CUBE_MAP      = 0x8514;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X   = 0x8515;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X   = 0x8516;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y   = 0x8517;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y   = 0x8518;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z   = 0x8519;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z   = 0x851A;
const GL_PROXY_TEXTURE_CUBE_MAP        = 0x851B;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE     = 0x851C;
const GL_COMPRESSED_RGB                = 0x84ED;
const GL_COMPRESSED_RGBA               = 0x84EE;
const GL_TEXTURE_COMPRESSION_HINT      = 0x84EF;
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
const GL_TEXTURE_COMPRESSED            = 0x86A1;
const GL_NUM_COMPRESSED_TEXTURE_FORMATS= 0x86A2;
const GL_COMPRESSED_TEXTURE_FORMATS    = 0x86A3;
const GL_CLAMP_TO_BORDER               = 0x812D;

/*=====END=====*/

/*=====Functions=====*/

fn void activeTexture (GLenum texture) @extern("glActiveTexture");
fn void sampleCoverage (float value, bool invert) @extern("glSampleCoverage");
fn void compressedTexImage3D (GLenum target, CInt level, GLenum internalformat, usz width, usz height, usz depth, CInt border, usz imageSize, void *data) @extern("glCompressedTexImage3D");
fn void compressedTexImage2D (GLenum target, CInt level, GLenum internalformat, usz width, usz height, CInt border, usz imageSize, void *data) @extern("glCompressedTexImage2D");
fn void compressedTexImage1D (GLenum target, CInt level, GLenum internalformat, usz width, CInt border, usz imageSize, void *data) @extern("glCompressedTexImage1D");
fn void compressedTexSubImage3D (GLenum target, CInt level, CInt xoffset, CInt yoffset, CInt zoffset, usz width, usz height, usz depth, GLenum format, usz imageSize, void *data) @extern("glCompressedTexSubImage3D");
fn void compressedTexSubImage2D (GLenum target, CInt level, CInt xoffset, CInt yoffset, usz width, usz height, GLenum format, usz imageSize, void *data) @extern("glCompressedTexSubImage2D");
fn void compressedTexSubImage1D (GLenum target, CInt level, CInt xoffset, usz width, GLenum format, usz imageSize, void *data) @extern("glCompressedTexSubImage1D");
fn void getCompressedTexImage (GLenum target, CInt level, void *img) @extern("glGetCompressedTexImage");
/*=====END=====*/
