module opengl::gl10;

distinct GLenum = uint;

distinct GLbitfield = uint;


/*=====Constants=====*/
const DEPTH_BUFFER_BIT = 0x00000100;
const STENCIL_BUFFER_BIT = 0x00000400;
const COLOR_BUFFER_BIT = 0x00004000;
const FALSE = 0;
const TRUE = 1;
const POINTS = 0x0000;
const LINES = 0x0001;
const LINE_LOOP = 0x0002;
const LINE_STRIP = 0x0003;
const TRIANGLES = 0x0004;
const TRIANGLE_STRIP = 0x0005;
const TRIANGLE_FAN = 0x0006;
const QUADS = 0x0007;
const NEVER = 0x0200;
const LESS = 0x0201;
const EQUAL = 0x0202;
const LEQUAL = 0x0203;
const GREATER = 0x0204;
const NOTEQUAL = 0x0205;
const GEQUAL = 0x0206;
const ALWAYS = 0x0207;
const ZERO = 0;
const ONE = 1;
const SRC_COLOR = 0x0300;
const ONE_MINUS_SRC_COLOR = 0x0301;
const SRC_ALPHA = 0x0302;
const ONE_MINUS_SRC_ALPHA = 0x0303;
const DST_ALPHA = 0x0304;
const ONE_MINUS_DST_ALPHA = 0x0305;
const DST_COLOR = 0x0306;
const ONE_MINUS_DST_COLOR = 0x0307;
const SRC_ALPHA_SATURATE = 0x0308;
const NONE = 0;
const FRONT_LEFT = 0x0400;
const FRONT_RIGHT = 0x0401;
const BACK_LEFT = 0x0402;
const BACK_RIGHT = 0x0403;
const FRONT = 0x0404;
const BACK = 0x0405;
const LEFT = 0x0406;
const RIGHT = 0x0407;
const FRONT_AND_BACK = 0x0408;
const NO_ERROR = 0;
const INVALID_ENUM = 0x0500;
const INVALID_VALUE = 0x0501;
const INVALID_OPERATION = 0x0502;
const OUT_OF_MEMORY = 0x0505;
const CW = 0x0900;
const CCW = 0x0901;
const POINT_SIZE = 0x0B11;
const POINT_SIZE_RANGE = 0x0B12;
const POINT_SIZE_GRANULARITY = 0x0B13;
const LINE_SMOOTH = 0x0B20;
const LINE_WIDTH = 0x0B21;
const LINE_WIDTH_RANGE = 0x0B22;
const LINE_WIDTH_GRANULARITY = 0x0B23;
const POLYGON_MODE = 0x0B40;
const POLYGON_SMOOTH = 0x0B41;
const CULL_FACE = 0x0B44;
const CULL_FACE_MODE = 0x0B45;
const FRONT_FACE = 0x0B46;
const DEPTH_RANGE = 0x0B70;
const DEPTH_TEST = 0x0B71;
const DEPTH_WRITEMASK = 0x0B72;
const DEPTH_CLEAR_VALUE = 0x0B73;
const DEPTH_FUNC = 0x0B74;
const STENCIL_TEST = 0x0B90;
const STENCIL_CLEAR_VALUE = 0x0B91;
const STENCIL_FUNC = 0x0B92;
const STENCIL_VALUE_MASK = 0x0B93;
const STENCIL_FAIL = 0x0B94;
const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const STENCIL_PASS_DEPTH_PASS = 0x0B96;
const STENCIL_REF = 0x0B97;
const STENCIL_WRITEMASK = 0x0B98;
const VIEWPORT = 0x0BA2;
const DITHER = 0x0BD0;
const BLEND_DST = 0x0BE0;
const BLEND_SRC = 0x0BE1;
const BLEND = 0x0BE2;
const LOGIC_OP_MODE = 0x0BF0;
const DRAW_BUFFER = 0x0C01;
const READ_BUFFER = 0x0C02;
const SCISSOR_BOX = 0x0C10;
const SCISSOR_TEST = 0x0C11;
const COLOR_CLEAR_VALUE = 0x0C22;
const COLOR_WRITEMASK = 0x0C23;
const DOUBLEBUFFER = 0x0C32;
const STEREO = 0x0C33;
const LINE_SMOOTH_HINT = 0x0C52;
const POLYGON_SMOOTH_HINT = 0x0C53;
const UNPACK_SWAP_BYTES = 0x0CF0;
const UNPACK_LSB_FIRST = 0x0CF1;
const UNPACK_ROW_LENGTH = 0x0CF2;
const UNPACK_SKIP_ROWS = 0x0CF3;
const UNPACK_SKIP_PIXELS = 0x0CF4;
const UNPACK_ALIGNMENT = 0x0CF5;
const PACK_SWAP_BYTES = 0x0D00;
const PACK_LSB_FIRST = 0x0D01;
const PACK_ROW_LENGTH = 0x0D02;
const PACK_SKIP_ROWS = 0x0D03;
const PACK_SKIP_PIXELS = 0x0D04;
const PACK_ALIGNMENT = 0x0D05;
const MAX_TEXTURE_SIZE = 0x0D33;
const MAX_VIEWPORT_DIMS = 0x0D3A;
const SUBPIXEL_BITS = 0x0D50;
const TEXTURE_1D = 0x0DE0;
const TEXTURE_2D = 0x0DE1;
const TEXTURE_WIDTH = 0x1000;
const TEXTURE_HEIGHT = 0x1001;
const TEXTURE_BORDER_COLOR = 0x1004;
const DONT_CARE = 0x1100;
const FASTEST = 0x1101;
const NICEST = 0x1102;
const BYTE = 0x1400;
const UNSIGNED_BYTE = 0x1401;
const SHORT = 0x1402;
const UNSIGNED_SHORT = 0x1403;
const INT = 0x1404;
const UNSIGNED_INT = 0x1405;
const FLOAT = 0x1406;
const STACK_OVERFLOW = 0x0503;
const STACK_UNDERFLOW = 0x0504;
const CLEAR = 0x1500;
const AND = 0x1501;
const AND_REVERSE = 0x1502;
const COPY = 0x1503;
const AND_INVERTED = 0x1504;
const NOOP = 0x1505;
const XOR = 0x1506;
const OR = 0x1507;
const NOR = 0x1508;
const EQUIV = 0x1509;
const INVERT = 0x150A;
const OR_REVERSE = 0x150B;
const COPY_INVERTED = 0x150C;
const OR_INVERTED = 0x150D;
const NAND = 0x150E;
const SET = 0x150F;
const TEXTURE = 0x1702;
const COLOR = 0x1800;
const DEPTH = 0x1801;
const STENCIL = 0x1802;
const STENCIL_INDEX = 0x1901;
const DEPTH_COMPONENT = 0x1902;
const RED = 0x1903;
const GREEN = 0x1904;
const BLUE = 0x1905;
const ALPHA = 0x1906;
const RGB = 0x1907;
const RGBA = 0x1908;
const POINT = 0x1B00;
const LINE = 0x1B01;
const FILL = 0x1B02;
const KEEP = 0x1E00;
const REPLACE = 0x1E01;
const INCR = 0x1E02;
const DECR = 0x1E03;
const VENDOR = 0x1F00;
const RENDERER = 0x1F01;
const VERSION = 0x1F02;
const EXTENSIONS = 0x1F03;
const NEAREST = 0x2600;
const LINEAR = 0x2601;
const NEAREST_MIPMAP_NEAREST = 0x2700;
const LINEAR_MIPMAP_NEAREST = 0x2701;
const NEAREST_MIPMAP_LINEAR = 0x2702;
const LINEAR_MIPMAP_LINEAR = 0x2703;
const TEXTURE_MAG_FILTER = 0x2800;
const TEXTURE_MIN_FILTER = 0x2801;
const TEXTURE_WRAP_S = 0x2802;
const TEXTURE_WRAP_T = 0x2803;
const REPEAT = 0x2901;
/*=====END=====*/
/*=====Functions=====*/
fn void cull_face (GLenum mode) @extern("glCullFace");
fn void front_face (GLenum mode) @extern("glFrontFace");
fn void hint (GLenum target, GLenum mode) @extern("glHint");
fn void line_width (float width) @extern("glLineWidth");
fn void point_size (float size) @extern("glPointSize");
fn void polygon_mode (GLenum face, GLenum mode) @extern("glPolygonMode");
fn void scissor (CInt x, CInt y, CInt width, CInt height) @extern("glScissor");
fn void tex_parameterf (GLenum target, GLenum pname, float param) @extern("glTexParameterf");
fn void tex_parameterfv (GLenum target, GLenum pname, float *params) @extern("glTexParameterfv");
fn void tex_parameteri (GLenum target, GLenum pname, CInt param) @extern("glTexParameteri");
fn void tex_parameteriv (GLenum target, GLenum pname, CInt *params) @extern("glTexParameteriv");
fn void tex_image1D (GLenum target, CInt level, CInt internalformat, CInt width, CInt border, GLenum format, GLenum type, void *pixels) @extern("glTexImage1D");
fn void tex_image2D (GLenum target, CInt level, CInt internalformat, CInt width, CInt height, CInt border, GLenum format, GLenum type, void *pixels) @extern("glTexImage2D");
fn void draw_buffer (GLenum buf) @extern("glDrawBuffer");
fn void clear (GLbitfield mask) @extern("glClear");
fn void clear_color (float red, float green, float blue, float alpha) @extern("glClearColor");
fn void clear_stencil (CInt s) @extern("glClearStencil");
fn void clear_depth (double depth) @extern("glClearDepth");
fn void stencil_mask (uint mask) @extern("glStencilMask");
fn void color_mask (char red, char green, char blue, char alpha) @extern("glColorMask");
fn void depth_mask (char flag) @extern("glDepthMask");
fn void disable (GLenum cap) @extern("glDisable");
fn void enable (GLenum cap) @extern("glEnable");
fn void finish () @extern("glFinish");
fn void flush () @extern("glFlush");
fn void blend_func (GLenum sfactor, GLenum dfactor) @extern("glBlendFunc");
fn void logic_op (GLenum opcode) @extern("glLogicOp");
fn void stencil_func (GLenum func, CInt ref, CUInt mask) @extern("glStencilFunc");
fn void stencil_op (GLenum fail, GLenum zfail, GLenum zpass) @extern("glStencilOp");
fn void depth_func (GLenum func) @extern("glDepthFunc");
fn void pixel_storef (GLenum pname, float param) @extern("glPixelStoref");
fn void pixel_storei (GLenum pname, CInt param) @extern("glPixelStorei");
fn void read_buffer (GLenum src) @extern("glReadBuffer");
fn void read_pixels (CInt x, CInt y, CInt width, CInt height, GLenum format, GLenum type, void *pixels) @extern("glReadPixels");
fn void get_booleanv (GLenum pname, char *data) @extern("glGetBooleanv");
fn void get_doublev (GLenum pname, double *data) @extern("glGetDoublev");
fn GLenum get_error () @extern("glGetError");
fn void get_floatv (GLenum pname, float *data) @extern("glGetFloatv");
fn void get_integerv (GLenum pname, CInt *data) @extern("glGetIntegerv");
fn ZString get_string (GLenum name) @extern("glget_tex_image");
fn void get_tex_image (GLenum target, CInt level, GLenum format, GLenum type, void *pixels) @extern("glGetTexImage");
fn void get_tex_parameterfv (GLenum target, GLenum pname, float *params) @extern("glGetTexParameterfv");
fn void get_tex_parameteriv (GLenum target, GLenum pname, CInt *params) @extern("glGetTexParameteriv");
fn void get_tex_level_parameterfv (GLenum target, CInt level, GLenum pname, float *params) @extern("glGetTexLevelParameterfv");
fn void get_tex_level_parameteriv (GLenum target, CInt level, GLenum pname, CInt *params) @extern("glGetTexLevelParameteriv");
fn bool is_enabled (GLenum cap) @extern("glIsEnabled");
fn void depth_range (double n, double f) @extern("glDepthRange");
fn void viewport (CInt x, CInt y, CInt width, CInt height) @extern("glViewport");
/*=====END=====*/
