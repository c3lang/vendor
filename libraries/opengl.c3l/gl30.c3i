module opengl::gl30;
import opengl;

/*=====Constants=====*/
const GL_COMPARE_REF_TO_TEXTURE         = 0x884E;
const GL_CLIP_DISTANCE0                 = 0x3000;
const GL_CLIP_DISTANCE1                 = 0x3001;
const GL_CLIP_DISTANCE2                 = 0x3002;
const GL_CLIP_DISTANCE3                 = 0x3003;
const GL_CLIP_DISTANCE4                 = 0x3004;
const GL_CLIP_DISTANCE5                 = 0x3005;
const GL_CLIP_DISTANCE6                 = 0x3006;
const GL_CLIP_DISTANCE7                 = 0x3007;
const GL_MAX_CLIP_DISTANCES             = 0x0D32;
const GL_MAJOR_VERSION                  = 0x821B;
const GL_MINOR_VERSION                  = 0x821C;
const GL_NUM_EXTENSIONS                 = 0x821D;
const GL_CONTEXT_FLAGS                  = 0x821E;
const GL_COMPRESSED_RED                 = 0x8225;
const GL_COMPRESSED_RG                  = 0x8226;
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GL_RGBA32F                        = 0x8814;
const GL_RGB32F                         = 0x8815;
const GL_RGBA16F                        = 0x881A;
const GL_RGB16F                         = 0x881B;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER    = 0x88FD;
const GL_MAX_ARRAY_TEXTURE_LAYERS       = 0x88FF;
const GL_MIN_PROGRAM_TEXEL_OFFSET       = 0x8904;
const GL_MAX_PROGRAM_TEXEL_OFFSET       = 0x8905;
const GL_CLAMP_READ_COLOR               = 0x891C;
const GL_FIXED_ONLY                     = 0x891D;
const GL_MAX_VARYING_COMPONENTS         = 0x8B4B;
const GL_TEXTURE_1D_ARRAY               = 0x8C18;
const GL_PROXY_TEXTURE_1D_ARRAY         = 0x8C19;
const GL_TEXTURE_2D_ARRAY               = 0x8C1A;
const GL_PROXY_TEXTURE_2D_ARRAY         = 0x8C1B;
const GL_TEXTURE_BINDING_1D_ARRAY       = 0x8C1C;
const GL_TEXTURE_BINDING_2D_ARRAY       = 0x8C1D;
const GL_R11F_G11F_B10F                 = 0x8C3A;
const GL_UNSIGNED_INT_10F_11F_11F_REV   = 0x8C3B;
const GL_RGB9_E5                        = 0x8C3D;
const GL_UNSIGNED_INT_5_9_9_9_REV       = 0x8C3E;
const GL_TEXTURE_SHARED_SIZE            = 0x8C3F;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GL_TRANSFORM_FEEDBACK_VARYINGS    = 0x8C83;
const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GL_PRIMITIVES_GENERATED           = 0x8C87;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GL_RASTERIZER_DISCARD             = 0x8C89;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GL_INTERLEAVED_ATTRIBS            = 0x8C8C;
const GL_SEPARATE_ATTRIBS               = 0x8C8D;
const GL_TRANSFORM_FEEDBACK_BUFFER      = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GL_RGBA32UI                       = 0x8D70;
const GL_RGB32UI                        = 0x8D71;
const GL_RGBA16UI                       = 0x8D76;
const GL_RGB16UI                        = 0x8D77;
const GL_RGBA8UI                        = 0x8D7C;
const GL_RGB8UI                         = 0x8D7D;
const GL_RGBA32I                        = 0x8D82;
const GL_RGB32I                         = 0x8D83;
const GL_RGBA16I                        = 0x8D88;
const GL_RGB16I                         = 0x8D89;
const GL_RGBA8I                         = 0x8D8E;
const GL_RGB8I                          = 0x8D8F;
const GL_RED_INTEGER                    = 0x8D94;
const GL_GREEN_INTEGER                  = 0x8D95;
const GL_BLUE_INTEGER                   = 0x8D96;
const GL_RGB_INTEGER                    = 0x8D98;
const GL_RGBA_INTEGER                   = 0x8D99;
const GL_BGR_INTEGER                    = 0x8D9A;
const GL_BGRA_INTEGER                   = 0x8D9B;
const GL_SAMPLER_1D_ARRAY               = 0x8DC0;
const GL_SAMPLER_2D_ARRAY               = 0x8DC1;
const GL_SAMPLER_1D_ARRAY_SHADOW        = 0x8DC3;
const GL_SAMPLER_2D_ARRAY_SHADOW        = 0x8DC4;
const GL_SAMPLER_CUBE_SHADOW            = 0x8DC5;
const GL_UNSIGNED_INT_VEC2              = 0x8DC6;
const GL_UNSIGNED_INT_VEC3              = 0x8DC7;
const GL_UNSIGNED_INT_VEC4              = 0x8DC8;
const GL_INT_SAMPLER_1D                 = 0x8DC9;
const GL_INT_SAMPLER_2D                 = 0x8DCA;
const GL_INT_SAMPLER_3D                 = 0x8DCB;
const GL_INT_SAMPLER_CUBE               = 0x8DCC;
const GL_INT_SAMPLER_1D_ARRAY           = 0x8DCE;
const GL_INT_SAMPLER_2D_ARRAY           = 0x8DCF;
const GL_UNSIGNED_INT_SAMPLER_1D        = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_2D        = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_3D        = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_CUBE      = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  = 0x8DD7;
const GL_QUERY_WAIT                     = 0x8E13;
const GL_QUERY_NO_WAIT                  = 0x8E14;
const GL_QUERY_BY_REGION_WAIT           = 0x8E15;
const GL_QUERY_BY_REGION_NO_WAIT        = 0x8E16;
const GL_BUFFER_ACCESS_FLAGS            = 0x911F;
const GL_BUFFER_MAP_LENGTH              = 0x9120;
const GL_BUFFER_MAP_OFFSET              = 0x9121;
const GL_DEPTH_COMPONENT32F             = 0x8CAC;
const GL_DEPTH32F_STENCIL8              = 0x8CAD;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GL_INVALID_FRAMEBUFFER_OPERATION  = 0x0506;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GL_FRAMEBUFFER_DEFAULT            = 0x8218;
const GL_FRAMEBUFFER_UNDEFINED          = 0x8219;
const GL_DEPTH_STENCIL_ATTACHMENT       = 0x821A;
const GL_MAX_RENDERBUFFER_SIZE          = 0x84E8;
const GL_DEPTH_STENCIL                  = 0x84F9;
const GL_UNSIGNED_INT_24_8              = 0x84FA;
const GL_DEPTH24_STENCIL8               = 0x88F0;
const GL_TEXTURE_STENCIL_SIZE           = 0x88F1;
const GL_TEXTURE_RED_TYPE               = 0x8C10;
const GL_TEXTURE_GREEN_TYPE             = 0x8C11;
const GL_TEXTURE_BLUE_TYPE              = 0x8C12;
const GL_TEXTURE_ALPHA_TYPE             = 0x8C13;
const GL_TEXTURE_DEPTH_TYPE             = 0x8C16;
const GL_UNSIGNED_NORMALIZED            = 0x8C17;
const GL_FRAMEBUFFER_BINDING            = 0x8CA6;
const GL_DRAW_FRAMEBUFFER_BINDING       = 0x8CA6;
const GL_RENDERBUFFER_BINDING           = 0x8CA7;
const GL_READ_FRAMEBUFFER               = 0x8CA8;
const GL_DRAW_FRAMEBUFFER               = 0x8CA9;
const GL_READ_FRAMEBUFFER_BINDING       = 0x8CAA;
const GL_RENDERBUFFER_SAMPLES           = 0x8CAB;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GL_FRAMEBUFFER_COMPLETE           = 0x8CD5;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GL_FRAMEBUFFER_UNSUPPORTED        = 0x8CDD;
const GL_MAX_COLOR_ATTACHMENTS          = 0x8CDF;
const GL_COLOR_ATTACHMENT0              = 0x8CE0;
const GL_COLOR_ATTACHMENT1              = 0x8CE1;
const GL_COLOR_ATTACHMENT2              = 0x8CE2;
const GL_COLOR_ATTACHMENT3              = 0x8CE3;
const GL_COLOR_ATTACHMENT4              = 0x8CE4;
const GL_COLOR_ATTACHMENT5              = 0x8CE5;
const GL_COLOR_ATTACHMENT6              = 0x8CE6;
const GL_COLOR_ATTACHMENT7              = 0x8CE7;
const GL_COLOR_ATTACHMENT8              = 0x8CE8;
const GL_COLOR_ATTACHMENT9              = 0x8CE9;
const GL_COLOR_ATTACHMENT10             = 0x8CEA;
const GL_COLOR_ATTACHMENT11             = 0x8CEB;
const GL_COLOR_ATTACHMENT12             = 0x8CEC;
const GL_COLOR_ATTACHMENT13             = 0x8CED;
const GL_COLOR_ATTACHMENT14             = 0x8CEE;
const GL_COLOR_ATTACHMENT15             = 0x8CEF;
const GL_COLOR_ATTACHMENT16             = 0x8CF0;
const GL_COLOR_ATTACHMENT17             = 0x8CF1;
const GL_COLOR_ATTACHMENT18             = 0x8CF2;
const GL_COLOR_ATTACHMENT19             = 0x8CF3;
const GL_COLOR_ATTACHMENT20             = 0x8CF4;
const GL_COLOR_ATTACHMENT21             = 0x8CF5;
const GL_COLOR_ATTACHMENT22             = 0x8CF6;
const GL_COLOR_ATTACHMENT23             = 0x8CF7;
const GL_COLOR_ATTACHMENT24             = 0x8CF8;
const GL_COLOR_ATTACHMENT25             = 0x8CF9;
const GL_COLOR_ATTACHMENT26             = 0x8CFA;
const GL_COLOR_ATTACHMENT27             = 0x8CFB;
const GL_COLOR_ATTACHMENT28             = 0x8CFC;
const GL_COLOR_ATTACHMENT29             = 0x8CFD;
const GL_COLOR_ATTACHMENT30             = 0x8CFE;
const GL_COLOR_ATTACHMENT31             = 0x8CFF;
const GL_DEPTH_ATTACHMENT               = 0x8D00;
const GL_STENCIL_ATTACHMENT             = 0x8D20;
const GL_FRAMEBUFFER                    = 0x8D40;
const GL_RENDERBUFFER                   = 0x8D41;
const GL_RENDERBUFFER_WIDTH             = 0x8D42;
const GL_RENDERBUFFER_HEIGHT            = 0x8D43;
const GL_RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;
const GL_STENCIL_INDEX1                 = 0x8D46;
const GL_STENCIL_INDEX4                 = 0x8D47;
const GL_STENCIL_INDEX8                 = 0x8D48;
const GL_STENCIL_INDEX16                = 0x8D49;
const GL_RENDERBUFFER_RED_SIZE          = 0x8D50;
const GL_RENDERBUFFER_GREEN_SIZE        = 0x8D51;
const GL_RENDERBUFFER_BLUE_SIZE         = 0x8D52;
const GL_RENDERBUFFER_ALPHA_SIZE        = 0x8D53;
const GL_RENDERBUFFER_DEPTH_SIZE        = 0x8D54;
const GL_RENDERBUFFER_STENCIL_SIZE      = 0x8D55;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GL_MAX_SAMPLES                    = 0x8D57;
const GL_FRAMEBUFFER_SRGB               = 0x8DB9;
const GL_HALF_FLOAT                     = 0x140B;
const GL_MAP_READ_BIT                   = 0x0001;
const GL_MAP_WRITE_BIT                  = 0x0002;
const GL_MAP_INVALIDATE_RANGE_BIT       = 0x0004;
const GL_MAP_INVALIDATE_BUFFER_BIT      = 0x0008;
const GL_MAP_FLUSH_EXPLICIT_BIT         = 0x0010;
const GL_MAP_UNSYNCHRONIZED_BIT         = 0x0020;
const GL_COMPRESSED_RED_RGTC1           = 0x8DBB;
const GL_COMPRESSED_SIGNED_RED_RGTC1    = 0x8DBC;
const GL_COMPRESSED_RG_RGTC2            = 0x8DBD;
const GL_COMPRESSED_SIGNED_RG_RGTC2     = 0x8DBE;
const GL_RG                             = 0x8227;
const GL_RG_INTEGER                     = 0x8228;
const GL_R8                             = 0x8229;
const GL_R16                            = 0x822A;
const GL_RG8                            = 0x822B;
const GL_RG16                           = 0x822C;
const GL_R16F                           = 0x822D;
const GL_R32F                           = 0x822E;
const GL_RG16F                          = 0x822F;
const GL_RG32F                          = 0x8230;
const GL_R8I                            = 0x8231;
const GL_R8UI                           = 0x8232;
const GL_R16I                           = 0x8233;
const GL_R16UI                          = 0x8234;
const GL_R32I                           = 0x8235;
const GL_R32UI                          = 0x8236;
const GL_RG8I                           = 0x8237;
const GL_RG8UI                          = 0x8238;
const GL_RG16I                          = 0x8239;
const GL_RG16UI                         = 0x823A;
const GL_RG32I                          = 0x823B;
const GL_RG32UI                         = 0x823C;
const GL_VERTEX_ARRAY_BINDING           = 0x85B5;

/*=====END=====*/

/*=====Functions=====*/
fn void colorMaski (CUInt index, bool r, bool g, bool b, bool a) @extern("glColorMaski");
fn void getBooleani_v (GLenum target, CUInt index, bool *data) @extern("glGetBooleani_v");
fn void getIntegeri_v (GLenum target, CUInt index, CInt *data) @extern("glGetIntegeri_v");
fn void enablei (GLenum target, CUInt index) @extern("glEnablei");
fn void disablei (GLenum target, CUInt index) @extern("glDisablei");
fn bool isEnabledi (GLenum target, CUInt index) @extern("glIsEnabledi");
fn void beginTransformFeedback (GLenum primitiveMode) @extern("glBeginTransformFeedback");
fn void endTransformFeedback () @extern("glEndTransformFeedback");
fn void bindBufferRange (GLenum target, CUInt index, CUInt buffer, int* offset, isz* size) @extern("glBindBufferRange");
fn void bindBufferBase (GLenum target, CUInt index, CUInt buffer) @extern("glBindBufferBase");
fn void transformFeedbackVaryings (CUInt program, usz count, ZString* varyings, GLenum bufferMode) @extern("glTransformFeedbackVaryings");
fn void getTransformFeedbackVarying (CUInt program, CUInt index, usz bufSize, usz *length, usz *size, GLenum *type, char *name) @extern("glGetTransformFeedbackVarying");
fn void clampColor (GLenum target, GLenum clamp) @extern("glClampColor");
fn void beginConditionalRender (CUInt id, GLenum mode) @extern("glBeginConditionalRender");
fn void endConditionalRender () @extern("glEndConditionalRender");
fn void vertexAttribIPointer (CUInt index, CInt size, GLenum type, usz stride, void *pointer) @extern("glVertexAttribIPointer");
fn void getVertexAttribIiv (CUInt index, GLenum pname, CInt *params) @extern("glGetVertexAttribIiv");
fn void getVertexAttribIuiv (CUInt index, GLenum pname, CUInt *params) @extern("glGetVertexAttribIuiv");
fn void vertexAttribI1i (CUInt index, CInt x) @extern("glVertexAttribI1i");
fn void vertexAttribI2i (CUInt index, CInt x, CInt y) @extern("glVertexAttribI2i");
fn void vertexAttribI3i (CUInt index, CInt x, CInt y, CInt z) @extern("glVertexAttribI3i");
fn void vertexAttribI4i (CUInt index, CInt x, CInt y, CInt z, CInt w) @extern("glVertexAttribI4i");
fn void vertexAttribI1ui (CUInt index, CUInt x) @extern("glVertexAttribI1ui");
fn void vertexAttribI2ui (CUInt index, CUInt x, CUInt y) @extern("glVertexAttribI2ui");
fn void vertexAttribI3ui (CUInt index, CUInt x, CUInt y, CUInt z) @extern("glVertexAttribI3ui");
fn void vertexAttribI4ui (CUInt index, CUInt x, CUInt y, CUInt z, CUInt w) @extern("glVertexAttribI4ui");
fn void vertexAttribI1iv (CUInt index, CInt *v) @extern("glVertexAttribI1iv");
fn void vertexAttribI2iv (CUInt index, CInt *v) @extern("glVertexAttribI2iv");
fn void vertexAttribI3iv (CUInt index, CInt *v) @extern("glVertexAttribI3iv");
fn void vertexAttribI4iv (CUInt index, CInt *v) @extern("glVertexAttribI4iv");
fn void vertexAttribI1uiv (CUInt index, CUInt *v) @extern("glVertexAttribI1uiv");
fn void vertexAttribI2uiv (CUInt index, CUInt *v) @extern("glVertexAttribI2uiv");
fn void vertexAttribI3uiv (CUInt index, CUInt *v) @extern("glVertexAttribI3uiv");
fn void vertexAttribI4uiv (CUInt index, CUInt *v) @extern("glVertexAttribI4uiv");
fn void vertexAttribI4bv (CUInt index, ichar *v) @extern("glVertexAttribI4bv");
fn void vertexAttribI4sv (CUInt index, short *v) @extern("glVertexAttribI4sv");
fn void vertexAttribI4ubv (CUInt index, char *v) @extern("glVertexAttribI4ubv");
fn void vertexAttribI4usv (CUInt index, ushort *v) @extern("glVertexAttribI4usv");
fn void getUniformuiv (CUInt program, CInt location, CUInt *params) @extern("glGetUniformuiv");
fn void bindFragDataLocation (CUInt program, CUInt color, char *name) @extern("glBindFragDataLocation");
fn CInt getFragDataLocation (CUInt program, char *name) @extern("glGetFragDataLocation");
fn void uniform1ui (CInt location, CUInt v0) @extern("glUniform1ui");
fn void uniform2ui (CInt location, CUInt v0, CUInt v1) @extern("glUniform2ui");
fn void uniform3ui (CInt location, CUInt v0, CUInt v1, CUInt v2) @extern("glUniform3ui");
fn void uniform4ui (CInt location, CUInt v0, CUInt v1, CUInt v2, CUInt v3) @extern("glUniform4ui");
fn void uniform1uiv (CInt location, usz count, CUInt *value) @extern("glUniform1uiv");
fn void uniform2uiv (CInt location, usz count, CUInt *value) @extern("glUniform2uiv");
fn void uniform3uiv (CInt location, usz count, CUInt *value) @extern("glUniform3uiv");
fn void uniform4uiv (CInt location, usz count, CUInt *value) @extern("glUniform4uiv");
fn void texParameterIiv (GLenum target, GLenum pname, CInt *params) @extern("glTexParameterIiv");
fn void texParameterIuiv (GLenum target, GLenum pname, CUInt *params) @extern("glTexParameterIuiv");
fn void getTexParameterIiv (GLenum target, GLenum pname, CInt *params) @extern("glGetTexParameterIiv");
fn void getTexParameterIuiv (GLenum target, GLenum pname, CUInt *params) @extern("glGetTexParameterIuiv");
fn void clearBufferiv (GLenum buffer, CInt drawbuffer, CInt *value) @extern("glClearBufferiv");
fn void clearBufferuiv (GLenum buffer, CInt drawbuffer, CUInt *value) @extern("glClearBufferuiv");
fn void clearBufferfv (GLenum buffer, CInt drawbuffer, float *value) @extern("glClearBufferfv");
fn void clearBufferfi (GLenum buffer, CInt drawbuffer, float depth, CInt stencil) @extern("glClearBufferfi");
fn char* getStringi (GLenum name, CUInt index) @extern("glGetStringi");
fn bool isRenderbuffer (CUInt renderbuffer) @extern("glIsRenderbuffer");
fn void bindRenderbuffer (GLenum target, CUInt renderbuffer) @extern("glBindRenderbuffer");
fn void deleteRenderbuffers (usz n, CUInt *renderbuffers) @extern("glDeleteRenderbuffers");
fn void genRenderbuffers (usz n, CUInt *renderbuffers) @extern("glGenRenderbuffers");
fn void renderbufferStorage (GLenum target, GLenum internalformat, usz width, usz height) @extern("glRenderbufferStorage");
fn void getRenderbufferParameteriv (GLenum target, GLenum pname, CInt *params) @extern("glGetRenderbufferParameteriv");
fn bool isFramebuffer (CUInt framebuffer) @extern("glIsFramebuffer");
fn void bindFramebuffer (GLenum target, CUInt framebuffer) @extern("glBindFramebuffer");
fn void deleteFramebuffers (usz n, CUInt *framebuffers) @extern("glDeleteFramebuffers");
fn void genFramebuffers (usz n, CUInt *framebuffers) @extern("glGenFramebuffers");
fn GLenum checkFramebufferStatus (GLenum target) @extern("glCheckFramebufferStatus");
fn void framebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, CUInt texture, CInt level) @extern("glFramebufferTexture1D");
fn void framebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, CUInt texture, CInt level) @extern("glFramebufferTexture2D");
fn void framebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, CUInt texture, CInt level, CInt zoffset) @extern("glFramebufferTexture3D");
fn void framebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, CUInt renderbuffer) @extern("glFramebufferRenderbuffer");
fn void getFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, CInt *params) @extern("glGetFramebufferAttachmentParameteriv");
fn void generateMipmap (GLenum target) @extern("glGenerateMipmap");
fn void blitFramebuffer (CInt srcX0, CInt srcY0, CInt srcX1, CInt srcY1, CInt dstX0, CInt dstY0, CInt dstX1, CInt dstY1, GLbitfield mask, GLenum filter) @extern("glBlitFramebuffer");
fn void renderbufferStorageMultisample (GLenum target, usz samples, GLenum internalformat, usz width, usz height) @extern("glRenderbufferStorageMultisample");
fn void framebufferTextureLayer (GLenum target, GLenum attachment, CUInt texture, CInt level, CInt layer) @extern("glFramebufferTextureLayer");
fn void* mapBufferRange (GLenum target, int* offset, isz* length, GLbitfield access) @extern("glMapBufferRange");
fn void flushMappedBufferRange (GLenum target, int* offset, isz* length) @extern("glFlushMappedBufferRange");
fn void bindVertexArray (CUInt array) @extern("glBindVertexArray");
fn void deleteVertexArrays (usz n, CUInt *arrays) @extern("glDeleteVertexArrays");
fn void genVertexArrays (usz n, CUInt *arrays) @extern("glGenVertexArrays");
fn bool isVertexArray (CUInt array) @extern("glIsVertexArray");
/*=====END=====*/
