module opengl::gl20;
import opengl;


/*=====Constants=====*/

const GL_BLEND_EQUATION_RGB             = 0x8009;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED    = 0x8622;
const GL_VERTEX_ATTRIB_ARRAY_SIZE       = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE     = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_TYPE       = 0x8625;
const GL_CURRENT_VERTEX_ATTRIB          = 0x8626;
const GL_VERTEX_PROGRAM_POINT_SIZE      = 0x8642;
const GL_VERTEX_ATTRIB_ARRAY_POINTER    = 0x8645;
const GL_STENCIL_BACK_FUNC              = 0x8800;
const GL_STENCIL_BACK_FAIL              = 0x8801;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;
const GL_MAX_DRAW_BUFFERS               = 0x8824;
const GL_DRAW_BUFFER0                   = 0x8825;
const GL_DRAW_BUFFER1                   = 0x8826;
const GL_DRAW_BUFFER2                   = 0x8827;
const GL_DRAW_BUFFER3                   = 0x8828;
const GL_DRAW_BUFFER4                   = 0x8829;
const GL_DRAW_BUFFER5                   = 0x882A;
const GL_DRAW_BUFFER6                   = 0x882B;
const GL_DRAW_BUFFER7                   = 0x882C;
const GL_DRAW_BUFFER8                   = 0x882D;
const GL_DRAW_BUFFER9                   = 0x882E;
const GL_DRAW_BUFFER10                  = 0x882F;
const GL_DRAW_BUFFER11                  = 0x8830;
const GL_DRAW_BUFFER12                  = 0x8831;
const GL_DRAW_BUFFER13                  = 0x8832;
const GL_DRAW_BUFFER14                  = 0x8833;
const GL_DRAW_BUFFER15                  = 0x8834;
const GL_BLEND_EQUATION_ALPHA           = 0x883D;
const GL_MAX_VERTEX_ATTRIBS             = 0x8869;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GL_MAX_TEXTURE_IMAGE_UNITS        = 0x8872;
const GL_FRAGMENT_SHADER                = 0x8B30;
const GL_VERTEX_SHADER                  = 0x8B31;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS  = 0x8B4A;
const GL_MAX_VARYING_FLOATS             = 0x8B4B;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GL_SHADER_TYPE                    = 0x8B4F;
const GL_FLOAT_VEC2                     = 0x8B50;
const GL_FLOAT_VEC3                     = 0x8B51;
const GL_FLOAT_VEC4                     = 0x8B52;
const GL_INT_VEC2                       = 0x8B53;
const GL_INT_VEC3                       = 0x8B54;
const GL_INT_VEC4                       = 0x8B55;
const GL_BOOL                           = 0x8B56;
const GL_BOOL_VEC2                      = 0x8B57;
const GL_BOOL_VEC3                      = 0x8B58;
const GL_BOOL_VEC4                      = 0x8B59;
const GL_FLOAT_MAT2                     = 0x8B5A;
const GL_FLOAT_MAT3                     = 0x8B5B;
const GL_FLOAT_MAT4                     = 0x8B5C;
const GL_SAMPLER_1D                     = 0x8B5D;
const GL_SAMPLER_2D                     = 0x8B5E;
const GL_SAMPLER_3D                     = 0x8B5F;
const GL_SAMPLER_CUBE                   = 0x8B60;
const GL_SAMPLER_1D_SHADOW              = 0x8B61;
const GL_SAMPLER_2D_SHADOW              = 0x8B62;
const GL_DELETE_STATUS                  = 0x8B80;
const GL_COMPILE_STATUS                 = 0x8B81;
const GL_LINK_STATUS                    = 0x8B82;
const GL_VALIDATE_STATUS                = 0x8B83;
const GL_INFO_LOG_LENGTH                = 0x8B84;
const GL_ATTACHED_SHADERS               = 0x8B85;
const GL_ACTIVE_UNIFORMS                = 0x8B86;
const GL_ACTIVE_UNIFORM_MAX_LENGTH      = 0x8B87;
const GL_SHADER_SOURCE_LENGTH           = 0x8B88;
const GL_ACTIVE_ATTRIBUTES              = 0x8B89;
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    = 0x8B8A;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GL_SHADING_LANGUAGE_VERSION       = 0x8B8C;
const GL_CURRENT_PROGRAM                = 0x8B8D;
const GL_POINT_SPRITE_COORD_ORIGIN      = 0x8CA0;
const GL_LOWER_LEFT                     = 0x8CA1;
const GL_UPPER_LEFT                     = 0x8CA2;
const GL_STENCIL_BACK_REF               = 0x8CA3;
const GL_STENCIL_BACK_VALUE_MASK        = 0x8CA4;
const GL_STENCIL_BACK_WRITEMASK         = 0x8CA5;

/*=====END=====*/

/*=====Functions=====*/
fn void blendEquationSeparate (GLenum modeRGB, GLenum modeAlpha) @extern("glBlendEquationSeparate");
fn void drawBuffers (usz n, GLenum *bufs) @extern("glDrawBuffers");
fn void stencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) @extern("glStencilOpSeparate");
fn void stencilFuncSeparate (GLenum face, GLenum func, CInt ref, CUInt mask) @extern("glStencilFuncSeparate");
fn void stencilMaskSeparate (GLenum face, CUInt mask) @extern("glStencilMaskSeparate");
fn void attachShader (CUInt program, CUInt shader) @extern("glAttachShader");
fn void bindAttribLocation (CUInt program, CUInt index, char *name) @extern("glBindAttribLocation");
fn void compileShader (CUInt shader) @extern("glCompileShader");
fn CUInt createProgram () @extern("glCreateProgram");
fn CUInt createShader (GLenum type) @extern("glCreateShader");
fn void deleteProgram (CUInt program) @extern("glDeleteProgram");
fn void deleteShader (CUInt shader) @extern("glDeleteShader");
fn void detachShader (CUInt program, CUInt shader) @extern("glDetachShader");
fn void disableVertexAttribArray (CUInt index) @extern("glDisableVertexAttribArray");
fn void enableVertexAttribArray (CUInt index) @extern("glEnableVertexAttribArray");
fn void getActiveAttrib (CUInt program, CUInt index, usz bufSize, usz *length, CInt *size, GLenum *type, char *name) @extern("glGetActiveAttrib");
fn void getActiveUniform (CUInt program, CUInt index, usz bufSize, usz *length, CInt *size, GLenum *type, char *name) @extern("glGetActiveUniform");
fn void getAttachedShaders (CUInt program, usz maxCount, usz *count, CUInt *shaders) @extern("glGetAttachedShaders");
fn CInt getAttribLocation (CUInt program, char *name) @extern("glGetAttribLocation");
fn void getProgramiv (CUInt program, GLenum pname, CInt *params) @extern("glGetProgramiv");
fn void getProgramInfoLog (CUInt program, usz bufSize, usz *length, char *infoLog) @extern("glGetProgramInfoLog");
fn void getShaderiv (CUInt shader, GLenum pname, CInt *params) @extern("glGetShaderiv");
fn void getShaderInfoLog (CUInt shader, usz bufSize, usz *length, char *infoLog) @extern("glGetShaderInfoLog");
fn void getShaderSource (CUInt shader, usz bufSize, usz *length, char *source) @extern("glGetShaderSource");
fn CInt getUniformLocation (CUInt program, char *name) @extern("glGetUniformLocation");
fn void getUniformfv (CUInt program, CInt location, float *params) @extern("glGetUniformfv");
fn void getUniformiv (CUInt program, CInt location, CInt *params) @extern("glGetUniformiv");
fn void getVertexAttribdv (CUInt index, GLenum pname, double *params) @extern("glGetVertexAttribdv");
fn void getVertexAttribfv (CUInt index, GLenum pname, float *params) @extern("glGetVertexAttribfv");
fn void getVertexAttribiv (CUInt index, GLenum pname, CInt *params) @extern("glGetVertexAttribiv");
fn void getVertexAttribPointerv (CUInt index, GLenum pname, void **pointer) @extern("glGetVertexAttribPointerv");
fn bool isProgram (CUInt program) @extern("glIsProgram");
fn bool isShader (CUInt shader) @extern("glIsShader");
fn void linkProgram (CUInt program) @extern("glLinkProgram");
fn void shaderSource (CUInt shader, usz count, ZString string, CInt *length) @extern("glShaderSource");
fn void useProgram (CUInt program) @extern("glUseProgram");
fn void uniform1f (CInt location, float v0) @extern("glUniform1f");
fn void uniform2f (CInt location, float v0, float v1) @extern("glUniform2f");
fn void uniform3f (CInt location, float v0, float v1, float v2) @extern("glUniform3f");
fn void uniform4f (CInt location, float v0, float v1, float v2, float v3) @extern("glUniform4f");
fn void uniform1i (CInt location, CInt v0) @extern("glUniform1i");
fn void uniform2i (CInt location, CInt v0, CInt v1) @extern("glUniform2i");
fn void uniform3i (CInt location, CInt v0, CInt v1, CInt v2) @extern("glUniform3i");
fn void uniform4i (CInt location, CInt v0, CInt v1, CInt v2, CInt v3) @extern("glUniform4i");
fn void uniform1fv (CInt location, usz count, float *value) @extern("glUniform1fv");
fn void uniform2fv (CInt location, usz count, float *value) @extern("glUniform2fv");
fn void uniform3fv (CInt location, usz count, float *value) @extern("glUniform3fv");
fn void uniform4fv (CInt location, usz count, float *value) @extern("glUniform4fv");
fn void uniform1iv (CInt location, usz count, CInt *value) @extern("glUniform1iv");
fn void uniform2iv (CInt location, usz count, CInt *value) @extern("glUniform2iv");
fn void uniform3iv (CInt location, usz count, CInt *value) @extern("glUniform3iv");
fn void uniform4iv (CInt location, usz count, CInt *value) @extern("glUniform4iv");
fn void uniformMatrix2fv (CInt location, usz count, bool transpose, float *value) @extern("glUniformMatrix2fv");
fn void uniformMatrix3fv (CInt location, usz count, bool transpose, float *value) @extern("glUniformMatrix3fv");
fn void uniformMatrix4fv (CInt location, usz count, bool transpose, float *value) @extern("glUniformMatrix4fv");
fn void validateProgram (CUInt program) @extern("glValidateProgram");
fn void vertexAttrib1d (CUInt index, double x) @extern("glVertexAttrib1d");
fn void vertexAttrib1dv (CUInt index, double *v) @extern("glVertexAttrib1dv");
fn void vertexAttrib1f (CUInt index, float x) @extern("glVertexAttrib1f");
fn void vertexAttrib1fv (CUInt index, float *v) @extern("glVertexAttrib1fv");
fn void vertexAttrib1s (CUInt index, short x) @extern("glVertexAttrib1s");
fn void vertexAttrib1sv (CUInt index, short *v) @extern("glVertexAttrib1sv");
fn void vertexAttrib2d (CUInt index, double x, double y) @extern("glVertexAttrib2d");
fn void vertexAttrib2dv (CUInt index, double *v) @extern("glVertexAttrib2dv");
fn void vertexAttrib2f (CUInt index, float x, float y) @extern("glVertexAttrib2f");
fn void vertexAttrib2fv (CUInt index, float *v) @extern("glVertexAttrib2fv");
fn void vertexAttrib2s (CUInt index, short x, short y) @extern("glVertexAttrib2s");
fn void vertexAttrib2sv (CUInt index, short *v) @extern("glVertexAttrib2sv");
fn void vertexAttrib3d (CUInt index, double x, double y, double z) @extern("glVertexAttrib3d");
fn void vertexAttrib3dv (CUInt index, double *v) @extern("glVertexAttrib3dv");
fn void vertexAttrib3f (CUInt index, float x, float y, float z) @extern("glVertexAttrib3f");
fn void vertexAttrib3fv (CUInt index, float *v) @extern("glVertexAttrib3fv");
fn void vertexAttrib3s (CUInt index, short x, short y, short z) @extern("glVertexAttrib3s");
fn void vertexAttrib3sv (CUInt index, short *v) @extern("glVertexAttrib3sv");
fn void vertexAttrib4Nbv (CUInt index, ichar *v) @extern("glVertexAttrib4Nbv");
fn void vertexAttrib4Niv (CUInt index, CInt *v) @extern("glVertexAttrib4Niv");
fn void vertexAttrib4Nsv (CUInt index, short *v) @extern("glVertexAttrib4Nsv");
fn void vertexAttrib4Nub (CUInt index, char x, char y, char z, char w) @extern("glVertexAttrib4Nub");
fn void vertexAttrib4Nubv (CUInt index, char *v) @extern("glVertexAttrib4Nubv");
fn void vertexAttrib4Nuiv (CUInt index, CUInt *v) @extern("glVertexAttrib4Nuiv");
fn void vertexAttrib4Nusv (CUInt index, ushort *v) @extern("glVertexAttrib4Nusv");
fn void vertexAttrib4bv (CUInt index, ichar *v) @extern("glVertexAttrib4bv");
fn void vertexAttrib4d (CUInt index, double x, double y, double z, double w) @extern("glVertexAttrib4d");
fn void vertexAttrib4dv (CUInt index, double *v) @extern("glVertexAttrib4dv");
fn void vertexAttrib4f (CUInt index, float x, float y, float z, float w) @extern("glVertexAttrib4f");
fn void vertexAttrib4fv (CUInt index, float *v) @extern("glVertexAttrib4fv");
fn void vertexAttrib4iv (CUInt index, CInt *v) @extern("glVertexAttrib4iv");
fn void vertexAttrib4s (CUInt index, short x, short y, short z, short w) @extern("glVertexAttrib4s");
fn void vertexAttrib4sv (CUInt index, short *v) @extern("glVertexAttrib4sv");
fn void vertexAttrib4ubv (CUInt index, char *v) @extern("glVertexAttrib4ubv");
fn void vertexAttrib4uiv (CUInt index, CUInt *v) @extern("glVertexAttrib4uiv");
fn void vertexAttrib4usv (CUInt index, ushort *v) @extern("glVertexAttrib4usv");
fn void vertexAttribPointer (CUInt index, CInt size, GLenum type, bool normalized, usz stride, void *pointer) @extern("glVertexAttribPointer");

/*=====END=====*/
