module opengl::gl41;
import opengl;

/*=====Constants=====*/

const GL_FIXED                          = 0x140C;
const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GL_LOW_FLOAT                      = 0x8DF0;
const GL_MEDIUM_FLOAT                   = 0x8DF1;
const GL_HIGH_FLOAT                     = 0x8DF2;
const GL_LOW_INT                        = 0x8DF3;
const GL_MEDIUM_INT                     = 0x8DF4;
const GL_HIGH_INT                       = 0x8DF5;
const GL_SHADER_COMPILER                = 0x8DFA;
const GL_SHADER_BINARY_FORMATS          = 0x8DF8;
const GL_NUM_SHADER_BINARY_FORMATS      = 0x8DF9;
const GL_MAX_VERTEX_UNIFORM_VECTORS     = 0x8DFB;
const GL_MAX_VARYING_VECTORS            = 0x8DFC;
const GL_MAX_FRAGMENT_UNIFORM_VECTORS   = 0x8DFD;
const GL_RGB565                         = 0x8D62;
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GL_PROGRAM_BINARY_LENGTH          = 0x8741;
const GL_NUM_PROGRAM_BINARY_FORMATS     = 0x87FE;
const GL_PROGRAM_BINARY_FORMATS         = 0x87FF;
const GL_VERTEX_SHADER_BIT              = 0x00000001;
const GL_FRAGMENT_SHADER_BIT            = 0x00000002;
const GL_GEOMETRY_SHADER_BIT            = 0x00000004;
const GL_TESS_CONTROL_SHADER_BIT        = 0x00000008;
const GL_TESS_EVALUATION_SHADER_BIT     = 0x00000010;
const GL_ALL_SHADER_BITS                = 0xFFFFFFFF;
const GL_PROGRAM_SEPARABLE              = 0x8258;
const GL_ACTIVE_PROGRAM                 = 0x8259;
const GL_PROGRAM_PIPELINE_BINDING       = 0x825A;
const GL_MAX_VIEWPORTS                  = 0x825B;
const GL_VIEWPORT_SUBPIXEL_BITS         = 0x825C;
const GL_VIEWPORT_BOUNDS_RANGE          = 0x825D;
const GL_LAYER_PROVOKING_VERTEX         = 0x825E;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GL_UNDEFINED_VERTEX               = 0x8260;

/*=====END=====*/

/*=====Functions=====*/

fn void releaseShaderCompiler () @extern("glReleaseShaderCompiler");
fn void shaderBinary (usz count, CUInt *shaders, GLenum binaryFormat, void *binary, usz length) @extern("glShaderBinary");
fn void getShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, CInt *range, CInt *precision) @extern("glGetShaderPrecisionFormat");
fn void depthRangef (float n, float f) @extern("glDepthRangef");
fn void clearDepthf (float d) @extern("glClearDepthf");
fn void getProgramBinary (CUInt program, usz bufSize, usz *length, GLenum *binaryFormat, void *binary) @extern("glGetProgramBinary");
fn void programBinary (CUInt program, GLenum binaryFormat, void *binary, usz length) @extern("glProgramBinary");
fn void programParameteri (CUInt program, GLenum pname, CInt value) @extern("glProgramParameteri");
fn void useProgramStages (CUInt pipeline, GLbitfield stages, CUInt program) @extern("glUseProgramStages");
fn void activeShaderProgram (CUInt pipeline, CUInt program) @extern("glActiveShaderProgram");
fn CUInt createShaderProgramv (GLenum type, usz count, ZString* strings) @extern("glCreateShaderProgramv");
fn void bindProgramPipeline (CUInt pipeline) @extern("glBindProgramPipeline");
fn void deleteProgramPipelines (usz n, CUInt *pipelines) @extern("glDeleteProgramPipelines");
fn void genProgramPipelines (usz n, CUInt *pipelines) @extern("glGenProgramPipelines");
fn bool isProgramPipeline (CUInt pipeline) @extern("glIsProgramPipeline");
fn void getProgramPipelineiv (CUInt pipeline, GLenum pname, CInt *params) @extern("glGetProgramPipelineiv");
fn void programUniform1i (CUInt program, CInt location, CInt v0) @extern("glProgramUniform1i");
fn void programUniform1iv (CUInt program, CInt location, usz count, CInt *value) @extern("glProgramUniform1iv");
fn void programUniform1f (CUInt program, CInt location, float v0) @extern("glProgramUniform1f");
fn void programUniform1fv (CUInt program, CInt location, usz count, float *value) @extern("glProgramUniform1fv");
fn void programUniform1d (CUInt program, CInt location, double v0) @extern("glProgramUniform1d");
fn void programUniform1dv (CUInt program, CInt location, usz count, double *value) @extern("glProgramUniform1dv");
fn void programUniform1ui (CUInt program, CInt location, CUInt v0) @extern("glProgramUniform1ui");
fn void programUniform1uiv (CUInt program, CInt location, usz count, CUInt *value) @extern("glProgramUniform1uiv");
fn void programUniform2i (CUInt program, CInt location, CInt v0, CInt v1) @extern("glProgramUniform2i");
fn void programUniform2iv (CUInt program, CInt location, usz count, CInt *value) @extern("glProgramUniform2iv");
fn void programUniform2f (CUInt program, CInt location, float v0, float v1) @extern("glProgramUniform2f");
fn void programUniform2fv (CUInt program, CInt location, usz count, float *value) @extern("glProgramUniform2fv");
fn void programUniform2d (CUInt program, CInt location, double v0, double v1) @extern("glProgramUniform2d");
fn void programUniform2dv (CUInt program, CInt location, usz count, double *value) @extern("glProgramUniform2dv");
fn void programUniform2ui (CUInt program, CInt location, CUInt v0, CUInt v1) @extern("glProgramUniform2ui");
fn void programUniform2uiv (CUInt program, CInt location, usz count, CUInt *value) @extern("glProgramUniform2uiv");
fn void programUniform3i (CUInt program, CInt location, CInt v0, CInt v1, CInt v2) @extern("glProgramUniform3i");
fn void programUniform3iv (CUInt program, CInt location, usz count, CInt *value) @extern("glProgramUniform3iv");
fn void programUniform3f (CUInt program, CInt location, float v0, float v1, float v2) @extern("glProgramUniform3f");
fn void programUniform3fv (CUInt program, CInt location, usz count, float *value) @extern("glProgramUniform3fv");
fn void programUniform3d (CUInt program, CInt location, double v0, double v1, double v2) @extern("glProgramUniform3d");
fn void programUniform3dv (CUInt program, CInt location, usz count, double *value) @extern("glProgramUniform3dv");
fn void programUniform3ui (CUInt program, CInt location, CUInt v0, CUInt v1, CUInt v2) @extern("glProgramUniform3ui");
fn void programUniform3uiv (CUInt program, CInt location, usz count, CUInt *value) @extern("glProgramUniform3uiv");
fn void programUniform4i (CUInt program, CInt location, CInt v0, CInt v1, CInt v2, CInt v3) @extern("glProgramUniform4i");
fn void programUniform4iv (CUInt program, CInt location, usz count, CInt *value) @extern("glProgramUniform4iv");
fn void programUniform4f (CUInt program, CInt location, float v0, float v1, float v2, float v3) @extern("glProgramUniform4f");
fn void programUniform4fv (CUInt program, CInt location, usz count, float *value) @extern("glProgramUniform4fv");
fn void programUniform4d (CUInt program, CInt location, double v0, double v1, double v2, double v3) @extern("glProgramUniform4d");
fn void programUniform4dv (CUInt program, CInt location, usz count, double *value) @extern("glProgramUniform4dv");
fn void programUniform4ui (CUInt program, CInt location, CUInt v0, CUInt v1, CUInt v2, CUInt v3) @extern("glProgramUniform4ui");
fn void programUniform4uiv (CUInt program, CInt location, usz count, CUInt *value) @extern("glProgramUniform4uiv");
fn void programUniformMatrix2fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix2fv");
fn void programUniformMatrix3fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix3fv");
fn void programUniformMatrix4fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix4fv");
fn void programUniformMatrix2dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix2dv");
fn void programUniformMatrix3dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix3dv");
fn void programUniformMatrix4dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix4dv");
fn void programUniformMatrix2x3fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix2x3fv");
fn void programUniformMatrix3x2fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix3x2fv");
fn void programUniformMatrix2x4fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix2x4fv");
fn void programUniformMatrix4x2fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix4x2fv");
fn void programUniformMatrix3x4fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix3x4fv");
fn void programUniformMatrix4x3fv (CUInt program, CInt location, usz count, bool transpose, float *value) @extern("glProgramUniformMatrix4x3fv");
fn void programUniformMatrix2x3dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix2x3dv");
fn void programUniformMatrix3x2dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix3x2dv");
fn void programUniformMatrix2x4dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix2x4dv");
fn void programUniformMatrix4x2dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix4x2dv");
fn void programUniformMatrix3x4dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix3x4dv");
fn void programUniformMatrix4x3dv (CUInt program, CInt location, usz count, bool transpose, double *value) @extern("glProgramUniformMatrix4x3dv");
fn void validateProgramPipeline (CUInt pipeline) @extern("glValidateProgramPipeline");
fn void getProgramPipelineInfoLog (CUInt pipeline, usz bufSize, usz *length, char *infoLog) @extern("glGetProgramPipelineInfoLog");
fn void vertexAttribL1d (CUInt index, double x) @extern("glVertexAttribL1d");
fn void vertexAttribL2d (CUInt index, double x, double y) @extern("glVertexAttribL2d");
fn void vertexAttribL3d (CUInt index, double x, double y, double z) @extern("glVertexAttribL3d");
fn void vertexAttribL4d (CUInt index, double x, double y, double z, double w) @extern("glVertexAttribL4d");
fn void vertexAttribL1dv (CUInt index, double *v) @extern("glVertexAttribL1dv");
fn void vertexAttribL2dv (CUInt index, double *v) @extern("glVertexAttribL2dv");
fn void vertexAttribL3dv (CUInt index, double *v) @extern("glVertexAttribL3dv");
fn void vertexAttribL4dv (CUInt index, double *v) @extern("glVertexAttribL4dv");
fn void vertexAttribLPointer (CUInt index, CInt size, GLenum type, usz stride, void *pointer) @extern("glVertexAttribLPointer");
fn void getVertexAttribLdv (CUInt index, GLenum pname, double *params) @extern("glGetVertexAttribLdv");
fn void viewportArrayv (CUInt first, usz count, float *v) @extern("glViewportArrayv");
fn void viewportIndexedf (CUInt index, float x, float y, float w, float h) @extern("glViewportIndexedf");
fn void viewportIndexedfv (CUInt index, float *v) @extern("glViewportIndexedfv");
fn void scissorArrayv (CUInt first, usz count, CInt *v) @extern("glScissorArrayv");
fn void scissorIndexed (CUInt index, CInt left, CInt bottom, usz width, usz height) @extern("glScissorIndexed");
fn void scissorIndexedv (CUInt index, CInt *v) @extern("glScissorIndexedv");
fn void depthRangeArrayv (CUInt first, usz count, double *v) @extern("glDepthRangeArrayv");
fn void depthRangeIndexed (CUInt index, double n, double f) @extern("glDepthRangeIndexed");
fn void getFloati_v (GLenum target, CUInt index, float *data) @extern("glGetFloati_v");
fn void getDoublei_v (GLenum target, CUInt index, double *data) @extern("glGetDoublei_v");

/*=====END=====*/
