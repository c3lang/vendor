module opengl::internal @local;
const GL_MAX_VERSION = 45;
macro int gl_version() @public
{
    $if $defined(GL_VERSION):
        return opengl::GL_VERSION;
    $else
        return GL_MAX_VERSION;
    $endif
}



module opengl::gl;

/* Global type definitions */
distinct GLenum = uint;
distinct GLbitfield = uint;
distinct GLclampx = int;
distinct GLclampf = float;
distinct GLclampd = double;
distinct GLsync = uptr;
distinct GLeglClientBufferEXT = void*;
distinct GLeglImageOES = void*;

def GLbyte = ichar;
def GLubyte = char;
def GLshort = short;
def GLushort = ushort;
def GLint = int;
def GLuint = uint;
def GLfloat = float;
def GLdouble = double;
def GLchar = char;
def GLcharARB = char;
def GLboolean = char;
def GLhalf = ushort;
def GLhalfARB = ushort;
def GLfixed = int;
def GLintptr = iptr;
def GLintptrARB = iptr;
def GLsizeiptr = isz;
def GLsizeiptrARB = isz;
def GLint64 = long;
def GLint64EXT = long;
def GLuint64 = long;
def GLuint64EXT = long;
def GLsizei = int;
def GLhalfNV = ushort;
def GLvdpauSurfaceNV = GLintptr;
def GLhandleARB = void*;

def Ext_cl_context = void*;
def Ext_cl_event = void*;

def Ext_GLDEBUGPROC = fn void(GLenum source,GLenum type,CUInt id,GLenum severity,usz length,ZString message, void *userParam);
def Ext_GLDEBUGPROCARB = fn void(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,GLchar *message,void *userParam);
def Ext_GLDEBUGPROCKHR = fn void(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,GLchar *message,void *userParam);
def Ext_GLDEBUGPROCAMD = fn void(GLuint id,GLenum category,GLenum severity,GLsizei length,GLchar *message,void *userParam);
def Ext_GLVULKANPROCNV = fn void();


/* Internal loading */
def GLLoadFn = fn void*(char*);

module opengl;
import opengl::internal;
import opengl::gl;
macro loadGL(GLLoadFn load) {
    return gl::load_gl_internal(load);
}



