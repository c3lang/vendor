// sqlite3.c3i
// Binding originally created by Louis @ https://github.com/louis77

module sqlite3;

enum SqliteResult : const int
{

	OK         =  0,   /* Successful result */
	ERROR      =  1,   /* Generic error */
	INTERNAL   =  2,   /* Internal logic error in SQLite */
	PERM       =  3,   /* Access permission denied */
	ABORT      =  4,   /* Callback routine requested an abort */
	BUSY       =  5,   /* The database file is locked */
	LOCKED     =  6,   /* A table in the database is locked */
	NOMEM      =  7,   /* A malloc() failed */
	READONLY   =  8,   /* Attempt to write a readonly database */
	INTERRUPT  =  9,   /* Operation terminated by interrupt()*/
	IOERR      = 10,   /* Some kind of disk I/O error occurred */
	CORRUPT    = 11,   /* The database disk image is malformed */
	NOTFOUND   = 12,   /* Unknown opcode in file_control() */
	FULL       = 13,   /* Insertion failed because database is full */
	CANTOPEN   = 14,   /* Unable to open the database file */
	PROTOCOL   = 15,   /* Database lock protocol error */
	EMPTY      = 16,   /* Internal use only */
	SCHEMA     = 17,   /* The database schema changed */
	TOOBIG     = 18,   /* String or BLOB exceeds size limit */
	CONSTRAINT = 19,   /* Abort due to constraint violation */
	MISMATCH   = 20,   /* Data type mismatch */
	MISUSE     = 21,   /* Library used incorrectly */
	NOLFS      = 22,   /* Uses OS features not supported on host */
	AUTH       = 23,   /* Authorization denied */
	FORMAT     = 24,   /* Not used */
	RANGE      = 25,   /* 2nd parameter to bind out of range */
	NOTADB     = 26,   /* File opened that is not a database file */
	NOTICE     = 27,   /* Notifications from log() */
	WARNING    = 28,   /* Warnings from log() */
	ROW        = 100,  /* step() has another row ready */
	DONE       = 101,  /* step() has finished executing */
}

enum SqliteColumnType : const int
{
	INTEGER  = 1,
	FLOAT    = 2,
	BLOB     = 4,
	NULL     = 5,
	TEXT     = 3,
}


alias SqliteHandle = void*;
alias SqliteStmt = void*;
alias SqliteExecCallback = fn SqliteResult (void* context, CInt num_columns, ZString* result, ZString* col_names);

extern fn SqliteResult open(ZString filename, SqliteHandle* ppDb) @cname("sqlite3_open");

extern fn SqliteResult close(SqliteHandle handle) @cname("sqlite3_close");

extern fn SqliteResult exec(SqliteHandle handle,
	ZString sql,
	SqliteExecCallback callback,
	void* arg,
	ZString* errmsg
) @cname("sqlite3_exec");

extern fn SqliteResult prepare_v2(
	SqliteHandle handle,
	ZString zSql,
	CInt nByte,
	SqliteStmt* ppStmt,
	ZString* pzTail
) @cname("sqlite3_prepare_v2");

extern fn SqliteResult step(SqliteStmt stmt) @cname("sqlite3_step");
extern fn SqliteResult finalize(SqliteStmt pStmt) @cname("sqlite3_finalize");
extern fn CLong changes64(SqliteHandle handle) @cname("sqlite3_changes64");
extern fn CInt column_count(SqliteStmt pStmt) @cname("sqlite3_column_count");

extern fn void* column_blob(SqliteStmt stmt, int iCol) @cname("sqlite3_column_blob");
extern fn double column_double(SqliteStmt stmt, int iCol) @cname("sqlite3_column_double");
extern fn CInt column_int(SqliteStmt stmt, int iCol) @cname("sqlite3_column_int");
extern fn CLong column_int64(SqliteStmt stmt, int iCol) @cname("sqlite3_column_int64");
extern fn ZString column_text(SqliteStmt stmt, int iCol) @cname("sqlite3_column_text");
extern fn void* column_text16(SqliteStmt stmt, int iCol) @cname("sqlite3_column_text16");
extern fn void* column_value(SqliteStmt stmt, int iCol) @cname("sqlite3_column_value");
extern fn CInt column_bytes(SqliteStmt stmt, int iCol) @cname("sqlite3_column_bytes");
extern fn CInt column_bytes16(SqliteStmt stmt, int iCol) @cname("sqlite3_column_bytes16");
extern fn SqliteColumnType column_type(SqliteStmt stmt, int iCol) @cname("sqlite3_column_type");

extern fn SqliteResult bind_blob(SqliteStmt stmt, CInt, void*, CInt n, void*) @cname("sqlite3_bind_blob");
extern fn SqliteResult bind_blob64(SqliteStmt stmt, CInt, void*, CULong, void*) @cname("sqlite3_bind_blob64");
extern fn SqliteResult bind_double(SqliteStmt stmt, CInt, double) @cname("sqlite3_bind_double");
extern fn SqliteResult bind_int(SqliteStmt stmt, CInt, CInt) @cname("sqlite3_bind_int");
extern fn SqliteResult bind_int64(SqliteStmt stmt, CInt, CLong) @cname("sqlite3_bind_int64");
extern fn SqliteResult bind_null(SqliteStmt stmt, CInt) @cname("sqlite3_bind_null");
extern fn SqliteResult bind_text(SqliteStmt stmt, CInt, ZString, CInt, void*) @cname("sqlite3_bind_text");
extern fn SqliteResult bind_text16(SqliteStmt stmt, CInt, void*, CInt, void*) @cname("sqlite3_bind_text16");
extern fn SqliteResult bind_value(SqliteStmt stmt, CInt, void*) @cname("sqlite3_bind_value");
extern fn SqliteResult bind_pointer(SqliteStmt stmt, CInt, void*, ZString, void*) @cname("sqlite3_bind_pointer");
extern fn SqliteResult bind_zeroblob(SqliteStmt stmt, CInt, CInt n) @cname("sqlite3_bind_zeroblob");
extern fn SqliteResult bind_zeroblob64(SqliteStmt stmt, CInt, CULong) @cname("sqlite3_bind_zeroblob64");

extern fn ZString errmsg(SqliteHandle handle) @cname("sqlite3_errmsg");