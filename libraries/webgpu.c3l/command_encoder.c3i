module webgpu;

typedef CommandEncoder = void*;

fn ComputePassEncoder CommandEncoder.beginComputePass(CommandEncoder encoder,
    ComputePassDescriptor* descriptor) @cname("wgpuCommandEncoderBeginComputePass");

fn RenderPassEncoder CommandEncoder.beginRenderPass(CommandEncoder encoder,
    RenderPassDescriptor* descriptor) @cname("wgpuCommandEncoderBeginRenderPass");

fn void CommandEncoder.clearBuffer(CommandEncoder encoder,
    Buffer buffer, CULong offset, CULong size) @cname("wgpuCommandEncoderClearBuffer");

fn void CommandEncoder.copyBufferToBuffer(CommandEncoder encoder,
    Buffer source, CULong sourceOffset, Buffer destination, CULong destinationOffset, CULong size)
    @cname("wgpuCommandEncoderCopyBufferToBuffer");

fn void CommandEncoder.copyBufferToTexture(CommandEncoder encoder,
    ImageCopyBuffer* source, ImageCopyTexture* destination, Extent3D size)
    @cname("wgpuCommandEncoderCopyBufferToTexture");

fn void CommandEncoder.copyTextureToBuffer(CommandEncoder encoder,
    ImageCopyTexture* source, ImageCopyBuffer* destination, Extent3D size)
    @cname("wgpuCommandEncoderCopyTextureToBuffer");

fn void CommandEncoder.copyTextureToTexture(CommandEncoder encoder,
    ImageCopyTexture* source, ImageCopyTexture* destination, Extent3D size)
    @cname("wgpuCommandEncoderCopyTextureToTexture");

fn CommandBuffer CommandEncoder.finish(CommandEncoder encoder,
    CommandBufferDescriptor* descriptor = null) @cname("wgpuCommandEncoderFinish");

fn void CommandEncoder.insertDebugMarker(CommandEncoder encoder,
    ZString label) @cname("wgpuCommandEncoderInsertDebugMarker");

fn void CommandEncoder.popDebugGroup(CommandEncoder encoder)
    @cname("wgpuCommandEncoderPopDebugGroup");

fn void CommandEncoder.pushDebugGroup(CommandEncoder encoder, ZString label)
    @cname("wgpuCommandEncoderPushDebugGroup");

fn void CommandEncoder.resolveQuerySet(CommandEncoder encoder,
    QuerySet querySet, CUInt first, CUInt count, Buffer destination, usz offset)
    @cname("wgpuCommandEncoderResolveQuerySet");

fn void CommandEncoder.setLabel(CommandEncoder encoder, ZString label)
    @cname("wgpuCommandEncoderSetLabel");

fn void CommandEncoder.writeTimestamp(CommandEncoder encoder, QuerySet querySet, CUInt index)
    @cname("wgpuCommandEncoderWriteTimestamp");

fn void CommandEncoder.reference(CommandEncoder encoder) @cname("wgpuCommandEncoderReference");

fn void CommandEncoder.release(CommandEncoder encoder) @cname("wgpuCommandEncoderRelease");


struct CommandEncoderDescriptor {
    ChainedStruct* next;
    ZString label;
}
