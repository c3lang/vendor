module webgpu;

typedef Queue = void*;

alias BufferData = void*;

fn void Queue.onSubmittedWorkDone(Queue queue, SubmittedWorkDoneCallback callback,
    UserData data) @extern("wgpuQueueOnSubmittedWorkDone");

fn void Queue.setLabel(Queue queue, ZString label) @extern("wgpuQueueSetLabel");

fn void Queue.submit(Queue queue, usz count, CommandBuffer* commands) @extern("wgpuQueueSubmit");

fn void Queue.writeBuffer(Queue queue, Buffer buffer, CULong bufferOffset, BufferData data, usz dataSize) @extern("wgpuQueueWriteBuffer");

fn void Queue.writeTexture(Queue queue, ImageCopyTexture* destination, BufferData data, usz dataSize,
    TextureDataLayout* layout, Extent3D* writeSize) @extern("wgpuQueueWriteTexture");

fn void Queue.reference(Queue queue) @extern("wgpuQueueReference");

fn void Queue.release(Queue queue) @extern("wgpuQueueRelease");


alias SubmittedWorkDoneCallback = fn void(QueueWorkDoneStatus status, UserData data);

struct QueueDescriptor {
    ChainedStruct* next;
    ZString label;
}


enum QueueWorkDoneStatus {
    SUCCESS,
    ERROR,
    UNKNOWN,
    DEVICE_LOST
}

