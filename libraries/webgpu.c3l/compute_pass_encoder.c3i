module webgpu;

typedef ComputePassEncoder = void*;

fn void ComputePassEncoder.dispatchWorkgroups(ComputePassEncoder encoder,
    CUInt countX, CUInt countY, CUInt countZ) @cname("wgpuComputePassEncoderDispatchWorkgroups");

fn void ComputePassEncoder.dispatchWorkgroupsIndirect(ComputePassEncoder encoder,
    Buffer buffer, CULong offset) @cname("wgpuComputePassEncoderDispatchWorkgroupsIndirect");

fn void ComputePassEncoder.end(ComputePassEncoder encoder) @cname("wgpuComputePassEncoderEnd");

fn void ComputePassEncoder.insertDebugMarker(ComputePassEncoder encoder,
    ZString label) @cname("wgpuComputePassEncoderInsertDebugMarker");

fn void ComputePassEncoder.popDebugGroup(ComputePassEncoder encoder)
    @cname("wgpuComputePassEncoderPopDebugGroup");

fn void ComputePassEncoder.pushDebugGroup(ComputePassEncoder encoder, ZString label)
    @cname("wgpuComputePassEncoderPushDebugGroup");

fn void ComputePassEncoder.setBindGroup(ComputePassEncoder encoder, CUInt groupIndex)
    @cname("wgpuComputePassEncoderSetBindGroup");

fn void ComputePassEncoder.setLabel(ComputePassEncoder encoder, ZString label)
    @cname("wgpuComputePassEncoderSetLabel");

fn void ComputePassEncoder.setPipeline(ComputePassEncoder encoder, ComputePipeline pipeline)
    @cname("wgpuComputePassEncoderSetPipeline");

fn void ComputePassEncoder.reference(ComputePassEncoder encoder) @cname("wgpuComputePassEncoderReference");

fn void ComputePassEncoder.release(ComputePassEncoder encoder) @cname("wgpuComputePassEncoderRelease");


struct ComputePassTimestampWrites {
    QuerySet querySet;
    CUInt beginningOfPassWriteIndex;
    CUInt endOfPassWriteIndex;
}

struct ComputePassDescriptor {
    ChainedStruct* next;
    ZString label;
    ComputePassTimestampWrites* timestampWrites;
}