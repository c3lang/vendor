module webgpu;

typedef Instance = void*;

fn Surface Instance.createSurface(Instance instance,
    SurfaceDescriptor* descriptor) @cname("wgpuInstanceCreateSurface");

fn Instance createInstance(InstanceDescriptor* descriptor = null) @cname("wgpuCreateInstance");

fn void Instance.hasWGSLLanguageFeature(Instance instance, WgslFeatureName feature) @cname("wgpuInstanceHasWGSLLanguageFeature");

fn void Instance.processEvents(Instance instance) @cname("wgpuInstanceProcessEvents");

fn void Instance.requestAdapterAsync(Instance instance, RequestAdapterOptions* options,
    RequestAdapterCallback callback, UserData data) @cname("wgpuInstanceRequestAdapter");

fn void Instance.reference(Instance instance) @cname("wgpuInstanceReference");

fn void Instance.release(Instance instance) @cname("wgpuInstanceRelease");


alias RequestAdapterCallback = fn void(RequestAdapterStatus status,
    Adapter adapter, ZString message, UserData result);


struct InstanceDescriptor {
    ChainedStruct* next;
}


enum RequestAdapterStatus {
    SUCCESS,
    UNAVAILABLE,
    ERROR,
    UNKNOWN
}

enum WgslFeatureName {
    UNDEFINED,
    READONLY_AND_READWRITE_STORAGE_TEXTURES,
    PACKED_4X8_INTEGER_DOT_PRODUCT,
    UNRESTRICTED_POINTER_PARAMETERS,
    POINTER_COMPOSITE_ACCESS
}
