module opengl::gl;
import opengl;
const GL_CURRENT_BIT = 0x00000001;
const GL_POINT_BIT = 0x00000002;
const GL_LINE_BIT = 0x00000004;
const GL_POLYGON_BIT = 0x00000008;
const GL_POLYGON_STIPPLE_BIT = 0x00000010;
const GL_PIXEL_MODE_BIT = 0x00000020;
const GL_LIGHTING_BIT = 0x00000040;
const GL_FOG_BIT = 0x00000080;
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_ACCUM_BUFFER_BIT = 0x00000200;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_VIEWPORT_BIT = 0x00000800;
const GL_TRANSFORM_BIT = 0x00001000;
const GL_ENABLE_BIT = 0x00002000;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_HINT_BIT = 0x00008000;
const GL_EVAL_BIT = 0x00010000;
const GL_LIST_BIT = 0x00020000;
const GL_TEXTURE_BIT = 0x00040000;
const GL_SCISSOR_BIT = 0x00080000;
const GL_MULTISAMPLE_BIT = 0x20000000;
const GL_MULTISAMPLE_BIT_ARB = 0x20000000;
const GL_MULTISAMPLE_BIT_EXT = 0x20000000;
const GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
const GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_DYNAMIC_STORAGE_BIT = 0x0100;
const GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100;
const GL_CLIENT_STORAGE_BIT = 0x0200;
const GL_CLIENT_STORAGE_BIT_EXT = 0x0200;
const GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
const GL_PER_GPU_STORAGE_BIT_NV = 0x0800;
const GL_EXTERNAL_STORAGE_BIT_NVX = 0x2000;
const GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
const GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
const GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
const GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010;
const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const GL_MAP_READ_BIT = 0x0001;
const GL_MAP_READ_BIT_EXT = 0x0001;
const GL_MAP_WRITE_BIT = 0x0002;
const GL_MAP_WRITE_BIT_EXT = 0x0002;
const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004;
const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008;
const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010;
const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020;
const GL_MAP_PERSISTENT_BIT = 0x0040;
const GL_MAP_PERSISTENT_BIT_EXT = 0x0040;
const GL_MAP_COHERENT_BIT = 0x0080;
const GL_MAP_COHERENT_BIT_EXT = 0x0080;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
const GL_UNIFORM_BARRIER_BIT = 0x00000004;
const GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
const GL_COMMAND_BARRIER_BIT = 0x00000040;
const GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000;
const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
const GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001;
const GL_VERTEX_SHADER_BIT = 0x00000001;
const GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
const GL_FRAGMENT_SHADER_BIT = 0x00000002;
const GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
const GL_GEOMETRY_SHADER_BIT = 0x00000004;
const GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004;
const GL_GEOMETRY_SHADER_BIT_OES = 0x00000004;
const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008;
const GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008;
const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010;
const GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010;
const GL_COMPUTE_SHADER_BIT = 0x00000020;
const GL_MESH_SHADER_BIT_NV = 0x00000040;
const GL_TASK_SHADER_BIT_NV = 0x00000080;
const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
const GL_RED_BIT_ATI = 0x00000001;
const GL_GREEN_BIT_ATI = 0x00000002;
const GL_BLUE_BIT_ATI = 0x00000004;
const GL_2X_BIT_ATI = 0x00000001;
const GL_4X_BIT_ATI = 0x00000002;
const GL_8X_BIT_ATI = 0x00000004;
const GL_HALF_BIT_ATI = 0x00000008;
const GL_QUARTER_BIT_ATI = 0x00000010;
const GL_EIGHTH_BIT_ATI = 0x00000020;
const GL_SATURATE_BIT_ATI = 0x00000040;
const GL_COMP_BIT_ATI = 0x00000002;
const GL_NEGATE_BIT_ATI = 0x00000004;
const GL_BIAS_BIT_ATI = 0x00000008;
const GL_TRACE_OPERATIONS_BIT_MESA = 0x0001;
const GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002;
const GL_TRACE_ARRAYS_BIT_MESA = 0x0004;
const GL_TRACE_TEXTURES_BIT_MESA = 0x0008;
const GL_TRACE_PIXELS_BIT_MESA = 0x0010;
const GL_TRACE_ERRORS_BIT_MESA = 0x0020;
const GL_TRACE_ALL_BITS_MESA = 0xFFFF;
const GL_BOLD_BIT_NV = 0x01;
const GL_ITALIC_BIT_NV = 0x02;
const GL_GLYPH_WIDTH_BIT_NV = 0x01;
const GL_GLYPH_HEIGHT_BIT_NV = 0x02;
const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
const GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
const GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
const GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
const GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
const GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
const GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
const GL_FONT_ASCENDER_BIT_NV = 0x00200000;
const GL_FONT_DESCENDER_BIT_NV = 0x00400000;
const GL_FONT_HEIGHT_BIT_NV = 0x00800000;
const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
const GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
const GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
const GL_VERTEX23_BIT_PGI = 0x00000004;
const GL_VERTEX4_BIT_PGI = 0x00000008;
const GL_COLOR3_BIT_PGI = 0x00010000;
const GL_COLOR4_BIT_PGI = 0x00020000;
const GL_EDGEFLAG_BIT_PGI = 0x00040000;
const GL_INDEX_BIT_PGI = 0x00080000;
const GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
const GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
const GL_MAT_EMISSION_BIT_PGI = 0x00800000;
const GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
const GL_MAT_SHININESS_BIT_PGI = 0x02000000;
const GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
const GL_NORMAL_BIT_PGI = 0x08000000;
const GL_TEXCOORD1_BIT_PGI = 0x10000000;
const GL_TEXCOORD2_BIT_PGI = 0x20000000;
const GL_TEXCOORD3_BIT_PGI = 0x40000000;
const GL_TEXCOORD4_BIT_PGI = 0x80000000;
const GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
const GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
const GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
const GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
const GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
const GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
const GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
const GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
const GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
const GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
const GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
const GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
const GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
const GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
const GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
const GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
const GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
const GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
const GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
const GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
const GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
const GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
const GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
const GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;
const GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001;
const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002;
const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004;
const GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
const GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
const GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
const GL_NOP_COMMAND_NV = 0x0001;
const GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
const GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
const GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
const GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
const GL_BLEND_COLOR_COMMAND_NV = 0x000B;
const GL_STENCIL_REF_COMMAND_NV = 0x000C;
const GL_LINE_WIDTH_COMMAND_NV = 0x000D;
const GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
const GL_ALPHA_REF_COMMAND_NV = 0x000F;
const GL_VIEWPORT_COMMAND_NV = 0x0010;
const GL_SCISSOR_COMMAND_NV = 0x0011;
const GL_FRONT_FACE_COMMAND_NV = 0x0012;
const GL_LAYOUT_DEFAULT_INTEL = 0;
const GL_LAYOUT_LINEAR_INTEL = 1;
const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
const GL_CLOSE_PATH_NV = 0x00;
const GL_MOVE_TO_NV = 0x02;
const GL_RELATIVE_MOVE_TO_NV = 0x03;
const GL_LINE_TO_NV = 0x04;
const GL_RELATIVE_LINE_TO_NV = 0x05;
const GL_HORIZONTAL_LINE_TO_NV = 0x06;
const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
const GL_VERTICAL_LINE_TO_NV = 0x08;
const GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
const GL_QUADRATIC_CURVE_TO_NV = 0x0A;
const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
const GL_CUBIC_CURVE_TO_NV = 0x0C;
const GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
const GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
const GL_SMALL_CCW_ARC_TO_NV = 0x12;
const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
const GL_SMALL_CW_ARC_TO_NV = 0x14;
const GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
const GL_LARGE_CCW_ARC_TO_NV = 0x16;
const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
const GL_LARGE_CW_ARC_TO_NV = 0x18;
const GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
const GL_CONIC_CURVE_TO_NV = 0x1A;
const GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
const GL_SHARED_EDGE_NV = 0xC0;
const GL_ROUNDED_RECT_NV = 0xE8;
const GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
const GL_ROUNDED_RECT2_NV = 0xEA;
const GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
const GL_ROUNDED_RECT4_NV = 0xEC;
const GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
const GL_ROUNDED_RECT8_NV = 0xEE;
const GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
const GL_RESTART_PATH_NV = 0xF0;
const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
const GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
const GL_RECT_NV = 0xF6;
const GL_RELATIVE_RECT_NV = 0xF7;
const GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
const GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
const GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
const GL_ARC_TO_NV = 0xFE;
const GL_RELATIVE_ARC_TO_NV = 0xFF;
const GL_NEXT_BUFFER_NV = -2;
const GL_SKIP_COMPONENTS4_NV = -3;
const GL_SKIP_COMPONENTS3_NV = -4;
const GL_SKIP_COMPONENTS2_NV = -5;
const GL_SKIP_COMPONENTS1_NV = -6;
const GL_RESTART_SUN = 0x0001;
const GL_REPLACE_MIDDLE_SUN = 0x0002;
const GL_REPLACE_OLDEST_SUN = 0x0003;
const GL_FALSE = 0;
const GL_NO_ERROR = 0;
const GL_ZERO = 0;
const GL_NONE = 0;
const GL_NONE_OES = 0;
const GL_TRUE = 1;
const GL_ONE = 1;
const GL_INVALID_INDEX = 0xFFFFFFFF;
const GL_ALL_PIXELS_AMD = 0xFFFFFFFF;
const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
const GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
const GL_VERSION_ES_CL_1_0 = 1;
const GL_VERSION_ES_CM_1_1 = 1;
const GL_VERSION_ES_CL_1_1 = 1;
const GL_UUID_SIZE_EXT = 16;
const GL_LUID_SIZE_EXT = 8;
const GL_POINTS = 0x0000;
const GL_LINES = 0x0001;
const GL_LINE_LOOP = 0x0002;
const GL_LINE_STRIP = 0x0003;
const GL_TRIANGLES = 0x0004;
const GL_TRIANGLE_STRIP = 0x0005;
const GL_TRIANGLE_FAN = 0x0006;
const GL_QUADS = 0x0007;
const GL_QUADS_EXT = 0x0007;
const GL_QUADS_OES = 0x0007;
const GL_QUAD_STRIP = 0x0008;
const GL_POLYGON = 0x0009;
const GL_LINES_ADJACENCY = 0x000A;
const GL_LINES_ADJACENCY_ARB = 0x000A;
const GL_LINES_ADJACENCY_EXT = 0x000A;
const GL_LINES_ADJACENCY_OES = 0x000A;
const GL_LINE_STRIP_ADJACENCY = 0x000B;
const GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
const GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
const GL_LINE_STRIP_ADJACENCY_OES = 0x000B;
const GL_TRIANGLES_ADJACENCY = 0x000C;
const GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
const GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
const GL_TRIANGLES_ADJACENCY_OES = 0x000C;
const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
const GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
const GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x000D;
const GL_PATCHES = 0x000E;
const GL_PATCHES_EXT = 0x000E;
const GL_PATCHES_OES = 0x000E;
const GL_ACCUM = 0x0100;
const GL_LOAD = 0x0101;
const GL_RETURN = 0x0102;
const GL_MULT = 0x0103;
const GL_ADD = 0x0104;
const GL_NEVER = 0x0200;
const GL_LESS = 0x0201;
const GL_EQUAL = 0x0202;
const GL_LEQUAL = 0x0203;
const GL_GREATER = 0x0204;
const GL_NOTEQUAL = 0x0205;
const GL_GEQUAL = 0x0206;
const GL_ALWAYS = 0x0207;
const GL_SRC_COLOR = 0x0300;
const GL_ONE_MINUS_SRC_COLOR = 0x0301;
const GL_SRC_ALPHA = 0x0302;
const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const GL_DST_ALPHA = 0x0304;
const GL_ONE_MINUS_DST_ALPHA = 0x0305;
const GL_DST_COLOR = 0x0306;
const GL_ONE_MINUS_DST_COLOR = 0x0307;
const GL_SRC_ALPHA_SATURATE = 0x0308;
const GL_SRC_ALPHA_SATURATE_EXT = 0x0308;
const GL_FRONT_LEFT = 0x0400;
const GL_FRONT_RIGHT = 0x0401;
const GL_BACK_LEFT = 0x0402;
const GL_BACK_RIGHT = 0x0403;
const GL_FRONT = 0x0404;
const GL_BACK = 0x0405;
const GL_LEFT = 0x0406;
const GL_RIGHT = 0x0407;
const GL_FRONT_AND_BACK = 0x0408;
const GL_AUX0 = 0x0409;
const GL_AUX1 = 0x040A;
const GL_AUX2 = 0x040B;
const GL_AUX3 = 0x040C;
const GL_INVALID_ENUM = 0x0500;
const GL_INVALID_VALUE = 0x0501;
const GL_INVALID_OPERATION = 0x0502;
const GL_STACK_OVERFLOW = 0x0503;
const GL_STACK_OVERFLOW_KHR = 0x0503;
const GL_STACK_UNDERFLOW = 0x0504;
const GL_STACK_UNDERFLOW_KHR = 0x0504;
const GL_OUT_OF_MEMORY = 0x0505;
const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
const GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506;
const GL_CONTEXT_LOST = 0x0507;
const GL_CONTEXT_LOST_KHR = 0x0507;
const GL_2D = 0x0600;
const GL_3D = 0x0601;
const GL_3D_COLOR = 0x0602;
const GL_3D_COLOR_TEXTURE = 0x0603;
const GL_4D_COLOR_TEXTURE = 0x0604;
const GL_PASS_THROUGH_TOKEN = 0x0700;
const GL_POINT_TOKEN = 0x0701;
const GL_LINE_TOKEN = 0x0702;
const GL_POLYGON_TOKEN = 0x0703;
const GL_BITMAP_TOKEN = 0x0704;
const GL_DRAW_PIXEL_TOKEN = 0x0705;
const GL_COPY_PIXEL_TOKEN = 0x0706;
const GL_LINE_RESET_TOKEN = 0x0707;
const GL_EXP = 0x0800;
const GL_EXP2 = 0x0801;
const GL_CW = 0x0900;
const GL_CCW = 0x0901;
const GL_COEFF = 0x0A00;
const GL_ORDER = 0x0A01;
const GL_DOMAIN = 0x0A02;
const GL_CURRENT_COLOR = 0x0B00;
const GL_CURRENT_INDEX = 0x0B01;
const GL_CURRENT_NORMAL = 0x0B02;
const GL_CURRENT_TEXTURE_COORDS = 0x0B03;
const GL_CURRENT_RASTER_COLOR = 0x0B04;
const GL_CURRENT_RASTER_INDEX = 0x0B05;
const GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
const GL_CURRENT_RASTER_POSITION = 0x0B07;
const GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
const GL_CURRENT_RASTER_DISTANCE = 0x0B09;
const GL_POINT_SMOOTH = 0x0B10;
const GL_POINT_SIZE = 0x0B11;
const GL_POINT_SIZE_RANGE = 0x0B12;
const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
const GL_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_LINE_SMOOTH = 0x0B20;
const GL_LINE_WIDTH = 0x0B21;
const GL_LINE_WIDTH_RANGE = 0x0B22;
const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_LINE_STIPPLE = 0x0B24;
const GL_LINE_STIPPLE_PATTERN = 0x0B25;
const GL_LINE_STIPPLE_REPEAT = 0x0B26;
const GL_LIST_MODE = 0x0B30;
const GL_MAX_LIST_NESTING = 0x0B31;
const GL_LIST_BASE = 0x0B32;
const GL_LIST_INDEX = 0x0B33;
const GL_POLYGON_MODE = 0x0B40;
const GL_POLYGON_MODE_NV = 0x0B40;
const GL_POLYGON_SMOOTH = 0x0B41;
const GL_POLYGON_STIPPLE = 0x0B42;
const GL_EDGE_FLAG = 0x0B43;
const GL_CULL_FACE = 0x0B44;
const GL_CULL_FACE_MODE = 0x0B45;
const GL_FRONT_FACE = 0x0B46;
const GL_LIGHTING = 0x0B50;
const GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
const GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
const GL_LIGHT_MODEL_AMBIENT = 0x0B53;
const GL_SHADE_MODEL = 0x0B54;
const GL_COLOR_MATERIAL_FACE = 0x0B55;
const GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
const GL_COLOR_MATERIAL = 0x0B57;
const GL_FOG = 0x0B60;
const GL_FOG_INDEX = 0x0B61;
const GL_FOG_DENSITY = 0x0B62;
const GL_FOG_START = 0x0B63;
const GL_FOG_END = 0x0B64;
const GL_FOG_MODE = 0x0B65;
const GL_FOG_COLOR = 0x0B66;
const GL_DEPTH_RANGE = 0x0B70;
const GL_DEPTH_TEST = 0x0B71;
const GL_DEPTH_WRITEMASK = 0x0B72;
const GL_DEPTH_CLEAR_VALUE = 0x0B73;
const GL_DEPTH_FUNC = 0x0B74;
const GL_ACCUM_CLEAR_VALUE = 0x0B80;
const GL_STENCIL_TEST = 0x0B90;
const GL_STENCIL_CLEAR_VALUE = 0x0B91;
const GL_STENCIL_FUNC = 0x0B92;
const GL_STENCIL_VALUE_MASK = 0x0B93;
const GL_STENCIL_FAIL = 0x0B94;
const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const GL_STENCIL_REF = 0x0B97;
const GL_STENCIL_WRITEMASK = 0x0B98;
const GL_MATRIX_MODE = 0x0BA0;
const GL_NORMALIZE = 0x0BA1;
const GL_VIEWPORT = 0x0BA2;
const GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
const GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
const GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
const GL_PROJECTION_STACK_DEPTH = 0x0BA4;
const GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
const GL_TEXTURE_STACK_DEPTH = 0x0BA5;
const GL_MODELVIEW_MATRIX = 0x0BA6;
const GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
const GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
const GL_PROJECTION_MATRIX = 0x0BA7;
const GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
const GL_TEXTURE_MATRIX = 0x0BA8;
const GL_ATTRIB_STACK_DEPTH = 0x0BB0;
const GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
const GL_ALPHA_TEST = 0x0BC0;
const GL_ALPHA_TEST_QCOM = 0x0BC0;
const GL_ALPHA_TEST_FUNC = 0x0BC1;
const GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
const GL_ALPHA_TEST_REF = 0x0BC2;
const GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
const GL_DITHER = 0x0BD0;
const GL_BLEND_DST = 0x0BE0;
const GL_BLEND_SRC = 0x0BE1;
const GL_BLEND = 0x0BE2;
const GL_LOGIC_OP_MODE = 0x0BF0;
const GL_INDEX_LOGIC_OP = 0x0BF1;
const GL_LOGIC_OP = 0x0BF1;
const GL_COLOR_LOGIC_OP = 0x0BF2;
const GL_AUX_BUFFERS = 0x0C00;
const GL_DRAW_BUFFER = 0x0C01;
const GL_DRAW_BUFFER_EXT = 0x0C01;
const GL_READ_BUFFER = 0x0C02;
const GL_READ_BUFFER_EXT = 0x0C02;
const GL_READ_BUFFER_NV = 0x0C02;
const GL_SCISSOR_BOX = 0x0C10;
const GL_SCISSOR_TEST = 0x0C11;
const GL_INDEX_CLEAR_VALUE = 0x0C20;
const GL_INDEX_WRITEMASK = 0x0C21;
const GL_COLOR_CLEAR_VALUE = 0x0C22;
const GL_COLOR_WRITEMASK = 0x0C23;
const GL_INDEX_MODE = 0x0C30;
const GL_RGBA_MODE = 0x0C31;
const GL_DOUBLEBUFFER = 0x0C32;
const GL_STEREO = 0x0C33;
const GL_RENDER_MODE = 0x0C40;
const GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
const GL_POINT_SMOOTH_HINT = 0x0C51;
const GL_LINE_SMOOTH_HINT = 0x0C52;
const GL_POLYGON_SMOOTH_HINT = 0x0C53;
const GL_FOG_HINT = 0x0C54;
const GL_TEXTURE_GEN_S = 0x0C60;
const GL_TEXTURE_GEN_T = 0x0C61;
const GL_TEXTURE_GEN_R = 0x0C62;
const GL_TEXTURE_GEN_Q = 0x0C63;
const GL_PIXEL_MAP_I_TO_I = 0x0C70;
const GL_PIXEL_MAP_S_TO_S = 0x0C71;
const GL_PIXEL_MAP_I_TO_R = 0x0C72;
const GL_PIXEL_MAP_I_TO_G = 0x0C73;
const GL_PIXEL_MAP_I_TO_B = 0x0C74;
const GL_PIXEL_MAP_I_TO_A = 0x0C75;
const GL_PIXEL_MAP_R_TO_R = 0x0C76;
const GL_PIXEL_MAP_G_TO_G = 0x0C77;
const GL_PIXEL_MAP_B_TO_B = 0x0C78;
const GL_PIXEL_MAP_A_TO_A = 0x0C79;
const GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
const GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
const GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
const GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
const GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
const GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
const GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
const GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
const GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
const GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
const GL_UNPACK_SWAP_BYTES = 0x0CF0;
const GL_UNPACK_LSB_FIRST = 0x0CF1;
const GL_UNPACK_ROW_LENGTH = 0x0CF2;
const GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
const GL_UNPACK_SKIP_ROWS = 0x0CF3;
const GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
const GL_UNPACK_ALIGNMENT = 0x0CF5;
const GL_PACK_SWAP_BYTES = 0x0D00;
const GL_PACK_LSB_FIRST = 0x0D01;
const GL_PACK_ROW_LENGTH = 0x0D02;
const GL_PACK_ROW_LENGTH_NV = 0x0D02;
const GL_PACK_SKIP_ROWS = 0x0D03;
const GL_PACK_SKIP_ROWS_NV = 0x0D03;
const GL_PACK_SKIP_PIXELS = 0x0D04;
const GL_PACK_SKIP_PIXELS_NV = 0x0D04;
const GL_PACK_ALIGNMENT = 0x0D05;
const GL_MAP_COLOR = 0x0D10;
const GL_MAP_STENCIL = 0x0D11;
const GL_INDEX_SHIFT = 0x0D12;
const GL_INDEX_OFFSET = 0x0D13;
const GL_RED_SCALE = 0x0D14;
const GL_RED_BIAS = 0x0D15;
const GL_ZOOM_X = 0x0D16;
const GL_ZOOM_Y = 0x0D17;
const GL_GREEN_SCALE = 0x0D18;
const GL_GREEN_BIAS = 0x0D19;
const GL_BLUE_SCALE = 0x0D1A;
const GL_BLUE_BIAS = 0x0D1B;
const GL_ALPHA_SCALE = 0x0D1C;
const GL_ALPHA_BIAS = 0x0D1D;
const GL_DEPTH_SCALE = 0x0D1E;
const GL_DEPTH_BIAS = 0x0D1F;
const GL_MAX_EVAL_ORDER = 0x0D30;
const GL_MAX_LIGHTS = 0x0D31;
const GL_MAX_CLIP_PLANES = 0x0D32;
const GL_MAX_CLIP_PLANES_IMG = 0x0D32;
const GL_MAX_CLIP_DISTANCES = 0x0D32;
const GL_MAX_CLIP_DISTANCES_EXT = 0x0D32;
const GL_MAX_CLIP_DISTANCES_APPLE = 0x0D32;
const GL_MAX_TEXTURE_SIZE = 0x0D33;
const GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
const GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
const GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
const GL_MAX_NAME_STACK_DEPTH = 0x0D37;
const GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
const GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
const GL_SUBPIXEL_BITS = 0x0D50;
const GL_INDEX_BITS = 0x0D51;
const GL_RED_BITS = 0x0D52;
const GL_GREEN_BITS = 0x0D53;
const GL_BLUE_BITS = 0x0D54;
const GL_ALPHA_BITS = 0x0D55;
const GL_DEPTH_BITS = 0x0D56;
const GL_STENCIL_BITS = 0x0D57;
const GL_ACCUM_RED_BITS = 0x0D58;
const GL_ACCUM_GREEN_BITS = 0x0D59;
const GL_ACCUM_BLUE_BITS = 0x0D5A;
const GL_ACCUM_ALPHA_BITS = 0x0D5B;
const GL_NAME_STACK_DEPTH = 0x0D70;
const GL_AUTO_NORMAL = 0x0D80;
const GL_MAP1_COLOR_4 = 0x0D90;
const GL_MAP1_INDEX = 0x0D91;
const GL_MAP1_NORMAL = 0x0D92;
const GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
const GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
const GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
const GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
const GL_MAP1_VERTEX_3 = 0x0D97;
const GL_MAP1_VERTEX_4 = 0x0D98;
const GL_MAP2_COLOR_4 = 0x0DB0;
const GL_MAP2_INDEX = 0x0DB1;
const GL_MAP2_NORMAL = 0x0DB2;
const GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
const GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
const GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
const GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
const GL_MAP2_VERTEX_3 = 0x0DB7;
const GL_MAP2_VERTEX_4 = 0x0DB8;
const GL_MAP1_GRID_DOMAIN = 0x0DD0;
const GL_MAP1_GRID_SEGMENTS = 0x0DD1;
const GL_MAP2_GRID_DOMAIN = 0x0DD2;
const GL_MAP2_GRID_SEGMENTS = 0x0DD3;
const GL_TEXTURE_1D = 0x0DE0;
const GL_TEXTURE_2D = 0x0DE1;
const GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
const GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
const GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
const GL_SELECTION_BUFFER_POINTER = 0x0DF3;
const GL_SELECTION_BUFFER_SIZE = 0x0DF4;
const GL_TEXTURE_WIDTH = 0x1000;
const GL_TEXTURE_HEIGHT = 0x1001;
const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const GL_TEXTURE_COMPONENTS = 0x1003;
const GL_TEXTURE_BORDER_COLOR = 0x1004;
const GL_TEXTURE_BORDER_COLOR_EXT = 0x1004;
const GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
const GL_TEXTURE_BORDER_COLOR_OES = 0x1004;
const GL_TEXTURE_BORDER = 0x1005;
const GL_TEXTURE_TARGET = 0x1006;
const GL_DONT_CARE = 0x1100;
const GL_FASTEST = 0x1101;
const GL_NICEST = 0x1102;
const GL_AMBIENT = 0x1200;
const GL_DIFFUSE = 0x1201;
const GL_SPECULAR = 0x1202;
const GL_POSITION = 0x1203;
const GL_SPOT_DIRECTION = 0x1204;
const GL_SPOT_EXPONENT = 0x1205;
const GL_SPOT_CUTOFF = 0x1206;
const GL_CONSTANT_ATTENUATION = 0x1207;
const GL_LINEAR_ATTENUATION = 0x1208;
const GL_QUADRATIC_ATTENUATION = 0x1209;
const GL_COMPILE = 0x1300;
const GL_COMPILE_AND_EXECUTE = 0x1301;
const GL_BYTE = 0x1400;
const GL_UNSIGNED_BYTE = 0x1401;
const GL_SHORT = 0x1402;
const GL_UNSIGNED_SHORT = 0x1403;
const GL_INT = 0x1404;
const GL_UNSIGNED_INT = 0x1405;
const GL_FLOAT = 0x1406;
const GL_2_BYTES = 0x1407;
const GL_2_BYTES_NV = 0x1407;
const GL_3_BYTES = 0x1408;
const GL_3_BYTES_NV = 0x1408;
const GL_4_BYTES = 0x1409;
const GL_4_BYTES_NV = 0x1409;
const GL_DOUBLE = 0x140A;
const GL_DOUBLE_EXT = 0x140A;
const GL_HALF_FLOAT = 0x140B;
const GL_HALF_FLOAT_ARB = 0x140B;
const GL_HALF_FLOAT_NV = 0x140B;
const GL_HALF_APPLE = 0x140B;
const GL_FIXED = 0x140C;
const GL_FIXED_OES = 0x140C;
const GL_INT64_ARB = 0x140E;
const GL_INT64_NV = 0x140E;
const GL_UNSIGNED_INT64_ARB = 0x140F;
const GL_UNSIGNED_INT64_NV = 0x140F;
const GL_CLEAR = 0x1500;
const GL_AND = 0x1501;
const GL_AND_REVERSE = 0x1502;
const GL_COPY = 0x1503;
const GL_AND_INVERTED = 0x1504;
const GL_NOOP = 0x1505;
const GL_XOR = 0x1506;
const GL_XOR_NV = 0x1506;
const GL_OR = 0x1507;
const GL_NOR = 0x1508;
const GL_EQUIV = 0x1509;
const GL_INVERT = 0x150A;
const GL_OR_REVERSE = 0x150B;
const GL_COPY_INVERTED = 0x150C;
const GL_OR_INVERTED = 0x150D;
const GL_NAND = 0x150E;
const GL_SET = 0x150F;
const GL_EMISSION = 0x1600;
const GL_SHININESS = 0x1601;
const GL_AMBIENT_AND_DIFFUSE = 0x1602;
const GL_COLOR_INDEXES = 0x1603;
const GL_MODELVIEW = 0x1700;
const GL_MODELVIEW0_ARB = 0x1700;
const GL_MODELVIEW0_EXT = 0x1700;
const GL_PATH_MODELVIEW_NV = 0x1700;
const GL_PROJECTION = 0x1701;
const GL_PATH_PROJECTION_NV = 0x1701;
const GL_TEXTURE = 0x1702;
const GL_COLOR = 0x1800;
const GL_COLOR_EXT = 0x1800;
const GL_DEPTH = 0x1801;
const GL_DEPTH_EXT = 0x1801;
const GL_STENCIL = 0x1802;
const GL_STENCIL_EXT = 0x1802;
const GL_COLOR_INDEX = 0x1900;
const GL_STENCIL_INDEX = 0x1901;
const GL_STENCIL_INDEX_OES = 0x1901;
const GL_DEPTH_COMPONENT = 0x1902;
const GL_RED = 0x1903;
const GL_RED_EXT = 0x1903;
const GL_RED_NV = 0x1903;
const GL_GREEN = 0x1904;
const GL_GREEN_NV = 0x1904;
const GL_BLUE = 0x1905;
const GL_BLUE_NV = 0x1905;
const GL_ALPHA = 0x1906;
const GL_RGB = 0x1907;
const GL_RGBA = 0x1908;
const GL_LUMINANCE = 0x1909;
const GL_LUMINANCE_ALPHA = 0x190A;
const GL_BITMAP = 0x1A00;
const GL_POINT = 0x1B00;
const GL_POINT_NV = 0x1B00;
const GL_LINE = 0x1B01;
const GL_LINE_NV = 0x1B01;
const GL_FILL = 0x1B02;
const GL_FILL_NV = 0x1B02;
const GL_RENDER = 0x1C00;
const GL_FEEDBACK = 0x1C01;
const GL_SELECT = 0x1C02;
const GL_FLAT = 0x1D00;
const GL_SMOOTH = 0x1D01;
const GL_KEEP = 0x1E00;
const GL_REPLACE = 0x1E01;
const GL_INCR = 0x1E02;
const GL_DECR = 0x1E03;
const GL_VENDOR = 0x1F00;
const GL_RENDERER = 0x1F01;
const GL_VERSION = 0x1F02;
const GL_EXTENSIONS = 0x1F03;
const GL_S = 0x2000;
const GL_T = 0x2001;
const GL_R = 0x2002;
const GL_Q = 0x2003;
const GL_MODULATE = 0x2100;
const GL_DECAL = 0x2101;
const GL_TEXTURE_ENV_MODE = 0x2200;
const GL_TEXTURE_ENV_COLOR = 0x2201;
const GL_TEXTURE_ENV = 0x2300;
const GL_EYE_LINEAR = 0x2400;
const GL_EYE_LINEAR_NV = 0x2400;
const GL_OBJECT_LINEAR = 0x2401;
const GL_OBJECT_LINEAR_NV = 0x2401;
const GL_SPHERE_MAP = 0x2402;
const GL_TEXTURE_GEN_MODE = 0x2500;
const GL_TEXTURE_GEN_MODE_OES = 0x2500;
const GL_OBJECT_PLANE = 0x2501;
const GL_EYE_PLANE = 0x2502;
const GL_NEAREST = 0x2600;
const GL_LINEAR = 0x2601;
const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const GL_TEXTURE_MAG_FILTER = 0x2800;
const GL_TEXTURE_MIN_FILTER = 0x2801;
const GL_TEXTURE_WRAP_S = 0x2802;
const GL_TEXTURE_WRAP_T = 0x2803;
const GL_CLAMP = 0x2900;
const GL_REPEAT = 0x2901;
const GL_POLYGON_OFFSET_UNITS = 0x2A00;
const GL_POLYGON_OFFSET_POINT = 0x2A01;
const GL_POLYGON_OFFSET_POINT_NV = 0x2A01;
const GL_POLYGON_OFFSET_LINE = 0x2A02;
const GL_POLYGON_OFFSET_LINE_NV = 0x2A02;
const GL_R3_G3_B2 = 0x2A10;
const GL_V2F = 0x2A20;
const GL_V3F = 0x2A21;
const GL_C4UB_V2F = 0x2A22;
const GL_C4UB_V3F = 0x2A23;
const GL_C3F_V3F = 0x2A24;
const GL_N3F_V3F = 0x2A25;
const GL_C4F_N3F_V3F = 0x2A26;
const GL_T2F_V3F = 0x2A27;
const GL_T4F_V4F = 0x2A28;
const GL_T2F_C4UB_V3F = 0x2A29;
const GL_T2F_C3F_V3F = 0x2A2A;
const GL_T2F_N3F_V3F = 0x2A2B;
const GL_T2F_C4F_N3F_V3F = 0x2A2C;
const GL_T4F_C4F_N3F_V4F = 0x2A2D;
const GL_CLIP_PLANE0 = 0x3000;
const GL_CLIP_PLANE0_IMG = 0x3000;
const GL_CLIP_DISTANCE0 = 0x3000;
const GL_CLIP_DISTANCE0_EXT = 0x3000;
const GL_CLIP_DISTANCE0_APPLE = 0x3000;
const GL_CLIP_PLANE1 = 0x3001;
const GL_CLIP_PLANE1_IMG = 0x3001;
const GL_CLIP_DISTANCE1 = 0x3001;
const GL_CLIP_DISTANCE1_EXT = 0x3001;
const GL_CLIP_DISTANCE1_APPLE = 0x3001;
const GL_CLIP_PLANE2 = 0x3002;
const GL_CLIP_PLANE2_IMG = 0x3002;
const GL_CLIP_DISTANCE2 = 0x3002;
const GL_CLIP_DISTANCE2_EXT = 0x3002;
const GL_CLIP_DISTANCE2_APPLE = 0x3002;
const GL_CLIP_PLANE3 = 0x3003;
const GL_CLIP_PLANE3_IMG = 0x3003;
const GL_CLIP_DISTANCE3 = 0x3003;
const GL_CLIP_DISTANCE3_EXT = 0x3003;
const GL_CLIP_DISTANCE3_APPLE = 0x3003;
const GL_CLIP_PLANE4 = 0x3004;
const GL_CLIP_PLANE4_IMG = 0x3004;
const GL_CLIP_DISTANCE4 = 0x3004;
const GL_CLIP_DISTANCE4_EXT = 0x3004;
const GL_CLIP_DISTANCE4_APPLE = 0x3004;
const GL_CLIP_PLANE5 = 0x3005;
const GL_CLIP_PLANE5_IMG = 0x3005;
const GL_CLIP_DISTANCE5 = 0x3005;
const GL_CLIP_DISTANCE5_EXT = 0x3005;
const GL_CLIP_DISTANCE5_APPLE = 0x3005;
const GL_CLIP_DISTANCE6 = 0x3006;
const GL_CLIP_DISTANCE6_EXT = 0x3006;
const GL_CLIP_DISTANCE6_APPLE = 0x3006;
const GL_CLIP_DISTANCE7 = 0x3007;
const GL_CLIP_DISTANCE7_EXT = 0x3007;
const GL_CLIP_DISTANCE7_APPLE = 0x3007;
const GL_LIGHT0 = 0x4000;
const GL_LIGHT1 = 0x4001;
const GL_LIGHT2 = 0x4002;
const GL_LIGHT3 = 0x4003;
const GL_LIGHT4 = 0x4004;
const GL_LIGHT5 = 0x4005;
const GL_LIGHT6 = 0x4006;
const GL_LIGHT7 = 0x4007;
const GL_ABGR_EXT = 0x8000;
const GL_CONSTANT_COLOR = 0x8001;
const GL_CONSTANT_COLOR_EXT = 0x8001;
const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
const GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
const GL_CONSTANT_ALPHA = 0x8003;
const GL_CONSTANT_ALPHA_EXT = 0x8003;
const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
const GL_BLEND_COLOR = 0x8005;
const GL_BLEND_COLOR_EXT = 0x8005;
const GL_FUNC_ADD = 0x8006;
const GL_FUNC_ADD_EXT = 0x8006;
const GL_FUNC_ADD_OES = 0x8006;
const GL_MIN = 0x8007;
const GL_MIN_EXT = 0x8007;
const GL_MAX = 0x8008;
const GL_MAX_EXT = 0x8008;
const GL_BLEND_EQUATION = 0x8009;
const GL_BLEND_EQUATION_EXT = 0x8009;
const GL_BLEND_EQUATION_OES = 0x8009;
const GL_BLEND_EQUATION_RGB = 0x8009;
const GL_BLEND_EQUATION_RGB_EXT = 0x8009;
const GL_BLEND_EQUATION_RGB_OES = 0x8009;
const GL_FUNC_SUBTRACT = 0x800A;
const GL_FUNC_SUBTRACT_EXT = 0x800A;
const GL_FUNC_SUBTRACT_OES = 0x800A;
const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
const GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
const GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B;
const GL_CMYK_EXT = 0x800C;
const GL_CMYKA_EXT = 0x800D;
const GL_PACK_CMYK_HINT_EXT = 0x800E;
const GL_UNPACK_CMYK_HINT_EXT = 0x800F;
const GL_CONVOLUTION_1D = 0x8010;
const GL_CONVOLUTION_1D_EXT = 0x8010;
const GL_CONVOLUTION_2D = 0x8011;
const GL_CONVOLUTION_2D_EXT = 0x8011;
const GL_SEPARABLE_2D = 0x8012;
const GL_SEPARABLE_2D_EXT = 0x8012;
const GL_CONVOLUTION_BORDER_MODE = 0x8013;
const GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
const GL_CONVOLUTION_FILTER_SCALE = 0x8014;
const GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
const GL_CONVOLUTION_FILTER_BIAS = 0x8015;
const GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
const GL_REDUCE = 0x8016;
const GL_REDUCE_EXT = 0x8016;
const GL_CONVOLUTION_FORMAT = 0x8017;
const GL_CONVOLUTION_FORMAT_EXT = 0x8017;
const GL_CONVOLUTION_WIDTH = 0x8018;
const GL_CONVOLUTION_WIDTH_EXT = 0x8018;
const GL_CONVOLUTION_HEIGHT = 0x8019;
const GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
const GL_MAX_CONVOLUTION_WIDTH = 0x801A;
const GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
const GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
const GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
const GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
const GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
const GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
const GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
const GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
const GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
const GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
const GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
const GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
const GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
const GL_HISTOGRAM = 0x8024;
const GL_HISTOGRAM_EXT = 0x8024;
const GL_PROXY_HISTOGRAM = 0x8025;
const GL_PROXY_HISTOGRAM_EXT = 0x8025;
const GL_HISTOGRAM_WIDTH = 0x8026;
const GL_HISTOGRAM_WIDTH_EXT = 0x8026;
const GL_HISTOGRAM_FORMAT = 0x8027;
const GL_HISTOGRAM_FORMAT_EXT = 0x8027;
const GL_HISTOGRAM_RED_SIZE = 0x8028;
const GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
const GL_HISTOGRAM_GREEN_SIZE = 0x8029;
const GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
const GL_HISTOGRAM_BLUE_SIZE = 0x802A;
const GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
const GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
const GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
const GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
const GL_HISTOGRAM_SINK = 0x802D;
const GL_HISTOGRAM_SINK_EXT = 0x802D;
const GL_MINMAX = 0x802E;
const GL_MINMAX_EXT = 0x802E;
const GL_MINMAX_FORMAT = 0x802F;
const GL_MINMAX_FORMAT_EXT = 0x802F;
const GL_MINMAX_SINK = 0x8030;
const GL_MINMAX_SINK_EXT = 0x8030;
const GL_TABLE_TOO_LARGE_EXT = 0x8031;
const GL_TABLE_TOO_LARGE = 0x8031;
const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
const GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
const GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
const GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
const GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
const GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
const GL_POLYGON_OFFSET_EXT = 0x8037;
const GL_POLYGON_OFFSET_FILL = 0x8037;
const GL_POLYGON_OFFSET_FACTOR = 0x8038;
const GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
const GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
const GL_RESCALE_NORMAL = 0x803A;
const GL_RESCALE_NORMAL_EXT = 0x803A;
const GL_ALPHA4 = 0x803B;
const GL_ALPHA4_EXT = 0x803B;
const GL_ALPHA8 = 0x803C;
const GL_ALPHA8_EXT = 0x803C;
const GL_ALPHA8_OES = 0x803C;
const GL_ALPHA12 = 0x803D;
const GL_ALPHA12_EXT = 0x803D;
const GL_ALPHA16 = 0x803E;
const GL_ALPHA16_EXT = 0x803E;
const GL_LUMINANCE4 = 0x803F;
const GL_LUMINANCE4_EXT = 0x803F;
const GL_LUMINANCE8 = 0x8040;
const GL_LUMINANCE8_EXT = 0x8040;
const GL_LUMINANCE8_OES = 0x8040;
const GL_LUMINANCE12 = 0x8041;
const GL_LUMINANCE12_EXT = 0x8041;
const GL_LUMINANCE16 = 0x8042;
const GL_LUMINANCE16_EXT = 0x8042;
const GL_LUMINANCE4_ALPHA4 = 0x8043;
const GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
const GL_LUMINANCE4_ALPHA4_OES = 0x8043;
const GL_LUMINANCE6_ALPHA2 = 0x8044;
const GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
const GL_LUMINANCE8_ALPHA8 = 0x8045;
const GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
const GL_LUMINANCE8_ALPHA8_OES = 0x8045;
const GL_LUMINANCE12_ALPHA4 = 0x8046;
const GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
const GL_LUMINANCE12_ALPHA12 = 0x8047;
const GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
const GL_LUMINANCE16_ALPHA16 = 0x8048;
const GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
const GL_INTENSITY = 0x8049;
const GL_INTENSITY_EXT = 0x8049;
const GL_INTENSITY4 = 0x804A;
const GL_INTENSITY4_EXT = 0x804A;
const GL_INTENSITY8 = 0x804B;
const GL_INTENSITY8_EXT = 0x804B;
const GL_INTENSITY12 = 0x804C;
const GL_INTENSITY12_EXT = 0x804C;
const GL_INTENSITY16 = 0x804D;
const GL_INTENSITY16_EXT = 0x804D;
const GL_RGB2_EXT = 0x804E;
const GL_RGB4 = 0x804F;
const GL_RGB4_EXT = 0x804F;
const GL_RGB5 = 0x8050;
const GL_RGB5_EXT = 0x8050;
const GL_RGB8 = 0x8051;
const GL_RGB8_EXT = 0x8051;
const GL_RGB8_OES = 0x8051;
const GL_RGB10 = 0x8052;
const GL_RGB10_EXT = 0x8052;
const GL_RGB12 = 0x8053;
const GL_RGB12_EXT = 0x8053;
const GL_RGB16 = 0x8054;
const GL_RGB16_EXT = 0x8054;
const GL_RGBA2 = 0x8055;
const GL_RGBA2_EXT = 0x8055;
const GL_RGBA4 = 0x8056;
const GL_RGBA4_EXT = 0x8056;
const GL_RGBA4_OES = 0x8056;
const GL_RGB5_A1 = 0x8057;
const GL_RGB5_A1_EXT = 0x8057;
const GL_RGB5_A1_OES = 0x8057;
const GL_RGBA8 = 0x8058;
const GL_RGBA8_EXT = 0x8058;
const GL_RGBA8_OES = 0x8058;
const GL_RGB10_A2 = 0x8059;
const GL_RGB10_A2_EXT = 0x8059;
const GL_RGBA12 = 0x805A;
const GL_RGBA12_EXT = 0x805A;
const GL_RGBA16 = 0x805B;
const GL_RGBA16_EXT = 0x805B;
const GL_TEXTURE_RED_SIZE = 0x805C;
const GL_TEXTURE_RED_SIZE_EXT = 0x805C;
const GL_TEXTURE_GREEN_SIZE = 0x805D;
const GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
const GL_TEXTURE_BLUE_SIZE = 0x805E;
const GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
const GL_TEXTURE_ALPHA_SIZE = 0x805F;
const GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
const GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
const GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
const GL_TEXTURE_INTENSITY_SIZE = 0x8061;
const GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
const GL_REPLACE_EXT = 0x8062;
const GL_PROXY_TEXTURE_1D = 0x8063;
const GL_PROXY_TEXTURE_1D_EXT = 0x8063;
const GL_PROXY_TEXTURE_2D = 0x8064;
const GL_PROXY_TEXTURE_2D_EXT = 0x8064;
const GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
const GL_TEXTURE_PRIORITY = 0x8066;
const GL_TEXTURE_PRIORITY_EXT = 0x8066;
const GL_TEXTURE_RESIDENT = 0x8067;
const GL_TEXTURE_RESIDENT_EXT = 0x8067;
const GL_TEXTURE_1D_BINDING_EXT = 0x8068;
const GL_TEXTURE_BINDING_1D = 0x8068;
const GL_TEXTURE_2D_BINDING_EXT = 0x8069;
const GL_TEXTURE_BINDING_2D = 0x8069;
const GL_TEXTURE_3D_BINDING_EXT = 0x806A;
const GL_TEXTURE_3D_BINDING_OES = 0x806A;
const GL_TEXTURE_BINDING_3D = 0x806A;
const GL_TEXTURE_BINDING_3D_OES = 0x806A;
const GL_PACK_SKIP_IMAGES = 0x806B;
const GL_PACK_SKIP_IMAGES_EXT = 0x806B;
const GL_PACK_IMAGE_HEIGHT = 0x806C;
const GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
const GL_UNPACK_SKIP_IMAGES = 0x806D;
const GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
const GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
const GL_TEXTURE_3D = 0x806F;
const GL_TEXTURE_3D_EXT = 0x806F;
const GL_TEXTURE_3D_OES = 0x806F;
const GL_PROXY_TEXTURE_3D = 0x8070;
const GL_PROXY_TEXTURE_3D_EXT = 0x8070;
const GL_TEXTURE_DEPTH = 0x8071;
const GL_TEXTURE_DEPTH_EXT = 0x8071;
const GL_TEXTURE_WRAP_R = 0x8072;
const GL_TEXTURE_WRAP_R_EXT = 0x8072;
const GL_TEXTURE_WRAP_R_OES = 0x8072;
const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
const GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
const GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073;
const GL_VERTEX_ARRAY = 0x8074;
const GL_VERTEX_ARRAY_EXT = 0x8074;
const GL_VERTEX_ARRAY_KHR = 0x8074;
const GL_NORMAL_ARRAY = 0x8075;
const GL_NORMAL_ARRAY_EXT = 0x8075;
const GL_COLOR_ARRAY = 0x8076;
const GL_COLOR_ARRAY_EXT = 0x8076;
const GL_INDEX_ARRAY = 0x8077;
const GL_INDEX_ARRAY_EXT = 0x8077;
const GL_TEXTURE_COORD_ARRAY = 0x8078;
const GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
const GL_EDGE_FLAG_ARRAY = 0x8079;
const GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
const GL_VERTEX_ARRAY_SIZE = 0x807A;
const GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
const GL_VERTEX_ARRAY_TYPE = 0x807B;
const GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
const GL_VERTEX_ARRAY_STRIDE = 0x807C;
const GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
const GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
const GL_NORMAL_ARRAY_TYPE = 0x807E;
const GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
const GL_NORMAL_ARRAY_STRIDE = 0x807F;
const GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
const GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
const GL_COLOR_ARRAY_SIZE = 0x8081;
const GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
const GL_COLOR_ARRAY_TYPE = 0x8082;
const GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
const GL_COLOR_ARRAY_STRIDE = 0x8083;
const GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
const GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
const GL_INDEX_ARRAY_TYPE = 0x8085;
const GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
const GL_INDEX_ARRAY_STRIDE = 0x8086;
const GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
const GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
const GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
const GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
const GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
const GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
const GL_VERTEX_ARRAY_POINTER = 0x808E;
const GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
const GL_NORMAL_ARRAY_POINTER = 0x808F;
const GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
const GL_COLOR_ARRAY_POINTER = 0x8090;
const GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
const GL_INDEX_ARRAY_POINTER = 0x8091;
const GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
const GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
const GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
const GL_INTERLACE_SGIX = 0x8094;
const GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
const GL_LINEAR_DETAIL_SGIS = 0x8097;
const GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
const GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
const GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
const GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
const GL_MULTISAMPLE = 0x809D;
const GL_MULTISAMPLE_ARB = 0x809D;
const GL_MULTISAMPLE_EXT = 0x809D;
const GL_MULTISAMPLE_SGIS = 0x809D;
const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
const GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
const GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
const GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
const GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
const GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
const GL_SAMPLE_COVERAGE = 0x80A0;
const GL_SAMPLE_COVERAGE_ARB = 0x80A0;
const GL_SAMPLE_MASK_EXT = 0x80A0;
const GL_SAMPLE_MASK_SGIS = 0x80A0;
const GL_1PASS_EXT = 0x80A1;
const GL_1PASS_SGIS = 0x80A1;
const GL_2PASS_0_EXT = 0x80A2;
const GL_2PASS_0_SGIS = 0x80A2;
const GL_2PASS_1_EXT = 0x80A3;
const GL_2PASS_1_SGIS = 0x80A3;
const GL_4PASS_0_EXT = 0x80A4;
const GL_4PASS_0_SGIS = 0x80A4;
const GL_4PASS_1_EXT = 0x80A5;
const GL_4PASS_1_SGIS = 0x80A5;
const GL_4PASS_2_EXT = 0x80A6;
const GL_4PASS_2_SGIS = 0x80A6;
const GL_4PASS_3_EXT = 0x80A7;
const GL_4PASS_3_SGIS = 0x80A7;
const GL_SAMPLE_BUFFERS = 0x80A8;
const GL_SAMPLE_BUFFERS_ARB = 0x80A8;
const GL_SAMPLE_BUFFERS_EXT = 0x80A8;
const GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
const GL_SAMPLES = 0x80A9;
const GL_SAMPLES_ARB = 0x80A9;
const GL_SAMPLES_EXT = 0x80A9;
const GL_SAMPLES_SGIS = 0x80A9;
const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
const GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
const GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
const GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
const GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
const GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
const GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
const GL_SAMPLE_PATTERN_EXT = 0x80AC;
const GL_SAMPLE_PATTERN_SGIS = 0x80AC;
const GL_LINEAR_SHARPEN_SGIS = 0x80AD;
const GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
const GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
const GL_COLOR_MATRIX = 0x80B1;
const GL_COLOR_MATRIX_SGI = 0x80B1;
const GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
const GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
const GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
const GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
const GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
const GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
const GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
const GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
const GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
const GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
const GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
const GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
const GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
const GL_SHADOW_AMBIENT_SGIX = 0x80BF;
const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
const GL_BLEND_DST_RGB = 0x80C8;
const GL_BLEND_DST_RGB_EXT = 0x80C8;
const GL_BLEND_DST_RGB_OES = 0x80C8;
const GL_BLEND_SRC_RGB = 0x80C9;
const GL_BLEND_SRC_RGB_EXT = 0x80C9;
const GL_BLEND_SRC_RGB_OES = 0x80C9;
const GL_BLEND_DST_ALPHA = 0x80CA;
const GL_BLEND_DST_ALPHA_EXT = 0x80CA;
const GL_BLEND_DST_ALPHA_OES = 0x80CA;
const GL_BLEND_SRC_ALPHA = 0x80CB;
const GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
const GL_BLEND_SRC_ALPHA_OES = 0x80CB;
const GL_422_EXT = 0x80CC;
const GL_422_REV_EXT = 0x80CD;
const GL_422_AVERAGE_EXT = 0x80CE;
const GL_422_REV_AVERAGE_EXT = 0x80CF;
const GL_COLOR_TABLE = 0x80D0;
const GL_COLOR_TABLE_SGI = 0x80D0;
const GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
const GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
const GL_PROXY_COLOR_TABLE = 0x80D3;
const GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
const GL_COLOR_TABLE_SCALE = 0x80D6;
const GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
const GL_COLOR_TABLE_BIAS = 0x80D7;
const GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
const GL_COLOR_TABLE_FORMAT = 0x80D8;
const GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
const GL_COLOR_TABLE_WIDTH = 0x80D9;
const GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
const GL_COLOR_TABLE_RED_SIZE = 0x80DA;
const GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
const GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
const GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
const GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
const GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
const GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
const GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
const GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
const GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
const GL_BGR = 0x80E0;
const GL_BGR_EXT = 0x80E0;
const GL_BGRA = 0x80E1;
const GL_BGRA_EXT = 0x80E1;
const GL_BGRA_IMG = 0x80E1;
const GL_COLOR_INDEX1_EXT = 0x80E2;
const GL_COLOR_INDEX2_EXT = 0x80E3;
const GL_COLOR_INDEX4_EXT = 0x80E4;
const GL_COLOR_INDEX8_EXT = 0x80E5;
const GL_COLOR_INDEX12_EXT = 0x80E6;
const GL_COLOR_INDEX16_EXT = 0x80E7;
const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
const GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
const GL_MAX_ELEMENTS_INDICES = 0x80E9;
const GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
const GL_PHONG_WIN = 0x80EA;
const GL_PHONG_HINT_WIN = 0x80EB;
const GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
const GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
const GL_PARAMETER_BUFFER = 0x80EE;
const GL_PARAMETER_BUFFER_ARB = 0x80EE;
const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
const GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
const GL_DUAL_ALPHA4_SGIS = 0x8110;
const GL_DUAL_ALPHA8_SGIS = 0x8111;
const GL_DUAL_ALPHA12_SGIS = 0x8112;
const GL_DUAL_ALPHA16_SGIS = 0x8113;
const GL_DUAL_LUMINANCE4_SGIS = 0x8114;
const GL_DUAL_LUMINANCE8_SGIS = 0x8115;
const GL_DUAL_LUMINANCE12_SGIS = 0x8116;
const GL_DUAL_LUMINANCE16_SGIS = 0x8117;
const GL_DUAL_INTENSITY4_SGIS = 0x8118;
const GL_DUAL_INTENSITY8_SGIS = 0x8119;
const GL_DUAL_INTENSITY12_SGIS = 0x811A;
const GL_DUAL_INTENSITY16_SGIS = 0x811B;
const GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
const GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
const GL_QUAD_ALPHA4_SGIS = 0x811E;
const GL_QUAD_ALPHA8_SGIS = 0x811F;
const GL_QUAD_LUMINANCE4_SGIS = 0x8120;
const GL_QUAD_LUMINANCE8_SGIS = 0x8121;
const GL_QUAD_INTENSITY4_SGIS = 0x8122;
const GL_QUAD_INTENSITY8_SGIS = 0x8123;
const GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
const GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
const GL_POINT_SIZE_MIN = 0x8126;
const GL_POINT_SIZE_MIN_ARB = 0x8126;
const GL_POINT_SIZE_MIN_EXT = 0x8126;
const GL_POINT_SIZE_MIN_SGIS = 0x8126;
const GL_POINT_SIZE_MAX = 0x8127;
const GL_POINT_SIZE_MAX_ARB = 0x8127;
const GL_POINT_SIZE_MAX_EXT = 0x8127;
const GL_POINT_SIZE_MAX_SGIS = 0x8127;
const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
const GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
const GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
const GL_DISTANCE_ATTENUATION_EXT = 0x8129;
const GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
const GL_POINT_DISTANCE_ATTENUATION = 0x8129;
const GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
const GL_FOG_FUNC_SGIS = 0x812A;
const GL_FOG_FUNC_POINTS_SGIS = 0x812B;
const GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
const GL_CLAMP_TO_BORDER = 0x812D;
const GL_CLAMP_TO_BORDER_ARB = 0x812D;
const GL_CLAMP_TO_BORDER_EXT = 0x812D;
const GL_CLAMP_TO_BORDER_NV = 0x812D;
const GL_CLAMP_TO_BORDER_SGIS = 0x812D;
const GL_CLAMP_TO_BORDER_OES = 0x812D;
const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
const GL_CLAMP_TO_EDGE = 0x812F;
const GL_CLAMP_TO_EDGE_SGIS = 0x812F;
const GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
const GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
const GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
const GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
const GL_TEXTURE_4D_SGIS = 0x8134;
const GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
const GL_TEXTURE_4DSIZE_SGIS = 0x8136;
const GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
const GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
const GL_PIXEL_TEX_GEN_SGIX = 0x8139;
const GL_TEXTURE_MIN_LOD = 0x813A;
const GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
const GL_TEXTURE_MAX_LOD = 0x813B;
const GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
const GL_TEXTURE_BASE_LEVEL = 0x813C;
const GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
const GL_TEXTURE_MAX_LEVEL = 0x813D;
const GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;
const GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
const GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
const GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
const GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
const GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
const GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
const GL_FILTER4_SGIS = 0x8146;
const GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
const GL_SPRITE_SGIX = 0x8148;
const GL_SPRITE_MODE_SGIX = 0x8149;
const GL_SPRITE_AXIS_SGIX = 0x814A;
const GL_SPRITE_TRANSLATION_SGIX = 0x814B;
const GL_SPRITE_AXIAL_SGIX = 0x814C;
const GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
const GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
const GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
const GL_IGNORE_BORDER_HP = 0x8150;
const GL_CONSTANT_BORDER = 0x8151;
const GL_CONSTANT_BORDER_HP = 0x8151;
const GL_REPLICATE_BORDER = 0x8153;
const GL_REPLICATE_BORDER_HP = 0x8153;
const GL_CONVOLUTION_BORDER_COLOR = 0x8154;
const GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
const GL_IMAGE_SCALE_X_HP = 0x8155;
const GL_IMAGE_SCALE_Y_HP = 0x8156;
const GL_IMAGE_TRANSLATE_X_HP = 0x8157;
const GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
const GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
const GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
const GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
const GL_IMAGE_MAG_FILTER_HP = 0x815C;
const GL_IMAGE_MIN_FILTER_HP = 0x815D;
const GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
const GL_CUBIC_HP = 0x815F;
const GL_AVERAGE_HP = 0x8160;
const GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
const GL_OCCLUSION_TEST_HP = 0x8165;
const GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
const GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
const GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
const GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
const GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
const GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
const GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
const GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
const GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
const GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
const GL_REFERENCE_PLANE_SGIX = 0x817D;
const GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
const GL_IR_INSTRUMENT1_SGIX = 0x817F;
const GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
const GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
const GL_LIST_PRIORITY_SGIX = 0x8182;
const GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
const GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
const GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
const GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
const GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
const GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
const GL_FRAMEZOOM_SGIX = 0x818B;
const GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
const GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
const GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
const GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
const GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
const GL_GENERATE_MIPMAP = 0x8191;
const GL_GENERATE_MIPMAP_SGIS = 0x8191;
const GL_GENERATE_MIPMAP_HINT = 0x8192;
const GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
const GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
const GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
const GL_DEFORMATIONS_MASK_SGIX = 0x8196;
const GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
const GL_FOG_OFFSET_SGIX = 0x8198;
const GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
const GL_TEXTURE_COMPARE_SGIX = 0x819A;
const GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
const GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
const GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
const GL_DEPTH_COMPONENT16 = 0x81A5;
const GL_DEPTH_COMPONENT16_ARB = 0x81A5;
const GL_DEPTH_COMPONENT16_OES = 0x81A5;
const GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
const GL_DEPTH_COMPONENT24 = 0x81A6;
const GL_DEPTH_COMPONENT24_ARB = 0x81A6;
const GL_DEPTH_COMPONENT24_OES = 0x81A6;
const GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
const GL_DEPTH_COMPONENT32 = 0x81A7;
const GL_DEPTH_COMPONENT32_ARB = 0x81A7;
const GL_DEPTH_COMPONENT32_OES = 0x81A7;
const GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
const GL_CULL_VERTEX_EXT = 0x81AA;
const GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
const GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
const GL_IUI_V2F_EXT = 0x81AD;
const GL_IUI_V3F_EXT = 0x81AE;
const GL_IUI_N3F_V2F_EXT = 0x81AF;
const GL_IUI_N3F_V3F_EXT = 0x81B0;
const GL_T2F_IUI_V2F_EXT = 0x81B1;
const GL_T2F_IUI_V3F_EXT = 0x81B2;
const GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
const GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
const GL_INDEX_TEST_EXT = 0x81B5;
const GL_INDEX_TEST_FUNC_EXT = 0x81B6;
const GL_INDEX_TEST_REF_EXT = 0x81B7;
const GL_INDEX_MATERIAL_EXT = 0x81B8;
const GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
const GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
const GL_YCRCB_422_SGIX = 0x81BB;
const GL_YCRCB_444_SGIX = 0x81BC;
const GL_WRAP_BORDER_SUN = 0x81D4;
const GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
const GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
const GL_TRIANGLE_LIST_SUN = 0x81D7;
const GL_REPLACEMENT_CODE_SUN = 0x81D8;
const GL_GLOBAL_ALPHA_SUN = 0x81D9;
const GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
const GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
const GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
const GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
const GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
const GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
const GL_EYE_POINT_SGIS = 0x81F4;
const GL_OBJECT_POINT_SGIS = 0x81F5;
const GL_EYE_LINE_SGIS = 0x81F6;
const GL_OBJECT_LINE_SGIS = 0x81F7;
const GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
const GL_SINGLE_COLOR = 0x81F9;
const GL_SINGLE_COLOR_EXT = 0x81F9;
const GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
const GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
const GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
const GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GL_FRAMEBUFFER_DEFAULT = 0x8218;
const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219;
const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const GL_MAJOR_VERSION = 0x821B;
const GL_MINOR_VERSION = 0x821C;
const GL_NUM_EXTENSIONS = 0x821D;
const GL_CONTEXT_FLAGS = 0x821E;
const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
const GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821F;
const GL_BUFFER_STORAGE_FLAGS = 0x8220;
const GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220;
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221;
const GL_INDEX = 0x8222;
const GL_COMPRESSED_RED = 0x8225;
const GL_COMPRESSED_RG = 0x8226;
const GL_RG = 0x8227;
const GL_RG_EXT = 0x8227;
const GL_RG_INTEGER = 0x8228;
const GL_R8 = 0x8229;
const GL_R8_EXT = 0x8229;
const GL_R16 = 0x822A;
const GL_R16_EXT = 0x822A;
const GL_RG8 = 0x822B;
const GL_RG8_EXT = 0x822B;
const GL_RG16 = 0x822C;
const GL_RG16_EXT = 0x822C;
const GL_R16F = 0x822D;
const GL_R16F_EXT = 0x822D;
const GL_R32F = 0x822E;
const GL_R32F_EXT = 0x822E;
const GL_RG16F = 0x822F;
const GL_RG16F_EXT = 0x822F;
const GL_RG32F = 0x8230;
const GL_RG32F_EXT = 0x8230;
const GL_R8I = 0x8231;
const GL_R8UI = 0x8232;
const GL_R16I = 0x8233;
const GL_R16UI = 0x8234;
const GL_R32I = 0x8235;
const GL_R32UI = 0x8236;
const GL_RG8I = 0x8237;
const GL_RG8UI = 0x8238;
const GL_RG16I = 0x8239;
const GL_RG16UI = 0x823A;
const GL_RG32I = 0x823B;
const GL_RG32UI = 0x823C;
const GL_SYNC_CL_EVENT_ARB = 0x8240;
const GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
const GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
const GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
const GL_DEBUG_SOURCE_API = 0x8246;
const GL_DEBUG_SOURCE_API_ARB = 0x8246;
const GL_DEBUG_SOURCE_API_KHR = 0x8246;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
const GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
const GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
const GL_DEBUG_SOURCE_OTHER = 0x824B;
const GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
const GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
const GL_DEBUG_TYPE_ERROR = 0x824C;
const GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
const GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
const GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
const GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
const GL_DEBUG_TYPE_OTHER = 0x8251;
const GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
const GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
const GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
const GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252;
const GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
const GL_GUILTY_CONTEXT_RESET = 0x8253;
const GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
const GL_GUILTY_CONTEXT_RESET_EXT = 0x8253;
const GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
const GL_INNOCENT_CONTEXT_RESET = 0x8254;
const GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
const GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254;
const GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
const GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
const GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255;
const GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
const GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
const GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256;
const GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GL_PROGRAM_SEPARABLE = 0x8258;
const GL_PROGRAM_SEPARABLE_EXT = 0x8258;
const GL_ACTIVE_PROGRAM = 0x8259;
const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
const GL_MAX_VIEWPORTS = 0x825B;
const GL_MAX_VIEWPORTS_NV = 0x825B;
const GL_MAX_VIEWPORTS_OES = 0x825B;
const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const GL_VIEWPORT_SUBPIXEL_BITS_EXT = 0x825C;
const GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825C;
const GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x825C;
const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const GL_VIEWPORT_BOUNDS_RANGE_EXT = 0x825D;
const GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825D;
const GL_VIEWPORT_BOUNDS_RANGE_OES = 0x825D;
const GL_LAYER_PROVOKING_VERTEX = 0x825E;
const GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E;
const GL_LAYER_PROVOKING_VERTEX_OES = 0x825E;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825F;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825F;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825F;
const GL_UNDEFINED_VERTEX = 0x8260;
const GL_UNDEFINED_VERTEX_EXT = 0x8260;
const GL_UNDEFINED_VERTEX_OES = 0x8260;
const GL_NO_RESET_NOTIFICATION = 0x8261;
const GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
const GL_NO_RESET_NOTIFICATION_EXT = 0x8261;
const GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const GL_DEBUG_TYPE_MARKER = 0x8268;
const GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const GL_INTERNALFORMAT_PREFERRED = 0x8270;
const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const GL_MAX_WIDTH = 0x827E;
const GL_MAX_HEIGHT = 0x827F;
const GL_MAX_DEPTH = 0x8280;
const GL_MAX_LAYERS = 0x8281;
const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const GL_COLOR_COMPONENTS = 0x8283;
const GL_DEPTH_COMPONENTS = 0x8284;
const GL_STENCIL_COMPONENTS = 0x8285;
const GL_COLOR_RENDERABLE = 0x8286;
const GL_DEPTH_RENDERABLE = 0x8287;
const GL_STENCIL_RENDERABLE = 0x8288;
const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GL_FRAMEBUFFER_BLEND = 0x828B;
const GL_READ_PIXELS = 0x828C;
const GL_READ_PIXELS_FORMAT = 0x828D;
const GL_READ_PIXELS_TYPE = 0x828E;
const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const GL_TEXTURE_IMAGE_TYPE = 0x8290;
const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const GL_MIPMAP = 0x8293;
const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const GL_AUTO_GENERATE_MIPMAP = 0x8295;
const GL_COLOR_ENCODING = 0x8296;
const GL_SRGB_READ = 0x8297;
const GL_SRGB_WRITE = 0x8298;
const GL_SRGB_DECODE_ARB = 0x8299;
const GL_FILTER = 0x829A;
const GL_VERTEX_TEXTURE = 0x829B;
const GL_TESS_CONTROL_TEXTURE = 0x829C;
const GL_TESS_EVALUATION_TEXTURE = 0x829D;
const GL_GEOMETRY_TEXTURE = 0x829E;
const GL_FRAGMENT_TEXTURE = 0x829F;
const GL_COMPUTE_TEXTURE = 0x82A0;
const GL_TEXTURE_SHADOW = 0x82A1;
const GL_TEXTURE_GATHER = 0x82A2;
const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const GL_SHADER_IMAGE_LOAD = 0x82A4;
const GL_SHADER_IMAGE_STORE = 0x82A5;
const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const GL_IMAGE_TEXEL_SIZE = 0x82A7;
const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const GL_IMAGE_PIXEL_TYPE = 0x82AA;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const GL_CLEAR_BUFFER = 0x82B4;
const GL_TEXTURE_VIEW = 0x82B5;
const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const GL_FULL_SUPPORT = 0x82B7;
const GL_CAVEAT_SUPPORT = 0x82B8;
const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const GL_VIEW_CLASS_128_BITS = 0x82C4;
const GL_VIEW_CLASS_96_BITS = 0x82C5;
const GL_VIEW_CLASS_64_BITS = 0x82C6;
const GL_VIEW_CLASS_48_BITS = 0x82C7;
const GL_VIEW_CLASS_32_BITS = 0x82C8;
const GL_VIEW_CLASS_24_BITS = 0x82C9;
const GL_VIEW_CLASS_16_BITS = 0x82CA;
const GL_VIEW_CLASS_8_BITS = 0x82CB;
const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const GL_VERTEX_BINDING_OFFSET = 0x82D7;
const GL_VERTEX_BINDING_STRIDE = 0x82D8;
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB;
const GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DB;
const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC;
const GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DC;
const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD;
const GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x82DD;
const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE;
const GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DE;
const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const GL_BUFFER = 0x82E0;
const GL_BUFFER_KHR = 0x82E0;
const GL_SHADER = 0x82E1;
const GL_SHADER_KHR = 0x82E1;
const GL_PROGRAM = 0x82E2;
const GL_PROGRAM_KHR = 0x82E2;
const GL_QUERY = 0x82E3;
const GL_QUERY_KHR = 0x82E3;
const GL_PROGRAM_PIPELINE = 0x82E4;
const GL_PROGRAM_PIPELINE_KHR = 0x82E4;
const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
const GL_SAMPLER = 0x82E6;
const GL_SAMPLER_KHR = 0x82E6;
const GL_DISPLAY_LIST = 0x82E7;
const GL_MAX_LABEL_LENGTH = 0x82E8;
const GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const GL_QUERY_TARGET = 0x82EA;
const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
const GL_VERTICES_SUBMITTED = 0x82EE;
const GL_VERTICES_SUBMITTED_ARB = 0x82EE;
const GL_PRIMITIVES_SUBMITTED = 0x82EF;
const GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
const GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
const GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
const GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
const GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
const GL_MAX_CULL_DISTANCES = 0x82F9;
const GL_MAX_CULL_DISTANCES_EXT = 0x82F9;
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FA;
const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
const GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
const GL_ROBUST_GPU_TIMEOUT_MS_KHR = 0x82FD;
const GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
const GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
const GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
const GL_FRAGMENTS_INSTRUMENT_SGIX = 0x8313;
const GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314;
const GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315;
const GL_CONVOLUTION_HINT_SGIX = 0x8316;
const GL_YCRCB_SGIX = 0x8318;
const GL_YCRCBA_SGIX = 0x8319;
const GL_UNPACK_COMPRESSED_SIZE_SGIX = 0x831A;
const GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B;
const GL_PACK_COMPRESSED_SIZE_SGIX = 0x831C;
const GL_SLIM8U_SGIX = 0x831D;
const GL_SLIM10U_SGIX = 0x831E;
const GL_SLIM12S_SGIX = 0x831F;
const GL_ALPHA_MIN_SGIX = 0x8320;
const GL_ALPHA_MAX_SGIX = 0x8321;
const GL_SCALEBIAS_HINT_SGIX = 0x8322;
const GL_ASYNC_MARKER_SGIX = 0x8329;
const GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
const GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
const GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
const GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
const GL_PIXEL_MAG_FILTER_EXT = 0x8331;
const GL_PIXEL_MIN_FILTER_EXT = 0x8332;
const GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
const GL_CUBIC_EXT = 0x8334;
const GL_AVERAGE_EXT = 0x8335;
const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
const GL_FRAGMENT_MATERIAL_EXT = 0x8349;
const GL_FRAGMENT_NORMAL_EXT = 0x834A;
const GL_FRAGMENT_COLOR_EXT = 0x834C;
const GL_ATTENUATION_EXT = 0x834D;
const GL_SHADOW_ATTENUATION_EXT = 0x834E;
const GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
const GL_TEXTURE_LIGHT_EXT = 0x8350;
const GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
const GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
const GL_PIXEL_TEXTURE_SGIS = 0x8353;
const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
const GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
const GL_LINE_QUALITY_HINT_SGIX = 0x835B;
const GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
const GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
const GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
const GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
const GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
const GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
const GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
const GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
const GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
const GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
const GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
const GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
const GL_MIRRORED_REPEAT = 0x8370;
const GL_MIRRORED_REPEAT_ARB = 0x8370;
const GL_MIRRORED_REPEAT_IBM = 0x8370;
const GL_MIRRORED_REPEAT_OES = 0x8370;
const GL_RGB_S3TC = 0x83A0;
const GL_RGB4_S3TC = 0x83A1;
const GL_RGBA_S3TC = 0x83A2;
const GL_RGBA4_S3TC = 0x83A3;
const GL_RGBA_DXT5_S3TC = 0x83A4;
const GL_RGBA4_DXT5_S3TC = 0x83A5;
const GL_VERTEX_PRECLIP_SGIX = 0x83EE;
const GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2;
const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3;
const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
const GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
const GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
const GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
const GL_PERFQUERY_WAIT_INTEL = 0x83FB;
const GL_BLACKHOLE_RENDER_INTEL = 0x83FC;
const GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
const GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
const GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
const GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
const GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
const GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
const GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
const GL_LIGHT_ENV_MODE_SGIX = 0x8407;
const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
const GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
const GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
const GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
const GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
const GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
const GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
const GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
const GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
const GL_PACK_RESAMPLE_SGIX = 0x842E;
const GL_UNPACK_RESAMPLE_SGIX = 0x842F;
const GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
const GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
const GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
const GL_TANGENT_ARRAY_EXT = 0x8439;
const GL_BINORMAL_ARRAY_EXT = 0x843A;
const GL_CURRENT_TANGENT_EXT = 0x843B;
const GL_CURRENT_BINORMAL_EXT = 0x843C;
const GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
const GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
const GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
const GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
const GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
const GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
const GL_MAP1_TANGENT_EXT = 0x8444;
const GL_MAP2_TANGENT_EXT = 0x8445;
const GL_MAP1_BINORMAL_EXT = 0x8446;
const GL_MAP2_BINORMAL_EXT = 0x8447;
const GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
const GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
const GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
const GL_FOG_COORDINATE_SOURCE = 0x8450;
const GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
const GL_FOG_COORD_SRC = 0x8450;
const GL_FOG_COORDINATE = 0x8451;
const GL_FOG_COORDINATE_EXT = 0x8451;
const GL_FOG_COORD = 0x8451;
const GL_FRAGMENT_DEPTH = 0x8452;
const GL_FRAGMENT_DEPTH_EXT = 0x8452;
const GL_CURRENT_FOG_COORDINATE = 0x8453;
const GL_CURRENT_FOG_COORD = 0x8453;
const GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
const GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
const GL_FOG_COORD_ARRAY_TYPE = 0x8454;
const GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
const GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
const GL_FOG_COORD_ARRAY_POINTER = 0x8456;
const GL_FOG_COORDINATE_ARRAY = 0x8457;
const GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
const GL_FOG_COORD_ARRAY = 0x8457;
const GL_COLOR_SUM = 0x8458;
const GL_COLOR_SUM_ARB = 0x8458;
const GL_COLOR_SUM_EXT = 0x8458;
const GL_CURRENT_SECONDARY_COLOR = 0x8459;
const GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
const GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
const GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
const GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
const GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
const GL_SECONDARY_COLOR_ARRAY = 0x845E;
const GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
const GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
const GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
const GL_SCREEN_COORDINATES_REND = 0x8490;
const GL_INVERTED_SCREEN_W_REND = 0x8491;
const GL_TEXTURE0 = 0x84C0;
const GL_TEXTURE0_ARB = 0x84C0;
const GL_TEXTURE1 = 0x84C1;
const GL_TEXTURE1_ARB = 0x84C1;
const GL_TEXTURE2 = 0x84C2;
const GL_TEXTURE2_ARB = 0x84C2;
const GL_TEXTURE3 = 0x84C3;
const GL_TEXTURE3_ARB = 0x84C3;
const GL_TEXTURE4 = 0x84C4;
const GL_TEXTURE4_ARB = 0x84C4;
const GL_TEXTURE5 = 0x84C5;
const GL_TEXTURE5_ARB = 0x84C5;
const GL_TEXTURE6 = 0x84C6;
const GL_TEXTURE6_ARB = 0x84C6;
const GL_TEXTURE7 = 0x84C7;
const GL_TEXTURE7_ARB = 0x84C7;
const GL_TEXTURE8 = 0x84C8;
const GL_TEXTURE8_ARB = 0x84C8;
const GL_TEXTURE9 = 0x84C9;
const GL_TEXTURE9_ARB = 0x84C9;
const GL_TEXTURE10 = 0x84CA;
const GL_TEXTURE10_ARB = 0x84CA;
const GL_TEXTURE11 = 0x84CB;
const GL_TEXTURE11_ARB = 0x84CB;
const GL_TEXTURE12 = 0x84CC;
const GL_TEXTURE12_ARB = 0x84CC;
const GL_TEXTURE13 = 0x84CD;
const GL_TEXTURE13_ARB = 0x84CD;
const GL_TEXTURE14 = 0x84CE;
const GL_TEXTURE14_ARB = 0x84CE;
const GL_TEXTURE15 = 0x84CF;
const GL_TEXTURE15_ARB = 0x84CF;
const GL_TEXTURE16 = 0x84D0;
const GL_TEXTURE16_ARB = 0x84D0;
const GL_TEXTURE17 = 0x84D1;
const GL_TEXTURE17_ARB = 0x84D1;
const GL_TEXTURE18 = 0x84D2;
const GL_TEXTURE18_ARB = 0x84D2;
const GL_TEXTURE19 = 0x84D3;
const GL_TEXTURE19_ARB = 0x84D3;
const GL_TEXTURE20 = 0x84D4;
const GL_TEXTURE20_ARB = 0x84D4;
const GL_TEXTURE21 = 0x84D5;
const GL_TEXTURE21_ARB = 0x84D5;
const GL_TEXTURE22 = 0x84D6;
const GL_TEXTURE22_ARB = 0x84D6;
const GL_TEXTURE23 = 0x84D7;
const GL_TEXTURE23_ARB = 0x84D7;
const GL_TEXTURE24 = 0x84D8;
const GL_TEXTURE24_ARB = 0x84D8;
const GL_TEXTURE25 = 0x84D9;
const GL_TEXTURE25_ARB = 0x84D9;
const GL_TEXTURE26 = 0x84DA;
const GL_TEXTURE26_ARB = 0x84DA;
const GL_TEXTURE27 = 0x84DB;
const GL_TEXTURE27_ARB = 0x84DB;
const GL_TEXTURE28 = 0x84DC;
const GL_TEXTURE28_ARB = 0x84DC;
const GL_TEXTURE29 = 0x84DD;
const GL_TEXTURE29_ARB = 0x84DD;
const GL_TEXTURE30 = 0x84DE;
const GL_TEXTURE30_ARB = 0x84DE;
const GL_TEXTURE31 = 0x84DF;
const GL_TEXTURE31_ARB = 0x84DF;
const GL_ACTIVE_TEXTURE = 0x84E0;
const GL_ACTIVE_TEXTURE_ARB = 0x84E0;
const GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
const GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
const GL_MAX_TEXTURE_UNITS = 0x84E2;
const GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
const GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
const GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
const GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
const GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
const GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
const GL_SUBTRACT = 0x84E7;
const GL_SUBTRACT_ARB = 0x84E7;
const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
const GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8;
const GL_COMPRESSED_ALPHA = 0x84E9;
const GL_COMPRESSED_ALPHA_ARB = 0x84E9;
const GL_COMPRESSED_LUMINANCE = 0x84EA;
const GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
const GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
const GL_COMPRESSED_INTENSITY = 0x84EC;
const GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
const GL_COMPRESSED_RGB = 0x84ED;
const GL_COMPRESSED_RGB_ARB = 0x84ED;
const GL_COMPRESSED_RGBA = 0x84EE;
const GL_COMPRESSED_RGBA_ARB = 0x84EE;
const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
const GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const GL_ALL_COMPLETED_NV = 0x84F2;
const GL_FENCE_STATUS_NV = 0x84F3;
const GL_FENCE_CONDITION_NV = 0x84F4;
const GL_TEXTURE_RECTANGLE = 0x84F5;
const GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
const GL_TEXTURE_RECTANGLE_NV = 0x84F5;
const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
const GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
const GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
const GL_DEPTH_STENCIL = 0x84F9;
const GL_DEPTH_STENCIL_EXT = 0x84F9;
const GL_DEPTH_STENCIL_NV = 0x84F9;
const GL_DEPTH_STENCIL_OES = 0x84F9;
const GL_UNSIGNED_INT_24_8 = 0x84FA;
const GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
const GL_UNSIGNED_INT_24_8_NV = 0x84FA;
const GL_UNSIGNED_INT_24_8_OES = 0x84FA;
const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
const GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
const GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
const GL_TEXTURE_FILTER_CONTROL = 0x8500;
const GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
const GL_TEXTURE_LOD_BIAS = 0x8501;
const GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
const GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
const GL_COMBINE4_NV = 0x8503;
const GL_MAX_SHININESS_NV = 0x8504;
const GL_MAX_SPOT_EXPONENT_NV = 0x8505;
const GL_MODELVIEW1_MATRIX_EXT = 0x8506;
const GL_INCR_WRAP = 0x8507;
const GL_INCR_WRAP_EXT = 0x8507;
const GL_INCR_WRAP_OES = 0x8507;
const GL_DECR_WRAP = 0x8508;
const GL_DECR_WRAP_EXT = 0x8508;
const GL_DECR_WRAP_OES = 0x8508;
const GL_VERTEX_WEIGHTING_EXT = 0x8509;
const GL_MODELVIEW1_ARB = 0x850A;
const GL_MODELVIEW1_EXT = 0x850A;
const GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
const GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
const GL_NORMAL_MAP = 0x8511;
const GL_NORMAL_MAP_ARB = 0x8511;
const GL_NORMAL_MAP_EXT = 0x8511;
const GL_NORMAL_MAP_NV = 0x8511;
const GL_NORMAL_MAP_OES = 0x8511;
const GL_REFLECTION_MAP = 0x8512;
const GL_REFLECTION_MAP_ARB = 0x8512;
const GL_REFLECTION_MAP_EXT = 0x8512;
const GL_REFLECTION_MAP_NV = 0x8512;
const GL_REFLECTION_MAP_OES = 0x8512;
const GL_TEXTURE_CUBE_MAP = 0x8513;
const GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
const GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
const GL_TEXTURE_CUBE_MAP_OES = 0x8513;
const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
const GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
const GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A;
const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
const GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
const GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C;
const GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
const GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
const GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
const GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
const GL_REGISTER_COMBINERS_NV = 0x8522;
const GL_VARIABLE_A_NV = 0x8523;
const GL_VARIABLE_B_NV = 0x8524;
const GL_VARIABLE_C_NV = 0x8525;
const GL_VARIABLE_D_NV = 0x8526;
const GL_VARIABLE_E_NV = 0x8527;
const GL_VARIABLE_F_NV = 0x8528;
const GL_VARIABLE_G_NV = 0x8529;
const GL_CONSTANT_COLOR0_NV = 0x852A;
const GL_CONSTANT_COLOR1_NV = 0x852B;
const GL_PRIMARY_COLOR_NV = 0x852C;
const GL_SECONDARY_COLOR_NV = 0x852D;
const GL_SPARE0_NV = 0x852E;
const GL_SPARE1_NV = 0x852F;
const GL_DISCARD_NV = 0x8530;
const GL_E_TIMES_F_NV = 0x8531;
const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
const GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
const GL_PER_STAGE_CONSTANTS_NV = 0x8535;
const GL_UNSIGNED_IDENTITY_NV = 0x8536;
const GL_UNSIGNED_INVERT_NV = 0x8537;
const GL_EXPAND_NORMAL_NV = 0x8538;
const GL_EXPAND_NEGATE_NV = 0x8539;
const GL_HALF_BIAS_NORMAL_NV = 0x853A;
const GL_HALF_BIAS_NEGATE_NV = 0x853B;
const GL_SIGNED_IDENTITY_NV = 0x853C;
const GL_SIGNED_NEGATE_NV = 0x853D;
const GL_SCALE_BY_TWO_NV = 0x853E;
const GL_SCALE_BY_FOUR_NV = 0x853F;
const GL_SCALE_BY_ONE_HALF_NV = 0x8540;
const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
const GL_COMBINER_INPUT_NV = 0x8542;
const GL_COMBINER_MAPPING_NV = 0x8543;
const GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
const GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
const GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
const GL_COMBINER_MUX_SUM_NV = 0x8547;
const GL_COMBINER_SCALE_NV = 0x8548;
const GL_COMBINER_BIAS_NV = 0x8549;
const GL_COMBINER_AB_OUTPUT_NV = 0x854A;
const GL_COMBINER_CD_OUTPUT_NV = 0x854B;
const GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
const GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
const GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
const GL_COLOR_SUM_CLAMP_NV = 0x854F;
const GL_COMBINER0_NV = 0x8550;
const GL_COMBINER1_NV = 0x8551;
const GL_COMBINER2_NV = 0x8552;
const GL_COMBINER3_NV = 0x8553;
const GL_COMBINER4_NV = 0x8554;
const GL_COMBINER5_NV = 0x8555;
const GL_COMBINER6_NV = 0x8556;
const GL_COMBINER7_NV = 0x8557;
const GL_PRIMITIVE_RESTART_NV = 0x8558;
const GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
const GL_FOG_DISTANCE_MODE_NV = 0x855A;
const GL_EYE_RADIAL_NV = 0x855B;
const GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
const GL_EMBOSS_LIGHT_NV = 0x855D;
const GL_EMBOSS_CONSTANT_NV = 0x855E;
const GL_EMBOSS_MAP_NV = 0x855F;
const GL_RED_MIN_CLAMP_INGR = 0x8560;
const GL_GREEN_MIN_CLAMP_INGR = 0x8561;
const GL_BLUE_MIN_CLAMP_INGR = 0x8562;
const GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
const GL_RED_MAX_CLAMP_INGR = 0x8564;
const GL_GREEN_MAX_CLAMP_INGR = 0x8565;
const GL_BLUE_MAX_CLAMP_INGR = 0x8566;
const GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
const GL_INTERLACE_READ_INGR = 0x8568;
const GL_COMBINE = 0x8570;
const GL_COMBINE_ARB = 0x8570;
const GL_COMBINE_EXT = 0x8570;
const GL_COMBINE_RGB = 0x8571;
const GL_COMBINE_RGB_ARB = 0x8571;
const GL_COMBINE_RGB_EXT = 0x8571;
const GL_COMBINE_ALPHA = 0x8572;
const GL_COMBINE_ALPHA_ARB = 0x8572;
const GL_COMBINE_ALPHA_EXT = 0x8572;
const GL_RGB_SCALE = 0x8573;
const GL_RGB_SCALE_ARB = 0x8573;
const GL_RGB_SCALE_EXT = 0x8573;
const GL_ADD_SIGNED = 0x8574;
const GL_ADD_SIGNED_ARB = 0x8574;
const GL_ADD_SIGNED_EXT = 0x8574;
const GL_INTERPOLATE = 0x8575;
const GL_INTERPOLATE_ARB = 0x8575;
const GL_INTERPOLATE_EXT = 0x8575;
const GL_CONSTANT = 0x8576;
const GL_CONSTANT_ARB = 0x8576;
const GL_CONSTANT_EXT = 0x8576;
const GL_CONSTANT_NV = 0x8576;
const GL_PRIMARY_COLOR = 0x8577;
const GL_PRIMARY_COLOR_ARB = 0x8577;
const GL_PRIMARY_COLOR_EXT = 0x8577;
const GL_PREVIOUS = 0x8578;
const GL_PREVIOUS_ARB = 0x8578;
const GL_PREVIOUS_EXT = 0x8578;
const GL_SOURCE0_RGB = 0x8580;
const GL_SOURCE0_RGB_ARB = 0x8580;
const GL_SOURCE0_RGB_EXT = 0x8580;
const GL_SRC0_RGB = 0x8580;
const GL_SOURCE1_RGB = 0x8581;
const GL_SOURCE1_RGB_ARB = 0x8581;
const GL_SOURCE1_RGB_EXT = 0x8581;
const GL_SRC1_RGB = 0x8581;
const GL_SOURCE2_RGB = 0x8582;
const GL_SOURCE2_RGB_ARB = 0x8582;
const GL_SOURCE2_RGB_EXT = 0x8582;
const GL_SRC2_RGB = 0x8582;
const GL_SOURCE3_RGB_NV = 0x8583;
const GL_SOURCE0_ALPHA = 0x8588;
const GL_SOURCE0_ALPHA_ARB = 0x8588;
const GL_SOURCE0_ALPHA_EXT = 0x8588;
const GL_SRC0_ALPHA = 0x8588;
const GL_SOURCE1_ALPHA = 0x8589;
const GL_SOURCE1_ALPHA_ARB = 0x8589;
const GL_SOURCE1_ALPHA_EXT = 0x8589;
const GL_SRC1_ALPHA = 0x8589;
const GL_SRC1_ALPHA_EXT = 0x8589;
const GL_SOURCE2_ALPHA = 0x858A;
const GL_SOURCE2_ALPHA_ARB = 0x858A;
const GL_SOURCE2_ALPHA_EXT = 0x858A;
const GL_SRC2_ALPHA = 0x858A;
const GL_SOURCE3_ALPHA_NV = 0x858B;
const GL_OPERAND0_RGB = 0x8590;
const GL_OPERAND0_RGB_ARB = 0x8590;
const GL_OPERAND0_RGB_EXT = 0x8590;
const GL_OPERAND1_RGB = 0x8591;
const GL_OPERAND1_RGB_ARB = 0x8591;
const GL_OPERAND1_RGB_EXT = 0x8591;
const GL_OPERAND2_RGB = 0x8592;
const GL_OPERAND2_RGB_ARB = 0x8592;
const GL_OPERAND2_RGB_EXT = 0x8592;
const GL_OPERAND3_RGB_NV = 0x8593;
const GL_OPERAND0_ALPHA = 0x8598;
const GL_OPERAND0_ALPHA_ARB = 0x8598;
const GL_OPERAND0_ALPHA_EXT = 0x8598;
const GL_OPERAND1_ALPHA = 0x8599;
const GL_OPERAND1_ALPHA_ARB = 0x8599;
const GL_OPERAND1_ALPHA_EXT = 0x8599;
const GL_OPERAND2_ALPHA = 0x859A;
const GL_OPERAND2_ALPHA_ARB = 0x859A;
const GL_OPERAND2_ALPHA_EXT = 0x859A;
const GL_OPERAND3_ALPHA_NV = 0x859B;
const GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
const GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
const GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
const GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
const GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
const GL_PERTURB_EXT = 0x85AE;
const GL_TEXTURE_NORMAL_EXT = 0x85AF;
const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
const GL_TRANSFORM_HINT_APPLE = 0x85B1;
const GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
const GL_BUFFER_OBJECT_APPLE = 0x85B3;
const GL_STORAGE_CLIENT_APPLE = 0x85B4;
const GL_VERTEX_ARRAY_BINDING = 0x85B5;
const GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
const GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;
const GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
const GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
const GL_YCBCR_422_APPLE = 0x85B9;
const GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
const GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
const GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
const GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
const GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
const GL_STORAGE_PRIVATE_APPLE = 0x85BD;
const GL_STORAGE_CACHED_APPLE = 0x85BE;
const GL_STORAGE_SHARED_APPLE = 0x85BF;
const GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
const GL_R1UI_V3F_SUN = 0x85C4;
const GL_R1UI_C4UB_V3F_SUN = 0x85C5;
const GL_R1UI_C3F_V3F_SUN = 0x85C6;
const GL_R1UI_N3F_V3F_SUN = 0x85C7;
const GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
const GL_R1UI_T2F_V3F_SUN = 0x85C9;
const GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
const GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
const GL_SLICE_ACCUM_SUN = 0x85CC;
const GL_QUAD_MESH_SUN = 0x8614;
const GL_TRIANGLE_MESH_SUN = 0x8615;
const GL_VERTEX_PROGRAM_ARB = 0x8620;
const GL_VERTEX_PROGRAM_NV = 0x8620;
const GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
const GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
const GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
const GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
const GL_CURRENT_ATTRIB_NV = 0x8626;
const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
const GL_PROGRAM_LENGTH_ARB = 0x8627;
const GL_PROGRAM_LENGTH_NV = 0x8627;
const GL_PROGRAM_STRING_ARB = 0x8628;
const GL_PROGRAM_STRING_NV = 0x8628;
const GL_MODELVIEW_PROJECTION_NV = 0x8629;
const GL_IDENTITY_NV = 0x862A;
const GL_INVERSE_NV = 0x862B;
const GL_TRANSPOSE_NV = 0x862C;
const GL_INVERSE_TRANSPOSE_NV = 0x862D;
const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
const GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
const GL_MAX_TRACK_MATRICES_NV = 0x862F;
const GL_MATRIX0_NV = 0x8630;
const GL_MATRIX1_NV = 0x8631;
const GL_MATRIX2_NV = 0x8632;
const GL_MATRIX3_NV = 0x8633;
const GL_MATRIX4_NV = 0x8634;
const GL_MATRIX5_NV = 0x8635;
const GL_MATRIX6_NV = 0x8636;
const GL_MATRIX7_NV = 0x8637;
const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
const GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
const GL_CURRENT_MATRIX_ARB = 0x8641;
const GL_CURRENT_MATRIX_NV = 0x8641;
const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
const GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
const GL_PROGRAM_POINT_SIZE = 0x8642;
const GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
const GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
const GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
const GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
const GL_PROGRAM_PARAMETER_NV = 0x8644;
const GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
const GL_PROGRAM_TARGET_NV = 0x8646;
const GL_PROGRAM_RESIDENT_NV = 0x8647;
const GL_TRACK_MATRIX_NV = 0x8648;
const GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
const GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
const GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
const GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
const GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
const GL_DEPTH_CLAMP = 0x864F;
const GL_DEPTH_CLAMP_NV = 0x864F;
const GL_DEPTH_CLAMP_EXT = 0x864F;
const GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
const GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
const GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
const GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
const GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
const GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
const GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
const GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
const GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
const GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
const GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
const GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
const GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
const GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
const GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
const GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
const GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
const GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
const GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
const GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
const GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
const GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
const GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
const GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
const GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
const GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
const GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
const GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
const GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
const GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
const GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
const GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
const GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
const GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
const GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
const GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
const GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
const GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
const GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
const GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
const GL_PROGRAM_BINDING_ARB = 0x8677;
const GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
const GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
const GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
const GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
const GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
const GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
const GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
const GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
const GL_TEXTURE_COMPRESSED = 0x86A1;
const GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
const GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
const GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
const GL_MAX_VERTEX_UNITS_OES = 0x86A4;
const GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
const GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
const GL_VERTEX_BLEND_ARB = 0x86A7;
const GL_CURRENT_WEIGHT_ARB = 0x86A8;
const GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
const GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9;
const GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
const GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA;
const GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
const GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB;
const GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
const GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC;
const GL_WEIGHT_ARRAY_ARB = 0x86AD;
const GL_WEIGHT_ARRAY_OES = 0x86AD;
const GL_DOT3_RGB = 0x86AE;
const GL_DOT3_RGB_ARB = 0x86AE;
const GL_DOT3_RGBA = 0x86AF;
const GL_DOT3_RGBA_ARB = 0x86AF;
const GL_DOT3_RGBA_IMG = 0x86AF;
const GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
const GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
const GL_MULTISAMPLE_3DFX = 0x86B2;
const GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
const GL_SAMPLES_3DFX = 0x86B4;
const GL_EVAL_2D_NV = 0x86C0;
const GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
const GL_MAP_TESSELLATION_NV = 0x86C2;
const GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
const GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
const GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
const GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
const GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
const GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
const GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
const GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
const GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
const GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
const GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
const GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
const GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
const GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
const GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
const GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
const GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
const GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
const GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
const GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
const GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
const GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
const GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
const GL_SHADER_CONSISTENT_NV = 0x86DD;
const GL_TEXTURE_SHADER_NV = 0x86DE;
const GL_SHADER_OPERATION_NV = 0x86DF;
const GL_CULL_MODES_NV = 0x86E0;
const GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
const GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
const GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
const GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
const GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
const GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
const GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
const GL_CONST_EYE_NV = 0x86E5;
const GL_PASS_THROUGH_NV = 0x86E6;
const GL_CULL_FRAGMENT_NV = 0x86E7;
const GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
const GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
const GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
const GL_SURFACE_STATE_NV = 0x86EB;
const GL_DOT_PRODUCT_NV = 0x86EC;
const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
const GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
const GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
const GL_HILO_NV = 0x86F4;
const GL_DSDT_NV = 0x86F5;
const GL_DSDT_MAG_NV = 0x86F6;
const GL_DSDT_MAG_VIB_NV = 0x86F7;
const GL_HILO16_NV = 0x86F8;
const GL_SIGNED_HILO_NV = 0x86F9;
const GL_SIGNED_HILO16_NV = 0x86FA;
const GL_SIGNED_RGBA_NV = 0x86FB;
const GL_SIGNED_RGBA8_NV = 0x86FC;
const GL_SURFACE_REGISTERED_NV = 0x86FD;
const GL_SIGNED_RGB_NV = 0x86FE;
const GL_SIGNED_RGB8_NV = 0x86FF;
const GL_SURFACE_MAPPED_NV = 0x8700;
const GL_SIGNED_LUMINANCE_NV = 0x8701;
const GL_SIGNED_LUMINANCE8_NV = 0x8702;
const GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
const GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
const GL_SIGNED_ALPHA_NV = 0x8705;
const GL_SIGNED_ALPHA8_NV = 0x8706;
const GL_SIGNED_INTENSITY_NV = 0x8707;
const GL_SIGNED_INTENSITY8_NV = 0x8708;
const GL_DSDT8_NV = 0x8709;
const GL_DSDT8_MAG8_NV = 0x870A;
const GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
const GL_HI_SCALE_NV = 0x870E;
const GL_LO_SCALE_NV = 0x870F;
const GL_DS_SCALE_NV = 0x8710;
const GL_DT_SCALE_NV = 0x8711;
const GL_MAGNITUDE_SCALE_NV = 0x8712;
const GL_VIBRANCE_SCALE_NV = 0x8713;
const GL_HI_BIAS_NV = 0x8714;
const GL_LO_BIAS_NV = 0x8715;
const GL_DS_BIAS_NV = 0x8716;
const GL_DT_BIAS_NV = 0x8717;
const GL_MAGNITUDE_BIAS_NV = 0x8718;
const GL_VIBRANCE_BIAS_NV = 0x8719;
const GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
const GL_TEXTURE_HI_SIZE_NV = 0x871B;
const GL_TEXTURE_LO_SIZE_NV = 0x871C;
const GL_TEXTURE_DS_SIZE_NV = 0x871D;
const GL_TEXTURE_DT_SIZE_NV = 0x871E;
const GL_TEXTURE_MAG_SIZE_NV = 0x871F;
const GL_MODELVIEW2_ARB = 0x8722;
const GL_MODELVIEW3_ARB = 0x8723;
const GL_MODELVIEW4_ARB = 0x8724;
const GL_MODELVIEW5_ARB = 0x8725;
const GL_MODELVIEW6_ARB = 0x8726;
const GL_MODELVIEW7_ARB = 0x8727;
const GL_MODELVIEW8_ARB = 0x8728;
const GL_MODELVIEW9_ARB = 0x8729;
const GL_MODELVIEW10_ARB = 0x872A;
const GL_MODELVIEW11_ARB = 0x872B;
const GL_MODELVIEW12_ARB = 0x872C;
const GL_MODELVIEW13_ARB = 0x872D;
const GL_MODELVIEW14_ARB = 0x872E;
const GL_MODELVIEW15_ARB = 0x872F;
const GL_MODELVIEW16_ARB = 0x8730;
const GL_MODELVIEW17_ARB = 0x8731;
const GL_MODELVIEW18_ARB = 0x8732;
const GL_MODELVIEW19_ARB = 0x8733;
const GL_MODELVIEW20_ARB = 0x8734;
const GL_MODELVIEW21_ARB = 0x8735;
const GL_MODELVIEW22_ARB = 0x8736;
const GL_MODELVIEW23_ARB = 0x8737;
const GL_MODELVIEW24_ARB = 0x8738;
const GL_MODELVIEW25_ARB = 0x8739;
const GL_MODELVIEW26_ARB = 0x873A;
const GL_MODELVIEW27_ARB = 0x873B;
const GL_MODELVIEW28_ARB = 0x873C;
const GL_MODELVIEW29_ARB = 0x873D;
const GL_MODELVIEW30_ARB = 0x873E;
const GL_MODELVIEW31_ARB = 0x873F;
const GL_DOT3_RGB_EXT = 0x8740;
const GL_Z400_BINARY_AMD = 0x8740;
const GL_DOT3_RGBA_EXT = 0x8741;
const GL_PROGRAM_BINARY_LENGTH_OES = 0x8741;
const GL_PROGRAM_BINARY_LENGTH = 0x8741;
const GL_MIRROR_CLAMP_ATI = 0x8742;
const GL_MIRROR_CLAMP_EXT = 0x8742;
const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
const GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
const GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
const GL_MODULATE_ADD_ATI = 0x8744;
const GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
const GL_MODULATE_SUBTRACT_ATI = 0x8746;
const GL_SET_AMD = 0x874A;
const GL_REPLACE_VALUE_AMD = 0x874B;
const GL_STENCIL_OP_VALUE_AMD = 0x874C;
const GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
const GL_DEPTH_STENCIL_MESA = 0x8750;
const GL_UNSIGNED_INT_24_8_MESA = 0x8751;
const GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752;
const GL_UNSIGNED_SHORT_15_1_MESA = 0x8753;
const GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754;
const GL_TRACE_MASK_MESA = 0x8755;
const GL_TRACE_NAME_MESA = 0x8756;
const GL_YCBCR_MESA = 0x8757;
const GL_PACK_INVERT_MESA = 0x8758;
const GL_DEBUG_OBJECT_MESA = 0x8759;
const GL_TEXTURE_1D_STACK_MESAX = 0x8759;
const GL_DEBUG_PRINT_MESA = 0x875A;
const GL_TEXTURE_2D_STACK_MESAX = 0x875A;
const GL_DEBUG_ASSERT_MESA = 0x875B;
const GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
const GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
const GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
const GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
const GL_PROGRAM_BINARY_FORMAT_MESA = 0x875F;
const GL_STATIC_ATI = 0x8760;
const GL_DYNAMIC_ATI = 0x8761;
const GL_PRESERVE_ATI = 0x8762;
const GL_DISCARD_ATI = 0x8763;
const GL_BUFFER_SIZE = 0x8764;
const GL_BUFFER_SIZE_ARB = 0x8764;
const GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
const GL_BUFFER_USAGE = 0x8765;
const GL_BUFFER_USAGE_ARB = 0x8765;
const GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
const GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
const GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
const GL_ELEMENT_ARRAY_ATI = 0x8768;
const GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
const GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
const GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
const GL_VERTEX_STREAM0_ATI = 0x876C;
const GL_VERTEX_STREAM1_ATI = 0x876D;
const GL_VERTEX_STREAM2_ATI = 0x876E;
const GL_VERTEX_STREAM3_ATI = 0x876F;
const GL_VERTEX_STREAM4_ATI = 0x8770;
const GL_VERTEX_STREAM5_ATI = 0x8771;
const GL_VERTEX_STREAM6_ATI = 0x8772;
const GL_VERTEX_STREAM7_ATI = 0x8773;
const GL_VERTEX_SOURCE_ATI = 0x8774;
const GL_BUMP_ROT_MATRIX_ATI = 0x8775;
const GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
const GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
const GL_BUMP_TEX_UNITS_ATI = 0x8778;
const GL_DUDV_ATI = 0x8779;
const GL_DU8DV8_ATI = 0x877A;
const GL_BUMP_ENVMAP_ATI = 0x877B;
const GL_BUMP_TARGET_ATI = 0x877C;
const GL_VERTEX_SHADER_EXT = 0x8780;
const GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
const GL_OP_INDEX_EXT = 0x8782;
const GL_OP_NEGATE_EXT = 0x8783;
const GL_OP_DOT3_EXT = 0x8784;
const GL_OP_DOT4_EXT = 0x8785;
const GL_OP_MUL_EXT = 0x8786;
const GL_OP_ADD_EXT = 0x8787;
const GL_OP_MADD_EXT = 0x8788;
const GL_OP_FRAC_EXT = 0x8789;
const GL_OP_MAX_EXT = 0x878A;
const GL_OP_MIN_EXT = 0x878B;
const GL_OP_SET_GE_EXT = 0x878C;
const GL_OP_SET_LT_EXT = 0x878D;
const GL_OP_CLAMP_EXT = 0x878E;
const GL_OP_FLOOR_EXT = 0x878F;
const GL_OP_ROUND_EXT = 0x8790;
const GL_OP_EXP_BASE_2_EXT = 0x8791;
const GL_OP_LOG_BASE_2_EXT = 0x8792;
const GL_OP_POWER_EXT = 0x8793;
const GL_OP_RECIP_EXT = 0x8794;
const GL_OP_RECIP_SQRT_EXT = 0x8795;
const GL_OP_SUB_EXT = 0x8796;
const GL_OP_CROSS_PRODUCT_EXT = 0x8797;
const GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
const GL_OP_MOV_EXT = 0x8799;
const GL_OUTPUT_VERTEX_EXT = 0x879A;
const GL_OUTPUT_COLOR0_EXT = 0x879B;
const GL_OUTPUT_COLOR1_EXT = 0x879C;
const GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
const GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
const GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
const GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
const GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
const GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
const GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
const GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
const GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
const GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
const GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
const GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
const GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
const GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
const GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
const GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
const GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
const GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
const GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
const GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
const GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
const GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
const GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
const GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
const GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
const GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
const GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
const GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
const GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
const GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
const GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
const GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
const GL_OUTPUT_FOG_EXT = 0x87BD;
const GL_SCALAR_EXT = 0x87BE;
const GL_VECTOR_EXT = 0x87BF;
const GL_MATRIX_EXT = 0x87C0;
const GL_VARIANT_EXT = 0x87C1;
const GL_INVARIANT_EXT = 0x87C2;
const GL_LOCAL_CONSTANT_EXT = 0x87C3;
const GL_LOCAL_EXT = 0x87C4;
const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
const GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
const GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
const GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
const GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
const GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
const GL_X_EXT = 0x87D5;
const GL_Y_EXT = 0x87D6;
const GL_Z_EXT = 0x87D7;
const GL_W_EXT = 0x87D8;
const GL_NEGATIVE_X_EXT = 0x87D9;
const GL_NEGATIVE_Y_EXT = 0x87DA;
const GL_NEGATIVE_Z_EXT = 0x87DB;
const GL_NEGATIVE_W_EXT = 0x87DC;
const GL_ZERO_EXT = 0x87DD;
const GL_ONE_EXT = 0x87DE;
const GL_NEGATIVE_ONE_EXT = 0x87DF;
const GL_NORMALIZED_RANGE_EXT = 0x87E0;
const GL_FULL_RANGE_EXT = 0x87E1;
const GL_CURRENT_VERTEX_EXT = 0x87E2;
const GL_MVP_MATRIX_EXT = 0x87E3;
const GL_VARIANT_VALUE_EXT = 0x87E4;
const GL_VARIANT_DATATYPE_EXT = 0x87E5;
const GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
const GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
const GL_VARIANT_ARRAY_EXT = 0x87E8;
const GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
const GL_INVARIANT_VALUE_EXT = 0x87EA;
const GL_INVARIANT_DATATYPE_EXT = 0x87EB;
const GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
const GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
const GL_PN_TRIANGLES_ATI = 0x87F0;
const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
const GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
const GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
const GL_3DC_X_AMD = 0x87F9;
const GL_3DC_XY_AMD = 0x87FA;
const GL_VBO_FREE_MEMORY_ATI = 0x87FB;
const GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
const GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE;
const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF;
const GL_STENCIL_BACK_FUNC = 0x8800;
const GL_STENCIL_BACK_FUNC_ATI = 0x8800;
const GL_STENCIL_BACK_FAIL = 0x8801;
const GL_STENCIL_BACK_FAIL_ATI = 0x8801;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
const GL_FRAGMENT_PROGRAM_ARB = 0x8804;
const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
const GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
const GL_RGBA32F = 0x8814;
const GL_RGBA32F_ARB = 0x8814;
const GL_RGBA32F_EXT = 0x8814;
const GL_RGBA_FLOAT32_APPLE = 0x8814;
const GL_RGBA_FLOAT32_ATI = 0x8814;
const GL_RGB32F = 0x8815;
const GL_RGB32F_ARB = 0x8815;
const GL_RGB32F_EXT = 0x8815;
const GL_RGB_FLOAT32_APPLE = 0x8815;
const GL_RGB_FLOAT32_ATI = 0x8815;
const GL_ALPHA32F_ARB = 0x8816;
const GL_ALPHA32F_EXT = 0x8816;
const GL_ALPHA_FLOAT32_APPLE = 0x8816;
const GL_ALPHA_FLOAT32_ATI = 0x8816;
const GL_INTENSITY32F_ARB = 0x8817;
const GL_INTENSITY_FLOAT32_APPLE = 0x8817;
const GL_INTENSITY_FLOAT32_ATI = 0x8817;
const GL_LUMINANCE32F_ARB = 0x8818;
const GL_LUMINANCE32F_EXT = 0x8818;
const GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
const GL_LUMINANCE_FLOAT32_ATI = 0x8818;
const GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
const GL_LUMINANCE_ALPHA32F_EXT = 0x8819;
const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
const GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
const GL_RGBA16F = 0x881A;
const GL_RGBA16F_ARB = 0x881A;
const GL_RGBA16F_EXT = 0x881A;
const GL_RGBA_FLOAT16_APPLE = 0x881A;
const GL_RGBA_FLOAT16_ATI = 0x881A;
const GL_RGB16F = 0x881B;
const GL_RGB16F_ARB = 0x881B;
const GL_RGB16F_EXT = 0x881B;
const GL_RGB_FLOAT16_APPLE = 0x881B;
const GL_RGB_FLOAT16_ATI = 0x881B;
const GL_ALPHA16F_ARB = 0x881C;
const GL_ALPHA16F_EXT = 0x881C;
const GL_ALPHA_FLOAT16_APPLE = 0x881C;
const GL_ALPHA_FLOAT16_ATI = 0x881C;
const GL_INTENSITY16F_ARB = 0x881D;
const GL_INTENSITY_FLOAT16_APPLE = 0x881D;
const GL_INTENSITY_FLOAT16_ATI = 0x881D;
const GL_LUMINANCE16F_ARB = 0x881E;
const GL_LUMINANCE16F_EXT = 0x881E;
const GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
const GL_LUMINANCE_FLOAT16_ATI = 0x881E;
const GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
const GL_LUMINANCE_ALPHA16F_EXT = 0x881F;
const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
const GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
const GL_RGBA_FLOAT_MODE_ARB = 0x8820;
const GL_RGBA_FLOAT_MODE_ATI = 0x8820;
const GL_WRITEONLY_RENDERING_QCOM = 0x8823;
const GL_MAX_DRAW_BUFFERS = 0x8824;
const GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
const GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
const GL_MAX_DRAW_BUFFERS_EXT = 0x8824;
const GL_MAX_DRAW_BUFFERS_NV = 0x8824;
const GL_DRAW_BUFFER0 = 0x8825;
const GL_DRAW_BUFFER0_ARB = 0x8825;
const GL_DRAW_BUFFER0_ATI = 0x8825;
const GL_DRAW_BUFFER0_EXT = 0x8825;
const GL_DRAW_BUFFER0_NV = 0x8825;
const GL_DRAW_BUFFER1 = 0x8826;
const GL_DRAW_BUFFER1_ARB = 0x8826;
const GL_DRAW_BUFFER1_ATI = 0x8826;
const GL_DRAW_BUFFER1_EXT = 0x8826;
const GL_DRAW_BUFFER1_NV = 0x8826;
const GL_DRAW_BUFFER2 = 0x8827;
const GL_DRAW_BUFFER2_ARB = 0x8827;
const GL_DRAW_BUFFER2_ATI = 0x8827;
const GL_DRAW_BUFFER2_EXT = 0x8827;
const GL_DRAW_BUFFER2_NV = 0x8827;
const GL_DRAW_BUFFER3 = 0x8828;
const GL_DRAW_BUFFER3_ARB = 0x8828;
const GL_DRAW_BUFFER3_ATI = 0x8828;
const GL_DRAW_BUFFER3_EXT = 0x8828;
const GL_DRAW_BUFFER3_NV = 0x8828;
const GL_DRAW_BUFFER4 = 0x8829;
const GL_DRAW_BUFFER4_ARB = 0x8829;
const GL_DRAW_BUFFER4_ATI = 0x8829;
const GL_DRAW_BUFFER4_EXT = 0x8829;
const GL_DRAW_BUFFER4_NV = 0x8829;
const GL_DRAW_BUFFER5 = 0x882A;
const GL_DRAW_BUFFER5_ARB = 0x882A;
const GL_DRAW_BUFFER5_ATI = 0x882A;
const GL_DRAW_BUFFER5_EXT = 0x882A;
const GL_DRAW_BUFFER5_NV = 0x882A;
const GL_DRAW_BUFFER6 = 0x882B;
const GL_DRAW_BUFFER6_ARB = 0x882B;
const GL_DRAW_BUFFER6_ATI = 0x882B;
const GL_DRAW_BUFFER6_EXT = 0x882B;
const GL_DRAW_BUFFER6_NV = 0x882B;
const GL_DRAW_BUFFER7 = 0x882C;
const GL_DRAW_BUFFER7_ARB = 0x882C;
const GL_DRAW_BUFFER7_ATI = 0x882C;
const GL_DRAW_BUFFER7_EXT = 0x882C;
const GL_DRAW_BUFFER7_NV = 0x882C;
const GL_DRAW_BUFFER8 = 0x882D;
const GL_DRAW_BUFFER8_ARB = 0x882D;
const GL_DRAW_BUFFER8_ATI = 0x882D;
const GL_DRAW_BUFFER8_EXT = 0x882D;
const GL_DRAW_BUFFER8_NV = 0x882D;
const GL_DRAW_BUFFER9 = 0x882E;
const GL_DRAW_BUFFER9_ARB = 0x882E;
const GL_DRAW_BUFFER9_ATI = 0x882E;
const GL_DRAW_BUFFER9_EXT = 0x882E;
const GL_DRAW_BUFFER9_NV = 0x882E;
const GL_DRAW_BUFFER10 = 0x882F;
const GL_DRAW_BUFFER10_ARB = 0x882F;
const GL_DRAW_BUFFER10_ATI = 0x882F;
const GL_DRAW_BUFFER10_EXT = 0x882F;
const GL_DRAW_BUFFER10_NV = 0x882F;
const GL_DRAW_BUFFER11 = 0x8830;
const GL_DRAW_BUFFER11_ARB = 0x8830;
const GL_DRAW_BUFFER11_ATI = 0x8830;
const GL_DRAW_BUFFER11_EXT = 0x8830;
const GL_DRAW_BUFFER11_NV = 0x8830;
const GL_DRAW_BUFFER12 = 0x8831;
const GL_DRAW_BUFFER12_ARB = 0x8831;
const GL_DRAW_BUFFER12_ATI = 0x8831;
const GL_DRAW_BUFFER12_EXT = 0x8831;
const GL_DRAW_BUFFER12_NV = 0x8831;
const GL_DRAW_BUFFER13 = 0x8832;
const GL_DRAW_BUFFER13_ARB = 0x8832;
const GL_DRAW_BUFFER13_ATI = 0x8832;
const GL_DRAW_BUFFER13_EXT = 0x8832;
const GL_DRAW_BUFFER13_NV = 0x8832;
const GL_DRAW_BUFFER14 = 0x8833;
const GL_DRAW_BUFFER14_ARB = 0x8833;
const GL_DRAW_BUFFER14_ATI = 0x8833;
const GL_DRAW_BUFFER14_EXT = 0x8833;
const GL_DRAW_BUFFER14_NV = 0x8833;
const GL_DRAW_BUFFER15 = 0x8834;
const GL_DRAW_BUFFER15_ARB = 0x8834;
const GL_DRAW_BUFFER15_ATI = 0x8834;
const GL_DRAW_BUFFER15_EXT = 0x8834;
const GL_DRAW_BUFFER15_NV = 0x8834;
const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837;
const GL_BLEND_EQUATION_ALPHA = 0x883D;
const GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
const GL_BLEND_EQUATION_ALPHA_OES = 0x883D;
const GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
const GL_MATRIX_PALETTE_ARB = 0x8840;
const GL_MATRIX_PALETTE_OES = 0x8840;
const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
const GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
const GL_MAX_PALETTE_MATRICES_OES = 0x8842;
const GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
const GL_CURRENT_PALETTE_MATRIX_OES = 0x8843;
const GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
const GL_MATRIX_INDEX_ARRAY_OES = 0x8844;
const GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
const GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846;
const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
const GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847;
const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
const GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848;
const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
const GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849;
const GL_TEXTURE_DEPTH_SIZE = 0x884A;
const GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
const GL_DEPTH_TEXTURE_MODE = 0x884B;
const GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
const GL_TEXTURE_COMPARE_MODE = 0x884C;
const GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
const GL_TEXTURE_COMPARE_MODE_EXT = 0x884C;
const GL_TEXTURE_COMPARE_FUNC = 0x884D;
const GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
const GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D;
const GL_COMPARE_R_TO_TEXTURE = 0x884E;
const GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
const GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E;
const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
const GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
const GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
const GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
const GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
const GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
const GL_HILO8_NV = 0x885E;
const GL_SIGNED_HILO8_NV = 0x885F;
const GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
const GL_POINT_SPRITE = 0x8861;
const GL_POINT_SPRITE_ARB = 0x8861;
const GL_POINT_SPRITE_NV = 0x8861;
const GL_POINT_SPRITE_OES = 0x8861;
const GL_COORD_REPLACE = 0x8862;
const GL_COORD_REPLACE_ARB = 0x8862;
const GL_COORD_REPLACE_NV = 0x8862;
const GL_COORD_REPLACE_OES = 0x8862;
const GL_POINT_SPRITE_R_MODE_NV = 0x8863;
const GL_PIXEL_COUNTER_BITS_NV = 0x8864;
const GL_QUERY_COUNTER_BITS = 0x8864;
const GL_QUERY_COUNTER_BITS_ARB = 0x8864;
const GL_QUERY_COUNTER_BITS_EXT = 0x8864;
const GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
const GL_CURRENT_QUERY = 0x8865;
const GL_CURRENT_QUERY_ARB = 0x8865;
const GL_CURRENT_QUERY_EXT = 0x8865;
const GL_PIXEL_COUNT_NV = 0x8866;
const GL_QUERY_RESULT = 0x8866;
const GL_QUERY_RESULT_ARB = 0x8866;
const GL_QUERY_RESULT_EXT = 0x8866;
const GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
const GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
const GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
const GL_MAX_VERTEX_ATTRIBS = 0x8869;
const GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886C;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886D;
const GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
const GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
const GL_FRAGMENT_PROGRAM_NV = 0x8870;
const GL_MAX_TEXTURE_COORDS = 0x8871;
const GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
const GL_MAX_TEXTURE_COORDS_NV = 0x8871;
const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
const GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
const GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
const GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
const GL_PROGRAM_ERROR_STRING_NV = 0x8874;
const GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
const GL_PROGRAM_FORMAT_ARB = 0x8876;
const GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
const GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F;
const GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887F;
const GL_FLOAT_R_NV = 0x8880;
const GL_FLOAT_RG_NV = 0x8881;
const GL_FLOAT_RGB_NV = 0x8882;
const GL_FLOAT_RGBA_NV = 0x8883;
const GL_FLOAT_R16_NV = 0x8884;
const GL_FLOAT_R32_NV = 0x8885;
const GL_FLOAT_RG16_NV = 0x8886;
const GL_FLOAT_RG32_NV = 0x8887;
const GL_FLOAT_RGB16_NV = 0x8888;
const GL_FLOAT_RGB32_NV = 0x8889;
const GL_FLOAT_RGBA16_NV = 0x888A;
const GL_FLOAT_RGBA32_NV = 0x888B;
const GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
const GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
const GL_FLOAT_RGBA_MODE_NV = 0x888E;
const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
const GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
const GL_DEPTH_BOUNDS_EXT = 0x8891;
const GL_ARRAY_BUFFER = 0x8892;
const GL_ARRAY_BUFFER_ARB = 0x8892;
const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
const GL_ARRAY_BUFFER_BINDING = 0x8894;
const GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
const GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
const GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
const GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
const GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
const GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
const GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E;
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
const GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
const GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
const GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
const GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
const GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
const GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
const GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
const GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
const GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
const GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
const GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
const GL_READ_ONLY = 0x88B8;
const GL_READ_ONLY_ARB = 0x88B8;
const GL_WRITE_ONLY = 0x88B9;
const GL_WRITE_ONLY_ARB = 0x88B9;
const GL_WRITE_ONLY_OES = 0x88B9;
const GL_READ_WRITE = 0x88BA;
const GL_READ_WRITE_ARB = 0x88BA;
const GL_BUFFER_ACCESS = 0x88BB;
const GL_BUFFER_ACCESS_ARB = 0x88BB;
const GL_BUFFER_ACCESS_OES = 0x88BB;
const GL_BUFFER_MAPPED = 0x88BC;
const GL_BUFFER_MAPPED_ARB = 0x88BC;
const GL_BUFFER_MAPPED_OES = 0x88BC;
const GL_BUFFER_MAP_POINTER = 0x88BD;
const GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
const GL_BUFFER_MAP_POINTER_OES = 0x88BD;
const GL_WRITE_DISCARD_NV = 0x88BE;
const GL_TIME_ELAPSED = 0x88BF;
const GL_TIME_ELAPSED_EXT = 0x88BF;
const GL_MATRIX0_ARB = 0x88C0;
const GL_MATRIX1_ARB = 0x88C1;
const GL_MATRIX2_ARB = 0x88C2;
const GL_MATRIX3_ARB = 0x88C3;
const GL_MATRIX4_ARB = 0x88C4;
const GL_MATRIX5_ARB = 0x88C5;
const GL_MATRIX6_ARB = 0x88C6;
const GL_MATRIX7_ARB = 0x88C7;
const GL_MATRIX8_ARB = 0x88C8;
const GL_MATRIX9_ARB = 0x88C9;
const GL_MATRIX10_ARB = 0x88CA;
const GL_MATRIX11_ARB = 0x88CB;
const GL_MATRIX12_ARB = 0x88CC;
const GL_MATRIX13_ARB = 0x88CD;
const GL_MATRIX14_ARB = 0x88CE;
const GL_MATRIX15_ARB = 0x88CF;
const GL_MATRIX16_ARB = 0x88D0;
const GL_MATRIX17_ARB = 0x88D1;
const GL_MATRIX18_ARB = 0x88D2;
const GL_MATRIX19_ARB = 0x88D3;
const GL_MATRIX20_ARB = 0x88D4;
const GL_MATRIX21_ARB = 0x88D5;
const GL_MATRIX22_ARB = 0x88D6;
const GL_MATRIX23_ARB = 0x88D7;
const GL_MATRIX24_ARB = 0x88D8;
const GL_MATRIX25_ARB = 0x88D9;
const GL_MATRIX26_ARB = 0x88DA;
const GL_MATRIX27_ARB = 0x88DB;
const GL_MATRIX28_ARB = 0x88DC;
const GL_MATRIX29_ARB = 0x88DD;
const GL_MATRIX30_ARB = 0x88DE;
const GL_MATRIX31_ARB = 0x88DF;
const GL_STREAM_DRAW = 0x88E0;
const GL_STREAM_DRAW_ARB = 0x88E0;
const GL_STREAM_READ = 0x88E1;
const GL_STREAM_READ_ARB = 0x88E1;
const GL_STREAM_COPY = 0x88E2;
const GL_STREAM_COPY_ARB = 0x88E2;
const GL_STATIC_DRAW = 0x88E4;
const GL_STATIC_DRAW_ARB = 0x88E4;
const GL_STATIC_READ = 0x88E5;
const GL_STATIC_READ_ARB = 0x88E5;
const GL_STATIC_COPY = 0x88E6;
const GL_STATIC_COPY_ARB = 0x88E6;
const GL_DYNAMIC_DRAW = 0x88E8;
const GL_DYNAMIC_DRAW_ARB = 0x88E8;
const GL_DYNAMIC_READ = 0x88E9;
const GL_DYNAMIC_READ_ARB = 0x88E9;
const GL_DYNAMIC_COPY = 0x88EA;
const GL_DYNAMIC_COPY_ARB = 0x88EA;
const GL_PIXEL_PACK_BUFFER = 0x88EB;
const GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
const GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
const GL_PIXEL_PACK_BUFFER_NV = 0x88EB;
const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
const GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
const GL_PIXEL_UNPACK_BUFFER_NV = 0x88EC;
const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
const GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
const GL_PIXEL_PACK_BUFFER_BINDING_NV = 0x88ED;
const GL_ETC1_SRGB8_NV = 0x88EE;
const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 0x88EF;
const GL_DEPTH24_STENCIL8 = 0x88F0;
const GL_DEPTH24_STENCIL8_EXT = 0x88F0;
const GL_DEPTH24_STENCIL8_OES = 0x88F0;
const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
const GL_STENCIL_TAG_BITS_EXT = 0x88F2;
const GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
const GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
const GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
const GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
const GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
const GL_SRC1_COLOR = 0x88F9;
const GL_SRC1_COLOR_EXT = 0x88F9;
const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88FA;
const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88FB;
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FC;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE;
const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
const GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
const GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
const GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
const GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
const GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
const GL_SAMPLES_PASSED = 0x8914;
const GL_SAMPLES_PASSED_ARB = 0x8914;
const GL_GEOMETRY_VERTICES_OUT = 0x8916;
const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916;
const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916;
const GL_GEOMETRY_INPUT_TYPE = 0x8917;
const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917;
const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917;
const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918;
const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918;
const GL_SAMPLER_BINDING = 0x8919;
const GL_CLAMP_VERTEX_COLOR = 0x891A;
const GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
const GL_CLAMP_FRAGMENT_COLOR = 0x891B;
const GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
const GL_CLAMP_READ_COLOR = 0x891C;
const GL_CLAMP_READ_COLOR_ARB = 0x891C;
const GL_FIXED_ONLY = 0x891D;
const GL_FIXED_ONLY_ARB = 0x891D;
const GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
const GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
const GL_FRAGMENT_SHADER_ATI = 0x8920;
const GL_REG_0_ATI = 0x8921;
const GL_REG_1_ATI = 0x8922;
const GL_REG_2_ATI = 0x8923;
const GL_REG_3_ATI = 0x8924;
const GL_REG_4_ATI = 0x8925;
const GL_REG_5_ATI = 0x8926;
const GL_REG_6_ATI = 0x8927;
const GL_REG_7_ATI = 0x8928;
const GL_REG_8_ATI = 0x8929;
const GL_REG_9_ATI = 0x892A;
const GL_REG_10_ATI = 0x892B;
const GL_REG_11_ATI = 0x892C;
const GL_REG_12_ATI = 0x892D;
const GL_REG_13_ATI = 0x892E;
const GL_REG_14_ATI = 0x892F;
const GL_REG_15_ATI = 0x8930;
const GL_REG_16_ATI = 0x8931;
const GL_REG_17_ATI = 0x8932;
const GL_REG_18_ATI = 0x8933;
const GL_REG_19_ATI = 0x8934;
const GL_REG_20_ATI = 0x8935;
const GL_REG_21_ATI = 0x8936;
const GL_REG_22_ATI = 0x8937;
const GL_REG_23_ATI = 0x8938;
const GL_REG_24_ATI = 0x8939;
const GL_REG_25_ATI = 0x893A;
const GL_REG_26_ATI = 0x893B;
const GL_REG_27_ATI = 0x893C;
const GL_REG_28_ATI = 0x893D;
const GL_REG_29_ATI = 0x893E;
const GL_REG_30_ATI = 0x893F;
const GL_REG_31_ATI = 0x8940;
const GL_CON_0_ATI = 0x8941;
const GL_CON_1_ATI = 0x8942;
const GL_CON_2_ATI = 0x8943;
const GL_CON_3_ATI = 0x8944;
const GL_CON_4_ATI = 0x8945;
const GL_CON_5_ATI = 0x8946;
const GL_CON_6_ATI = 0x8947;
const GL_CON_7_ATI = 0x8948;
const GL_CON_8_ATI = 0x8949;
const GL_CON_9_ATI = 0x894A;
const GL_CON_10_ATI = 0x894B;
const GL_CON_11_ATI = 0x894C;
const GL_CON_12_ATI = 0x894D;
const GL_CON_13_ATI = 0x894E;
const GL_CON_14_ATI = 0x894F;
const GL_CON_15_ATI = 0x8950;
const GL_CON_16_ATI = 0x8951;
const GL_CON_17_ATI = 0x8952;
const GL_CON_18_ATI = 0x8953;
const GL_CON_19_ATI = 0x8954;
const GL_CON_20_ATI = 0x8955;
const GL_CON_21_ATI = 0x8956;
const GL_CON_22_ATI = 0x8957;
const GL_CON_23_ATI = 0x8958;
const GL_CON_24_ATI = 0x8959;
const GL_CON_25_ATI = 0x895A;
const GL_CON_26_ATI = 0x895B;
const GL_CON_27_ATI = 0x895C;
const GL_CON_28_ATI = 0x895D;
const GL_CON_29_ATI = 0x895E;
const GL_CON_30_ATI = 0x895F;
const GL_CON_31_ATI = 0x8960;
const GL_MOV_ATI = 0x8961;
const GL_ADD_ATI = 0x8963;
const GL_MUL_ATI = 0x8964;
const GL_SUB_ATI = 0x8965;
const GL_DOT3_ATI = 0x8966;
const GL_DOT4_ATI = 0x8967;
const GL_MAD_ATI = 0x8968;
const GL_LERP_ATI = 0x8969;
const GL_CND_ATI = 0x896A;
const GL_CND0_ATI = 0x896B;
const GL_DOT2_ADD_ATI = 0x896C;
const GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
const GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
const GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
const GL_NUM_PASSES_ATI = 0x8970;
const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
const GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
const GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
const GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
const GL_SWIZZLE_STR_ATI = 0x8976;
const GL_SWIZZLE_STQ_ATI = 0x8977;
const GL_SWIZZLE_STR_DR_ATI = 0x8978;
const GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
const GL_SWIZZLE_STRQ_ATI = 0x897A;
const GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
const GL_INTERLACE_OML = 0x8980;
const GL_INTERLACE_READ_OML = 0x8981;
const GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
const GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
const GL_PACK_RESAMPLE_OML = 0x8984;
const GL_UNPACK_RESAMPLE_OML = 0x8985;
const GL_RESAMPLE_REPLICATE_OML = 0x8986;
const GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
const GL_RESAMPLE_AVERAGE_OML = 0x8988;
const GL_RESAMPLE_DECIMATE_OML = 0x8989;
const GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
const GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
const GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;
const GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
const GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
const GL_DRAW_PIXELS_APPLE = 0x8A0A;
const GL_FENCE_APPLE = 0x8A0B;
const GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
const GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
const GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
const GL_COLOR_FLOAT_APPLE = 0x8A0F;
const GL_UNIFORM_BUFFER = 0x8A11;
const GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
const GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
const GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
const GL_PACK_ROW_BYTES_APPLE = 0x8A15;
const GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
const GL_RELEASED_APPLE = 0x8A19;
const GL_VOLATILE_APPLE = 0x8A1A;
const GL_RETAINED_APPLE = 0x8A1B;
const GL_UNDEFINED_APPLE = 0x8A1C;
const GL_PURGEABLE_APPLE = 0x8A1D;
const GL_RGB_422_APPLE = 0x8A1F;
const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const GL_UNIFORM_BUFFER_START = 0x8A29;
const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2C;
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32;
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const GL_UNIFORM_TYPE = 0x8A37;
const GL_UNIFORM_SIZE = 0x8A38;
const GL_UNIFORM_NAME_LENGTH = 0x8A39;
const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const GL_UNIFORM_OFFSET = 0x8A3B;
const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
const GL_DECODE_EXT = 0x8A49;
const GL_SKIP_DECODE_EXT = 0x8A4A;
const GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
const GL_RGB_RAW_422_APPLE = 0x8A51;
const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
const GL_SYNC_OBJECT_APPLE = 0x8A53;
const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54;
const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55;
const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56;
const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57;
const GL_FRAGMENT_SHADER = 0x8B30;
const GL_FRAGMENT_SHADER_ARB = 0x8B30;
const GL_VERTEX_SHADER = 0x8B31;
const GL_VERTEX_SHADER_ARB = 0x8B31;
const GL_PROGRAM_OBJECT_ARB = 0x8B40;
const GL_PROGRAM_OBJECT_EXT = 0x8B40;
const GL_SHADER_OBJECT_ARB = 0x8B48;
const GL_SHADER_OBJECT_EXT = 0x8B48;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
const GL_MAX_VARYING_FLOATS = 0x8B4B;
const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
const GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
const GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
const GL_OBJECT_TYPE_ARB = 0x8B4E;
const GL_SHADER_TYPE = 0x8B4F;
const GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
const GL_FLOAT_VEC2 = 0x8B50;
const GL_FLOAT_VEC2_ARB = 0x8B50;
const GL_FLOAT_VEC3 = 0x8B51;
const GL_FLOAT_VEC3_ARB = 0x8B51;
const GL_FLOAT_VEC4 = 0x8B52;
const GL_FLOAT_VEC4_ARB = 0x8B52;
const GL_INT_VEC2 = 0x8B53;
const GL_INT_VEC2_ARB = 0x8B53;
const GL_INT_VEC3 = 0x8B54;
const GL_INT_VEC3_ARB = 0x8B54;
const GL_INT_VEC4 = 0x8B55;
const GL_INT_VEC4_ARB = 0x8B55;
const GL_BOOL = 0x8B56;
const GL_BOOL_ARB = 0x8B56;
const GL_BOOL_VEC2 = 0x8B57;
const GL_BOOL_VEC2_ARB = 0x8B57;
const GL_BOOL_VEC3 = 0x8B58;
const GL_BOOL_VEC3_ARB = 0x8B58;
const GL_BOOL_VEC4 = 0x8B59;
const GL_BOOL_VEC4_ARB = 0x8B59;
const GL_FLOAT_MAT2 = 0x8B5A;
const GL_FLOAT_MAT2_ARB = 0x8B5A;
const GL_FLOAT_MAT3 = 0x8B5B;
const GL_FLOAT_MAT3_ARB = 0x8B5B;
const GL_FLOAT_MAT4 = 0x8B5C;
const GL_FLOAT_MAT4_ARB = 0x8B5C;
const GL_SAMPLER_1D = 0x8B5D;
const GL_SAMPLER_1D_ARB = 0x8B5D;
const GL_SAMPLER_2D = 0x8B5E;
const GL_SAMPLER_2D_ARB = 0x8B5E;
const GL_SAMPLER_3D = 0x8B5F;
const GL_SAMPLER_3D_ARB = 0x8B5F;
const GL_SAMPLER_3D_OES = 0x8B5F;
const GL_SAMPLER_CUBE = 0x8B60;
const GL_SAMPLER_CUBE_ARB = 0x8B60;
const GL_SAMPLER_1D_SHADOW = 0x8B61;
const GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
const GL_SAMPLER_2D_SHADOW = 0x8B62;
const GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
const GL_SAMPLER_2D_SHADOW_EXT = 0x8B62;
const GL_SAMPLER_2D_RECT = 0x8B63;
const GL_SAMPLER_2D_RECT_ARB = 0x8B63;
const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
const GL_FLOAT_MAT2X3 = 0x8B65;
const GL_FLOAT_MAT2X3_NV = 0x8B65;
const GL_FLOAT_MAT2X4 = 0x8B66;
const GL_FLOAT_MAT2X4_NV = 0x8B66;
const GL_FLOAT_MAT3X2 = 0x8B67;
const GL_FLOAT_MAT3X2_NV = 0x8B67;
const GL_FLOAT_MAT3X4 = 0x8B68;
const GL_FLOAT_MAT3X4_NV = 0x8B68;
const GL_FLOAT_MAT4X2 = 0x8B69;
const GL_FLOAT_MAT4X2_NV = 0x8B69;
const GL_FLOAT_MAT4X3 = 0x8B6A;
const GL_FLOAT_MAT4X3_NV = 0x8B6A;
const GL_DELETE_STATUS = 0x8B80;
const GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
const GL_COMPILE_STATUS = 0x8B81;
const GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
const GL_LINK_STATUS = 0x8B82;
const GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
const GL_VALIDATE_STATUS = 0x8B83;
const GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
const GL_INFO_LOG_LENGTH = 0x8B84;
const GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
const GL_ATTACHED_SHADERS = 0x8B85;
const GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
const GL_ACTIVE_UNIFORMS = 0x8B86;
const GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
const GL_SHADER_SOURCE_LENGTH = 0x8B88;
const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
const GL_ACTIVE_ATTRIBUTES = 0x8B89;
const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
const GL_CURRENT_PROGRAM = 0x8B8D;
const GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
const GL_PALETTE4_RGB8_OES = 0x8B90;
const GL_PALETTE4_RGBA8_OES = 0x8B91;
const GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
const GL_PALETTE4_RGBA4_OES = 0x8B93;
const GL_PALETTE4_RGB5_A1_OES = 0x8B94;
const GL_PALETTE8_RGB8_OES = 0x8B95;
const GL_PALETTE8_RGBA8_OES = 0x8B96;
const GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
const GL_PALETTE8_RGBA4_OES = 0x8B98;
const GL_PALETTE8_RGB5_A1_OES = 0x8B99;
const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
const GL_POINT_SIZE_ARRAY_OES = 0x8B9C;
const GL_TEXTURE_CROP_RECT_OES = 0x8B9D;
const GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;
const GL_FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0;
const GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1;
const GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2;
const GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3;
const GL_VERTEX_PROGRAM_POSITION_MESA = 0x8BB4;
const GL_VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5;
const GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6;
const GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7;
const GL_TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8;
const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9;
const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA;
const GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
const GL_FRAMEBUFFER_FLIP_X_MESA = 0x8BBC;
const GL_FRAMEBUFFER_SWAP_XY_MESA = 0x8BBD;
const GL_COUNTER_TYPE_AMD = 0x8BC0;
const GL_COUNTER_RANGE_AMD = 0x8BC1;
const GL_UNSIGNED_INT64_AMD = 0x8BC2;
const GL_PERCENTAGE_AMD = 0x8BC3;
const GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
const GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
const GL_PERFMON_RESULT_AMD = 0x8BC6;
const GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
const GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
const GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
const GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
const GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
const GL_TEXTURE_TYPE_QCOM = 0x8BD7;
const GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
const GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
const GL_TEXTURE_TARGET_QCOM = 0x8BDA;
const GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
const GL_STATE_RESTORE = 0x8BDC;
const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7;
const GL_TEXTURE_PROTECTED_EXT = 0x8BFA;
const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x8BFB;
const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x8BFC;
const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x8BFD;
const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x8BFE;
const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x8BFF;
const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
const GL_MODULATE_COLOR_IMG = 0x8C04;
const GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
const GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
const GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
const GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
const GL_ADD_BLEND_IMG = 0x8C09;
const GL_SGX_BINARY_IMG = 0x8C0A;
const GL_TEXTURE_RED_TYPE = 0x8C10;
const GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
const GL_TEXTURE_GREEN_TYPE = 0x8C11;
const GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
const GL_TEXTURE_BLUE_TYPE = 0x8C12;
const GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
const GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
const GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
const GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
const GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
const GL_UNSIGNED_NORMALIZED = 0x8C17;
const GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
const GL_UNSIGNED_NORMALIZED_EXT = 0x8C17;
const GL_TEXTURE_1D_ARRAY = 0x8C18;
const GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
const GL_TEXTURE_2D_ARRAY = 0x8C1A;
const GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
const GL_GEOMETRY_PROGRAM_NV = 0x8C26;
const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29;
const GL_TEXTURE_BUFFER = 0x8C2A;
const GL_TEXTURE_BUFFER_ARB = 0x8C2A;
const GL_TEXTURE_BUFFER_EXT = 0x8C2A;
const GL_TEXTURE_BUFFER_OES = 0x8C2A;
const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
const GL_TEXTURE_BUFFER_BINDING_EXT = 0x8C2A;
const GL_TEXTURE_BUFFER_BINDING_OES = 0x8C2A;
const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
const GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2B;
const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
const GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
const GL_TEXTURE_BINDING_BUFFER_OES = 0x8C2C;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2D;
const GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
const GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
const GL_ANY_SAMPLES_PASSED = 0x8C2F;
const GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F;
const GL_SAMPLE_SHADING = 0x8C36;
const GL_SAMPLE_SHADING_ARB = 0x8C36;
const GL_SAMPLE_SHADING_OES = 0x8C36;
const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
const GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37;
const GL_R11F_G11F_B10F = 0x8C3A;
const GL_R11F_G11F_B10F_APPLE = 0x8C3A;
const GL_R11F_G11F_B10F_EXT = 0x8C3A;
const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B;
const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
const GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
const GL_RGB9_E5 = 0x8C3D;
const GL_RGB9_E5_APPLE = 0x8C3D;
const GL_RGB9_E5_EXT = 0x8C3D;
const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E;
const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
const GL_SRGB = 0x8C40;
const GL_SRGB_EXT = 0x8C40;
const GL_SRGB8 = 0x8C41;
const GL_SRGB8_EXT = 0x8C41;
const GL_SRGB8_NV = 0x8C41;
const GL_SRGB_ALPHA = 0x8C42;
const GL_SRGB_ALPHA_EXT = 0x8C42;
const GL_SRGB8_ALPHA8 = 0x8C43;
const GL_SRGB8_ALPHA8_EXT = 0x8C43;
const GL_SLUMINANCE_ALPHA = 0x8C44;
const GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
const GL_SLUMINANCE_ALPHA_NV = 0x8C44;
const GL_SLUMINANCE8_ALPHA8 = 0x8C45;
const GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
const GL_SLUMINANCE8_ALPHA8_NV = 0x8C45;
const GL_SLUMINANCE = 0x8C46;
const GL_SLUMINANCE_EXT = 0x8C46;
const GL_SLUMINANCE_NV = 0x8C46;
const GL_SLUMINANCE8 = 0x8C47;
const GL_SLUMINANCE8_EXT = 0x8C47;
const GL_SLUMINANCE8_NV = 0x8C47;
const GL_COMPRESSED_SRGB = 0x8C48;
const GL_COMPRESSED_SRGB_EXT = 0x8C48;
const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
const GL_COMPRESSED_SLUMINANCE = 0x8C4A;
const GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
const GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F;
const GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
const GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
const GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
const GL_TEXTURE_COORD_NV = 0x8C79;
const GL_CLIP_DISTANCE_NV = 0x8C7A;
const GL_VERTEX_ID_NV = 0x8C7B;
const GL_PRIMITIVE_ID_NV = 0x8C7C;
const GL_GENERIC_ATTRIB_NV = 0x8C7D;
const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
const GL_ACTIVE_VARYINGS_NV = 0x8C81;
const GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
const GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
const GL_PRIMITIVES_GENERATED = 0x8C87;
const GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
const GL_PRIMITIVES_GENERATED_NV = 0x8C87;
const GL_PRIMITIVES_GENERATED_OES = 0x8C87;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
const GL_RASTERIZER_DISCARD = 0x8C89;
const GL_RASTERIZER_DISCARD_EXT = 0x8C89;
const GL_RASTERIZER_DISCARD_NV = 0x8C89;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
const GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
const GL_SEPARATE_ATTRIBS = 0x8C8D;
const GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
const GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
const GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90;
const GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91;
const GL_ATC_RGB_AMD = 0x8C92;
const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
const GL_TEXTURE_LOD_BIAS_QCOM = 0x8C96;
const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const GL_LOWER_LEFT = 0x8CA1;
const GL_LOWER_LEFT_EXT = 0x8CA1;
const GL_UPPER_LEFT = 0x8CA2;
const GL_UPPER_LEFT_EXT = 0x8CA2;
const GL_STENCIL_BACK_REF = 0x8CA3;
const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
const GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
const GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6;
const GL_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
const GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
const GL_FRAMEBUFFER_BINDING_OES = 0x8CA6;
const GL_RENDERBUFFER_BINDING = 0x8CA7;
const GL_RENDERBUFFER_BINDING_ANGLE = 0x8CA7;
const GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
const GL_RENDERBUFFER_BINDING_OES = 0x8CA7;
const GL_READ_FRAMEBUFFER = 0x8CA8;
const GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8;
const GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
const GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
const GL_READ_FRAMEBUFFER_NV = 0x8CA8;
const GL_DRAW_FRAMEBUFFER = 0x8CA9;
const GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9;
const GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
const GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
const GL_DRAW_FRAMEBUFFER_NV = 0x8CA9;
const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA;
const GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
const GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
const GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA;
const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB;
const GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
const GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
const GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB;
const GL_DEPTH_COMPONENT32F = 0x8CAC;
const GL_DEPTH32F_STENCIL8 = 0x8CAD;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
const GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9;
const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC;
const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
const GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD;
const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
const GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF;
const GL_COLOR_ATTACHMENT0 = 0x8CE0;
const GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
const GL_COLOR_ATTACHMENT0_NV = 0x8CE0;
const GL_COLOR_ATTACHMENT0_OES = 0x8CE0;
const GL_COLOR_ATTACHMENT1 = 0x8CE1;
const GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
const GL_COLOR_ATTACHMENT1_NV = 0x8CE1;
const GL_COLOR_ATTACHMENT2 = 0x8CE2;
const GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
const GL_COLOR_ATTACHMENT2_NV = 0x8CE2;
const GL_COLOR_ATTACHMENT3 = 0x8CE3;
const GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
const GL_COLOR_ATTACHMENT3_NV = 0x8CE3;
const GL_COLOR_ATTACHMENT4 = 0x8CE4;
const GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
const GL_COLOR_ATTACHMENT4_NV = 0x8CE4;
const GL_COLOR_ATTACHMENT5 = 0x8CE5;
const GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
const GL_COLOR_ATTACHMENT5_NV = 0x8CE5;
const GL_COLOR_ATTACHMENT6 = 0x8CE6;
const GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
const GL_COLOR_ATTACHMENT6_NV = 0x8CE6;
const GL_COLOR_ATTACHMENT7 = 0x8CE7;
const GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
const GL_COLOR_ATTACHMENT7_NV = 0x8CE7;
const GL_COLOR_ATTACHMENT8 = 0x8CE8;
const GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
const GL_COLOR_ATTACHMENT8_NV = 0x8CE8;
const GL_COLOR_ATTACHMENT9 = 0x8CE9;
const GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
const GL_COLOR_ATTACHMENT9_NV = 0x8CE9;
const GL_COLOR_ATTACHMENT10 = 0x8CEA;
const GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
const GL_COLOR_ATTACHMENT10_NV = 0x8CEA;
const GL_COLOR_ATTACHMENT11 = 0x8CEB;
const GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
const GL_COLOR_ATTACHMENT11_NV = 0x8CEB;
const GL_COLOR_ATTACHMENT12 = 0x8CEC;
const GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
const GL_COLOR_ATTACHMENT12_NV = 0x8CEC;
const GL_COLOR_ATTACHMENT13 = 0x8CED;
const GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
const GL_COLOR_ATTACHMENT13_NV = 0x8CED;
const GL_COLOR_ATTACHMENT14 = 0x8CEE;
const GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
const GL_COLOR_ATTACHMENT14_NV = 0x8CEE;
const GL_COLOR_ATTACHMENT15 = 0x8CEF;
const GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
const GL_COLOR_ATTACHMENT15_NV = 0x8CEF;
const GL_COLOR_ATTACHMENT16 = 0x8CF0;
const GL_COLOR_ATTACHMENT17 = 0x8CF1;
const GL_COLOR_ATTACHMENT18 = 0x8CF2;
const GL_COLOR_ATTACHMENT19 = 0x8CF3;
const GL_COLOR_ATTACHMENT20 = 0x8CF4;
const GL_COLOR_ATTACHMENT21 = 0x8CF5;
const GL_COLOR_ATTACHMENT22 = 0x8CF6;
const GL_COLOR_ATTACHMENT23 = 0x8CF7;
const GL_COLOR_ATTACHMENT24 = 0x8CF8;
const GL_COLOR_ATTACHMENT25 = 0x8CF9;
const GL_COLOR_ATTACHMENT26 = 0x8CFA;
const GL_COLOR_ATTACHMENT27 = 0x8CFB;
const GL_COLOR_ATTACHMENT28 = 0x8CFC;
const GL_COLOR_ATTACHMENT29 = 0x8CFD;
const GL_COLOR_ATTACHMENT30 = 0x8CFE;
const GL_COLOR_ATTACHMENT31 = 0x8CFF;
const GL_DEPTH_ATTACHMENT = 0x8D00;
const GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
const GL_DEPTH_ATTACHMENT_OES = 0x8D00;
const GL_STENCIL_ATTACHMENT = 0x8D20;
const GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
const GL_STENCIL_ATTACHMENT_OES = 0x8D20;
const GL_FRAMEBUFFER = 0x8D40;
const GL_FRAMEBUFFER_EXT = 0x8D40;
const GL_FRAMEBUFFER_OES = 0x8D40;
const GL_RENDERBUFFER = 0x8D41;
const GL_RENDERBUFFER_EXT = 0x8D41;
const GL_RENDERBUFFER_OES = 0x8D41;
const GL_RENDERBUFFER_WIDTH = 0x8D42;
const GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
const GL_RENDERBUFFER_WIDTH_OES = 0x8D42;
const GL_RENDERBUFFER_HEIGHT = 0x8D43;
const GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
const GL_RENDERBUFFER_HEIGHT_OES = 0x8D43;
const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
const GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44;
const GL_STENCIL_INDEX1 = 0x8D46;
const GL_STENCIL_INDEX1_EXT = 0x8D46;
const GL_STENCIL_INDEX1_OES = 0x8D46;
const GL_STENCIL_INDEX4 = 0x8D47;
const GL_STENCIL_INDEX4_EXT = 0x8D47;
const GL_STENCIL_INDEX4_OES = 0x8D47;
const GL_STENCIL_INDEX8 = 0x8D48;
const GL_STENCIL_INDEX8_EXT = 0x8D48;
const GL_STENCIL_INDEX8_OES = 0x8D48;
const GL_STENCIL_INDEX16 = 0x8D49;
const GL_STENCIL_INDEX16_EXT = 0x8D49;
const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
const GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50;
const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
const GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51;
const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
const GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52;
const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
const GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53;
const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
const GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54;
const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
const GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56;
const GL_MAX_SAMPLES = 0x8D57;
const GL_MAX_SAMPLES_ANGLE = 0x8D57;
const GL_MAX_SAMPLES_APPLE = 0x8D57;
const GL_MAX_SAMPLES_EXT = 0x8D57;
const GL_MAX_SAMPLES_NV = 0x8D57;
const GL_TEXTURE_GEN_STR_OES = 0x8D60;
const GL_HALF_FLOAT_OES = 0x8D61;
const GL_RGB565_OES = 0x8D62;
const GL_RGB565 = 0x8D62;
const GL_ETC1_RGB8_OES = 0x8D64;
const GL_TEXTURE_EXTERNAL_OES = 0x8D65;
const GL_SAMPLER_EXTERNAL_OES = 0x8D66;
const GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A;
const GL_MAX_ELEMENT_INDEX = 0x8D6B;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
const GL_RGBA32UI = 0x8D70;
const GL_RGBA32UI_EXT = 0x8D70;
const GL_RGB32UI = 0x8D71;
const GL_RGB32UI_EXT = 0x8D71;
const GL_ALPHA32UI_EXT = 0x8D72;
const GL_INTENSITY32UI_EXT = 0x8D73;
const GL_LUMINANCE32UI_EXT = 0x8D74;
const GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
const GL_RGBA16UI = 0x8D76;
const GL_RGBA16UI_EXT = 0x8D76;
const GL_RGB16UI = 0x8D77;
const GL_RGB16UI_EXT = 0x8D77;
const GL_ALPHA16UI_EXT = 0x8D78;
const GL_INTENSITY16UI_EXT = 0x8D79;
const GL_LUMINANCE16UI_EXT = 0x8D7A;
const GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
const GL_RGBA8UI = 0x8D7C;
const GL_RGBA8UI_EXT = 0x8D7C;
const GL_RGB8UI = 0x8D7D;
const GL_RGB8UI_EXT = 0x8D7D;
const GL_ALPHA8UI_EXT = 0x8D7E;
const GL_INTENSITY8UI_EXT = 0x8D7F;
const GL_LUMINANCE8UI_EXT = 0x8D80;
const GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
const GL_RGBA32I = 0x8D82;
const GL_RGBA32I_EXT = 0x8D82;
const GL_RGB32I = 0x8D83;
const GL_RGB32I_EXT = 0x8D83;
const GL_ALPHA32I_EXT = 0x8D84;
const GL_INTENSITY32I_EXT = 0x8D85;
const GL_LUMINANCE32I_EXT = 0x8D86;
const GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
const GL_RGBA16I = 0x8D88;
const GL_RGBA16I_EXT = 0x8D88;
const GL_RGB16I = 0x8D89;
const GL_RGB16I_EXT = 0x8D89;
const GL_ALPHA16I_EXT = 0x8D8A;
const GL_INTENSITY16I_EXT = 0x8D8B;
const GL_LUMINANCE16I_EXT = 0x8D8C;
const GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
const GL_RGBA8I = 0x8D8E;
const GL_RGBA8I_EXT = 0x8D8E;
const GL_RGB8I = 0x8D8F;
const GL_RGB8I_EXT = 0x8D8F;
const GL_ALPHA8I_EXT = 0x8D90;
const GL_INTENSITY8I_EXT = 0x8D91;
const GL_LUMINANCE8I_EXT = 0x8D92;
const GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
const GL_RED_INTEGER = 0x8D94;
const GL_RED_INTEGER_EXT = 0x8D94;
const GL_GREEN_INTEGER = 0x8D95;
const GL_GREEN_INTEGER_EXT = 0x8D95;
const GL_BLUE_INTEGER = 0x8D96;
const GL_BLUE_INTEGER_EXT = 0x8D96;
const GL_ALPHA_INTEGER = 0x8D97;
const GL_ALPHA_INTEGER_EXT = 0x8D97;
const GL_RGB_INTEGER = 0x8D98;
const GL_RGB_INTEGER_EXT = 0x8D98;
const GL_RGBA_INTEGER = 0x8D99;
const GL_RGBA_INTEGER_EXT = 0x8D99;
const GL_BGR_INTEGER = 0x8D9A;
const GL_BGR_INTEGER_EXT = 0x8D9A;
const GL_BGRA_INTEGER = 0x8D9B;
const GL_BGRA_INTEGER_EXT = 0x8D9B;
const GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
const GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
const GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
const GL_INT_2_10_10_10_REV = 0x8D9F;
const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
const GL_LAYER_NV = 0x8DAA;
const GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
const GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
const GL_SHADER_INCLUDE_ARB = 0x8DAE;
const GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
const GL_FRAMEBUFFER_SRGB = 0x8DB9;
const GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const GL_SAMPLER_1D_ARRAY = 0x8DC0;
const GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
const GL_SAMPLER_2D_ARRAY = 0x8DC1;
const GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
const GL_SAMPLER_BUFFER = 0x8DC2;
const GL_SAMPLER_BUFFER_EXT = 0x8DC2;
const GL_SAMPLER_BUFFER_OES = 0x8DC2;
const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
const GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4;
const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
const GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5;
const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
const GL_INT_SAMPLER_1D = 0x8DC9;
const GL_INT_SAMPLER_1D_EXT = 0x8DC9;
const GL_INT_SAMPLER_2D = 0x8DCA;
const GL_INT_SAMPLER_2D_EXT = 0x8DCA;
const GL_INT_SAMPLER_3D = 0x8DCB;
const GL_INT_SAMPLER_3D_EXT = 0x8DCB;
const GL_INT_SAMPLER_CUBE = 0x8DCC;
const GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
const GL_INT_SAMPLER_BUFFER = 0x8DD0;
const GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
const GL_INT_SAMPLER_BUFFER_OES = 0x8DD0;
const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8;
const GL_GEOMETRY_SHADER = 0x8DD9;
const GL_GEOMETRY_SHADER_ARB = 0x8DD9;
const GL_GEOMETRY_SHADER_EXT = 0x8DD9;
const GL_GEOMETRY_SHADER_OES = 0x8DD9;
const GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
const GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
const GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
const GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
const GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
const GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDF;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1;
const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
const GL_ACTIVE_SUBROUTINES = 0x8DE5;
const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const GL_MAX_SUBROUTINES = 0x8DE7;
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
const GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
const GL_UNIFORM_BUFFER_EXT = 0x8DEE;
const GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
const GL_LOW_FLOAT = 0x8DF0;
const GL_MEDIUM_FLOAT = 0x8DF1;
const GL_HIGH_FLOAT = 0x8DF2;
const GL_LOW_INT = 0x8DF3;
const GL_MEDIUM_INT = 0x8DF4;
const GL_HIGH_INT = 0x8DF5;
const GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6;
const GL_INT_10_10_10_2_OES = 0x8DF7;
const GL_SHADER_BINARY_FORMATS = 0x8DF8;
const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const GL_SHADER_COMPILER = 0x8DFA;
const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const GL_MAX_VARYING_VECTORS = 0x8DFC;
const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
const GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
const GL_QUERY_WAIT = 0x8E13;
const GL_QUERY_WAIT_NV = 0x8E13;
const GL_QUERY_NO_WAIT = 0x8E14;
const GL_QUERY_NO_WAIT_NV = 0x8E14;
const GL_QUERY_BY_REGION_WAIT = 0x8E15;
const GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
const GL_QUERY_WAIT_INVERTED = 0x8E17;
const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
const GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1E;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1F;
const GL_COLOR_SAMPLES_NV = 0x8E20;
const GL_TRANSFORM_FEEDBACK = 0x8E22;
const GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
const GL_FRAME_NV = 0x8E26;
const GL_FIELDS_NV = 0x8E27;
const GL_CURRENT_TIME_NV = 0x8E28;
const GL_TIMESTAMP = 0x8E28;
const GL_TIMESTAMP_EXT = 0x8E28;
const GL_NUM_FILL_STREAMS_NV = 0x8E29;
const GL_PRESENT_TIME_NV = 0x8E2A;
const GL_PRESENT_DURATION_NV = 0x8E2B;
const GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C;
const GL_PROGRAM_MATRIX_EXT = 0x8E2D;
const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
const GL_TEXTURE_SWIZZLE_R = 0x8E42;
const GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
const GL_TEXTURE_SWIZZLE_G = 0x8E43;
const GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
const GL_TEXTURE_SWIZZLE_B = 0x8E44;
const GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
const GL_TEXTURE_SWIZZLE_A = 0x8E45;
const GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
const GL_FIRST_VERTEX_CONVENTION_OES = 0x8E4D;
const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
const GL_LAST_VERTEX_CONVENTION_OES = 0x8E4E;
const GL_PROVOKING_VERTEX = 0x8E4F;
const GL_PROVOKING_VERTEX_EXT = 0x8E4F;
const GL_SAMPLE_POSITION = 0x8E50;
const GL_SAMPLE_POSITION_NV = 0x8E50;
const GL_SAMPLE_LOCATION_ARB = 0x8E50;
const GL_SAMPLE_LOCATION_NV = 0x8E50;
const GL_SAMPLE_MASK = 0x8E51;
const GL_SAMPLE_MASK_NV = 0x8E51;
const GL_SAMPLE_MASK_VALUE = 0x8E52;
const GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
const GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
const GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
const GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
const GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5A;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D;
const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
const GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
const GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
const GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
const GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
const GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
const GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const GL_MAX_VERTEX_STREAMS = 0x8E71;
const GL_PATCH_VERTICES = 0x8E72;
const GL_PATCH_VERTICES_EXT = 0x8E72;
const GL_PATCH_VERTICES_OES = 0x8E72;
const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73;
const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74;
const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75;
const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75;
const GL_TESS_GEN_MODE = 0x8E76;
const GL_TESS_GEN_MODE_EXT = 0x8E76;
const GL_TESS_GEN_MODE_OES = 0x8E76;
const GL_TESS_GEN_SPACING = 0x8E77;
const GL_TESS_GEN_SPACING_EXT = 0x8E77;
const GL_TESS_GEN_SPACING_OES = 0x8E77;
const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78;
const GL_TESS_GEN_VERTEX_ORDER_OES = 0x8E78;
const GL_TESS_GEN_POINT_MODE = 0x8E79;
const GL_TESS_GEN_POINT_MODE_EXT = 0x8E79;
const GL_TESS_GEN_POINT_MODE_OES = 0x8E79;
const GL_ISOLINES = 0x8E7A;
const GL_ISOLINES_EXT = 0x8E7A;
const GL_ISOLINES_OES = 0x8E7A;
const GL_FRACTIONAL_ODD = 0x8E7B;
const GL_FRACTIONAL_ODD_EXT = 0x8E7B;
const GL_FRACTIONAL_ODD_OES = 0x8E7B;
const GL_FRACTIONAL_EVEN = 0x8E7C;
const GL_FRACTIONAL_EVEN_EXT = 0x8E7C;
const GL_FRACTIONAL_EVEN_OES = 0x8E7C;
const GL_MAX_PATCH_VERTICES = 0x8E7D;
const GL_MAX_PATCH_VERTICES_EXT = 0x8E7D;
const GL_MAX_PATCH_VERTICES_OES = 0x8E7D;
const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E;
const GL_MAX_TESS_GEN_LEVEL_OES = 0x8E7E;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7F;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83;
const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84;
const GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86;
const GL_TESS_EVALUATION_SHADER = 0x8E87;
const GL_TESS_EVALUATION_SHADER_EXT = 0x8E87;
const GL_TESS_EVALUATION_SHADER_OES = 0x8E87;
const GL_TESS_CONTROL_SHADER = 0x8E88;
const GL_TESS_CONTROL_SHADER_EXT = 0x8E88;
const GL_TESS_CONTROL_SHADER_OES = 0x8E88;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8A;
const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
const GL_TRP_IMG = 0x8EA0;
const GL_TRP_ERROR_CONTEXT_RESET_IMG = 0x8EA1;
const GL_TRP_UNSUPPORTED_CONTEXT_IMG = 0x8EA2;
const GL_PVRIC_SIGNATURE_MISMATCH_IMG = 0x8EA3;
const GL_COVERAGE_COMPONENT_NV = 0x8ED0;
const GL_COVERAGE_COMPONENT4_NV = 0x8ED1;
const GL_COVERAGE_ATTACHMENT_NV = 0x8ED2;
const GL_COVERAGE_BUFFERS_NV = 0x8ED3;
const GL_COVERAGE_SAMPLES_NV = 0x8ED4;
const GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5;
const GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6;
const GL_COVERAGE_AUTOMATIC_NV = 0x8ED7;
const GL_INCLUSIVE_EXT = 0x8F10;
const GL_EXCLUSIVE_EXT = 0x8F11;
const GL_WINDOW_RECTANGLE_EXT = 0x8F12;
const GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
const GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
const GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
const GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
const GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
const GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
const GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
const GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
const GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
const GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
const GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
const GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
const GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
const GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
const GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
const GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
const GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
const GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
const GL_GPU_ADDRESS_NV = 0x8F34;
const GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
const GL_COPY_READ_BUFFER = 0x8F36;
const GL_COPY_READ_BUFFER_NV = 0x8F36;
const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
const GL_COPY_WRITE_BUFFER = 0x8F37;
const GL_COPY_WRITE_BUFFER_NV = 0x8F37;
const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
const GL_MAX_IMAGE_UNITS = 0x8F38;
const GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GL_IMAGE_BINDING_NAME = 0x8F3A;
const GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
const GL_IMAGE_BINDING_LAYER = 0x8F3D;
const GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
const GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
const GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
const GL_DOUBLE_MAT2 = 0x8F46;
const GL_DOUBLE_MAT2_EXT = 0x8F46;
const GL_DOUBLE_MAT3 = 0x8F47;
const GL_DOUBLE_MAT3_EXT = 0x8F47;
const GL_DOUBLE_MAT4 = 0x8F48;
const GL_DOUBLE_MAT4_EXT = 0x8F48;
const GL_DOUBLE_MAT2X3 = 0x8F49;
const GL_DOUBLE_MAT2X3_EXT = 0x8F49;
const GL_DOUBLE_MAT2X4 = 0x8F4A;
const GL_DOUBLE_MAT2X4_EXT = 0x8F4A;
const GL_DOUBLE_MAT3X2 = 0x8F4B;
const GL_DOUBLE_MAT3X2_EXT = 0x8F4B;
const GL_DOUBLE_MAT3X4 = 0x8F4C;
const GL_DOUBLE_MAT3X4_EXT = 0x8F4C;
const GL_DOUBLE_MAT4X2 = 0x8F4D;
const GL_DOUBLE_MAT4X2_EXT = 0x8F4D;
const GL_DOUBLE_MAT4X3 = 0x8F4E;
const GL_DOUBLE_MAT4X3_EXT = 0x8F4E;
const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
const GL_MALI_SHADER_BINARY_ARM = 0x8F60;
const GL_MALI_PROGRAM_BINARY_ARM = 0x8F61;
const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63;
const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64;
const GL_FETCH_PER_SAMPLE_ARM = 0x8F65;
const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66;
const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67;
const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69;
const GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A;
const GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = 0x8F6E;
const GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x8F6F;
const GL_RED_SNORM = 0x8F90;
const GL_RG_SNORM = 0x8F91;
const GL_RGB_SNORM = 0x8F92;
const GL_RGBA_SNORM = 0x8F93;
const GL_R8_SNORM = 0x8F94;
const GL_RG8_SNORM = 0x8F95;
const GL_RGB8_SNORM = 0x8F96;
const GL_RGBA8_SNORM = 0x8F97;
const GL_R16_SNORM = 0x8F98;
const GL_R16_SNORM_EXT = 0x8F98;
const GL_RG16_SNORM = 0x8F99;
const GL_RG16_SNORM_EXT = 0x8F99;
const GL_RGB16_SNORM = 0x8F9A;
const GL_RGB16_SNORM_EXT = 0x8F9A;
const GL_RGBA16_SNORM = 0x8F9B;
const GL_RGBA16_SNORM_EXT = 0x8F9B;
const GL_SIGNED_NORMALIZED = 0x8F9C;
const GL_PRIMITIVE_RESTART = 0x8F9D;
const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
const GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x8FA1;
const GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
const GL_CPU_OPTIMIZED_QCOM = 0x8FB1;
const GL_GPU_OPTIMIZED_QCOM = 0x8FB2;
const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3;
const GL_GPU_DISJOINT_EXT = 0x8FBB;
const GL_SR8_EXT = 0x8FBD;
const GL_SRG8_EXT = 0x8FBE;
const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x8FBF;
const GL_SHADER_BINARY_VIV = 0x8FC4;
const GL_INT8_NV = 0x8FE0;
const GL_INT8_VEC2_NV = 0x8FE1;
const GL_INT8_VEC3_NV = 0x8FE2;
const GL_INT8_VEC4_NV = 0x8FE3;
const GL_INT16_NV = 0x8FE4;
const GL_INT16_VEC2_NV = 0x8FE5;
const GL_INT16_VEC3_NV = 0x8FE6;
const GL_INT16_VEC4_NV = 0x8FE7;
const GL_INT64_VEC2_ARB = 0x8FE9;
const GL_INT64_VEC2_NV = 0x8FE9;
const GL_INT64_VEC3_ARB = 0x8FEA;
const GL_INT64_VEC3_NV = 0x8FEA;
const GL_INT64_VEC4_ARB = 0x8FEB;
const GL_INT64_VEC4_NV = 0x8FEB;
const GL_UNSIGNED_INT8_NV = 0x8FEC;
const GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
const GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
const GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
const GL_UNSIGNED_INT16_NV = 0x8FF0;
const GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
const GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
const GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
const GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
const GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
const GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
const GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
const GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
const GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
const GL_FLOAT16_NV = 0x8FF8;
const GL_FLOAT16_VEC2_NV = 0x8FF9;
const GL_FLOAT16_VEC3_NV = 0x8FFA;
const GL_FLOAT16_VEC4_NV = 0x8FFB;
const GL_DOUBLE_VEC2 = 0x8FFC;
const GL_DOUBLE_VEC2_EXT = 0x8FFC;
const GL_DOUBLE_VEC3 = 0x8FFD;
const GL_DOUBLE_VEC3_EXT = 0x8FFD;
const GL_DOUBLE_VEC4 = 0x8FFE;
const GL_DOUBLE_VEC4_EXT = 0x8FFE;
const GL_SAMPLER_BUFFER_AMD = 0x9001;
const GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
const GL_TESSELLATION_MODE_AMD = 0x9004;
const GL_TESSELLATION_FACTOR_AMD = 0x9005;
const GL_DISCRETE_AMD = 0x9006;
const GL_CONTINUOUS_AMD = 0x9007;
const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009;
const GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900A;
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900D;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900E;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900F;
const GL_ALPHA_SNORM = 0x9010;
const GL_LUMINANCE_SNORM = 0x9011;
const GL_LUMINANCE_ALPHA_SNORM = 0x9012;
const GL_INTENSITY_SNORM = 0x9013;
const GL_ALPHA8_SNORM = 0x9014;
const GL_LUMINANCE8_SNORM = 0x9015;
const GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
const GL_INTENSITY8_SNORM = 0x9017;
const GL_ALPHA16_SNORM = 0x9018;
const GL_LUMINANCE16_SNORM = 0x9019;
const GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
const GL_INTENSITY16_SNORM = 0x901B;
const GL_FACTOR_MIN_AMD = 0x901C;
const GL_FACTOR_MAX_AMD = 0x901D;
const GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
const GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
const GL_VIDEO_BUFFER_NV = 0x9020;
const GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
const GL_FIELD_UPPER_NV = 0x9022;
const GL_FIELD_LOWER_NV = 0x9023;
const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
const GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
const GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
const GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
const GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
const GL_PARTIAL_SUCCESS_NV = 0x902E;
const GL_SUCCESS_NV = 0x902F;
const GL_FAILURE_NV = 0x9030;
const GL_YCBYCR8_422_NV = 0x9031;
const GL_YCBAYCR8A_4224_NV = 0x9032;
const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
const GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
const GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
const GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
const GL_IMAGE_1D = 0x904C;
const GL_IMAGE_1D_EXT = 0x904C;
const GL_IMAGE_2D = 0x904D;
const GL_IMAGE_2D_EXT = 0x904D;
const GL_IMAGE_3D = 0x904E;
const GL_IMAGE_3D_EXT = 0x904E;
const GL_IMAGE_2D_RECT = 0x904F;
const GL_IMAGE_2D_RECT_EXT = 0x904F;
const GL_IMAGE_CUBE = 0x9050;
const GL_IMAGE_CUBE_EXT = 0x9050;
const GL_IMAGE_BUFFER = 0x9051;
const GL_IMAGE_BUFFER_EXT = 0x9051;
const GL_IMAGE_BUFFER_OES = 0x9051;
const GL_IMAGE_1D_ARRAY = 0x9052;
const GL_IMAGE_1D_ARRAY_EXT = 0x9052;
const GL_IMAGE_2D_ARRAY = 0x9053;
const GL_IMAGE_2D_ARRAY_EXT = 0x9053;
const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
const GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054;
const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
const GL_INT_IMAGE_1D = 0x9057;
const GL_INT_IMAGE_1D_EXT = 0x9057;
const GL_INT_IMAGE_2D = 0x9058;
const GL_INT_IMAGE_2D_EXT = 0x9058;
const GL_INT_IMAGE_3D = 0x9059;
const GL_INT_IMAGE_3D_EXT = 0x9059;
const GL_INT_IMAGE_2D_RECT = 0x905A;
const GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
const GL_INT_IMAGE_CUBE = 0x905B;
const GL_INT_IMAGE_CUBE_EXT = 0x905B;
const GL_INT_IMAGE_BUFFER = 0x905C;
const GL_INT_IMAGE_BUFFER_EXT = 0x905C;
const GL_INT_IMAGE_BUFFER_OES = 0x905C;
const GL_INT_IMAGE_1D_ARRAY = 0x905D;
const GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
const GL_INT_IMAGE_2D_ARRAY = 0x905E;
const GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905F;
const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906A;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
const GL_MAX_IMAGE_SAMPLES = 0x906D;
const GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
const GL_IMAGE_BINDING_FORMAT = 0x906E;
const GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
const GL_RGB10_A2UI = 0x906F;
const GL_PATH_FORMAT_SVG_NV = 0x9070;
const GL_PATH_FORMAT_PS_NV = 0x9071;
const GL_STANDARD_FONT_NAME_NV = 0x9072;
const GL_SYSTEM_FONT_NAME_NV = 0x9073;
const GL_FILE_NAME_NV = 0x9074;
const GL_PATH_STROKE_WIDTH_NV = 0x9075;
const GL_PATH_END_CAPS_NV = 0x9076;
const GL_PATH_INITIAL_END_CAP_NV = 0x9077;
const GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
const GL_PATH_JOIN_STYLE_NV = 0x9079;
const GL_PATH_MITER_LIMIT_NV = 0x907A;
const GL_PATH_DASH_CAPS_NV = 0x907B;
const GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
const GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
const GL_PATH_DASH_OFFSET_NV = 0x907E;
const GL_PATH_CLIENT_LENGTH_NV = 0x907F;
const GL_PATH_FILL_MODE_NV = 0x9080;
const GL_PATH_FILL_MASK_NV = 0x9081;
const GL_PATH_FILL_COVER_MODE_NV = 0x9082;
const GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
const GL_PATH_STROKE_MASK_NV = 0x9084;
const GL_COUNT_UP_NV = 0x9088;
const GL_COUNT_DOWN_NV = 0x9089;
const GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
const GL_CONVEX_HULL_NV = 0x908B;
const GL_BOUNDING_BOX_NV = 0x908D;
const GL_TRANSLATE_X_NV = 0x908E;
const GL_TRANSLATE_Y_NV = 0x908F;
const GL_TRANSLATE_2D_NV = 0x9090;
const GL_TRANSLATE_3D_NV = 0x9091;
const GL_AFFINE_2D_NV = 0x9092;
const GL_AFFINE_3D_NV = 0x9094;
const GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
const GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
const GL_UTF8_NV = 0x909A;
const GL_UTF16_NV = 0x909B;
const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
const GL_PATH_COMMAND_COUNT_NV = 0x909D;
const GL_PATH_COORD_COUNT_NV = 0x909E;
const GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
const GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
const GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
const GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
const GL_SQUARE_NV = 0x90A3;
const GL_ROUND_NV = 0x90A4;
const GL_TRIANGULAR_NV = 0x90A5;
const GL_BEVEL_NV = 0x90A6;
const GL_MITER_REVERT_NV = 0x90A7;
const GL_MITER_TRUNCATE_NV = 0x90A8;
const GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
const GL_USE_MISSING_GLYPH_NV = 0x90AA;
const GL_PATH_ERROR_POSITION_NV = 0x90AB;
const GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
const GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
const GL_ADJACENT_PAIRS_NV = 0x90AE;
const GL_FIRST_TO_REST_NV = 0x90AF;
const GL_PATH_GEN_MODE_NV = 0x90B0;
const GL_PATH_GEN_COEFF_NV = 0x90B1;
const GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
const GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
const GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
const GL_MOVE_TO_RESETS_NV = 0x90B5;
const GL_MOVE_TO_CONTINUES_NV = 0x90B6;
const GL_PATH_STENCIL_FUNC_NV = 0x90B7;
const GL_PATH_STENCIL_REF_NV = 0x90B8;
const GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
const GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
const GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
const GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CB;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CC;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CD;
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
const GL_SHADER_STORAGE_BUFFER = 0x90D2;
const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9;
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GL_SYNC_X11_FENCE_EXT = 0x90E1;
const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GL_COLOR_ATTACHMENT_EXT = 0x90F0;
const GL_MULTIVIEW_EXT = 0x90F1;
const GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2;
const GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
const GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3;
const GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
const GL_COMPUTE_PROGRAM_NV = 0x90FB;
const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105;
const GL_TEXTURE_SAMPLES = 0x9106;
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B;
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D;
const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const GL_MAX_INTEGER_SAMPLES = 0x9110;
const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111;
const GL_OBJECT_TYPE = 0x9112;
const GL_OBJECT_TYPE_APPLE = 0x9112;
const GL_SYNC_CONDITION = 0x9113;
const GL_SYNC_CONDITION_APPLE = 0x9113;
const GL_SYNC_STATUS = 0x9114;
const GL_SYNC_STATUS_APPLE = 0x9114;
const GL_SYNC_FLAGS = 0x9115;
const GL_SYNC_FLAGS_APPLE = 0x9115;
const GL_SYNC_FENCE = 0x9116;
const GL_SYNC_FENCE_APPLE = 0x9116;
const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117;
const GL_UNSIGNALED = 0x9118;
const GL_UNSIGNALED_APPLE = 0x9118;
const GL_SIGNALED = 0x9119;
const GL_SIGNALED_APPLE = 0x9119;
const GL_ALREADY_SIGNALED = 0x911A;
const GL_ALREADY_SIGNALED_APPLE = 0x911A;
const GL_TIMEOUT_EXPIRED = 0x911B;
const GL_TIMEOUT_EXPIRED_APPLE = 0x911B;
const GL_CONDITION_SATISFIED = 0x911C;
const GL_CONDITION_SATISFIED_APPLE = 0x911C;
const GL_WAIT_FAILED = 0x911D;
const GL_WAIT_FAILED_APPLE = 0x911D;
const GL_BUFFER_ACCESS_FLAGS = 0x911F;
const GL_BUFFER_MAP_LENGTH = 0x9120;
const GL_BUFFER_MAP_OFFSET = 0x9121;
const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124;
const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const GL_CONTEXT_PROFILE_MASK = 0x9126;
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F;
const GL_SGX_PROGRAM_BINARY_IMG = 0x9130;
const GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
const GL_MAX_SAMPLES_IMG = 0x9135;
const GL_TEXTURE_SAMPLES_IMG = 0x9136;
const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;
const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;
const GL_CUBIC_IMG = 0x9139;
const GL_CUBIC_MIPMAP_NEAREST_IMG = 0x913A;
const GL_CUBIC_MIPMAP_LINEAR_IMG = 0x913B;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C;
const GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x913D;
const GL_DOWNSAMPLE_SCALES_IMG = 0x913E;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F;
const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
const GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
const GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
const GL_DEBUG_SEVERITY_HIGH = 0x9146;
const GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
const GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
const GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
const GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
const GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
const GL_DEBUG_SEVERITY_LOW = 0x9148;
const GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
const GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
const GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
const GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
const GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
const GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
const GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
const GL_BUFFER_OBJECT_EXT = 0x9151;
const GL_DATA_BUFFER_AMD = 0x9151;
const GL_PERFORMANCE_MONITOR_AMD = 0x9152;
const GL_QUERY_OBJECT_AMD = 0x9153;
const GL_QUERY_OBJECT_EXT = 0x9153;
const GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
const GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
const GL_SAMPLER_OBJECT_AMD = 0x9155;
const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
const GL_QUERY_BUFFER = 0x9192;
const GL_QUERY_BUFFER_AMD = 0x9192;
const GL_QUERY_BUFFER_BINDING = 0x9193;
const GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
const GL_QUERY_RESULT_NO_WAIT = 0x9194;
const GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
const GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
const GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195;
const GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
const GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
const GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196;
const GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
const GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
const GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197;
const GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198;
const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199;
const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919A;
const GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
const GL_MIN_LOD_WARNING_AMD = 0x919C;
const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D;
const GL_TEXTURE_BUFFER_OFFSET_OES = 0x919D;
const GL_TEXTURE_BUFFER_SIZE = 0x919E;
const GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E;
const GL_TEXTURE_BUFFER_SIZE_OES = 0x919E;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919F;
const GL_STREAM_RASTERIZATION_AMD = 0x91A0;
const GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
const GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
const GL_TEXTURE_SPARSE_ARB = 0x91A6;
const GL_TEXTURE_SPARSE_EXT = 0x91A6;
const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7;
const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8;
const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9;
const GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
const GL_NUM_SPARSE_LEVELS_EXT = 0x91AA;
const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
const GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
const GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
const GL_COMPLETION_STATUS_KHR = 0x91B1;
const GL_COMPLETION_STATUS_ARB = 0x91B1;
const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
const GL_COMPUTE_SHADER = 0x91B9;
const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
const GL_FLOAT16_MAT2_AMD = 0x91C5;
const GL_FLOAT16_MAT3_AMD = 0x91C6;
const GL_FLOAT16_MAT4_AMD = 0x91C7;
const GL_FLOAT16_MAT2X3_AMD = 0x91C8;
const GL_FLOAT16_MAT2X4_AMD = 0x91C9;
const GL_FLOAT16_MAT3X2_AMD = 0x91CA;
const GL_FLOAT16_MAT3X4_AMD = 0x91CB;
const GL_FLOAT16_MAT4X2_AMD = 0x91CC;
const GL_FLOAT16_MAT4X3_AMD = 0x91CD;
const GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
const GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
const GL_CONTEXT_LOST_WEBGL = 0x9242;
const GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
const GL_BROWSER_DEFAULT_WEBGL = 0x9244;
const GL_UNMASKED_VENDOR_WEBGL = 0x9245;
const GL_UNMASKED_RENDERER_WEBGL = 0x9246;
const GL_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247;
const GL_TEXTURE_VIDEO_IMAGE_WEBGL = 0x9248;
const GL_SAMPLER_VIDEO_IMAGE_WEBGL = 0x9249;
const GL_SHADER_BINARY_DMP = 0x9250;
const GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251;
const GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252;
const GL_DMP_PROGRAM_BINARY_DMP = 0x9253;
const GL_GCCSO_SHADER_BINARY_FJ = 0x9260;
const GL_COMPRESSED_R11_EAC = 0x9270;
const GL_COMPRESSED_R11_EAC_OES = 0x9270;
const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const GL_COMPRESSED_SIGNED_R11_EAC_OES = 0x9271;
const GL_COMPRESSED_RG11_EAC = 0x9272;
const GL_COMPRESSED_RG11_EAC_OES = 0x9272;
const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const GL_COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273;
const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const GL_COMPRESSED_RGB8_ETC2_OES = 0x9274;
const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const GL_COMPRESSED_SRGB8_ETC2_OES = 0x9275;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277;
const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279;
const GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
const GL_BLEND_OVERLAP_NV = 0x9281;
const GL_UNCORRELATED_NV = 0x9282;
const GL_DISJOINT_NV = 0x9283;
const GL_CONJOINT_NV = 0x9284;
const GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
const GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
const GL_SRC_NV = 0x9286;
const GL_DST_NV = 0x9287;
const GL_SRC_OVER_NV = 0x9288;
const GL_DST_OVER_NV = 0x9289;
const GL_SRC_IN_NV = 0x928A;
const GL_DST_IN_NV = 0x928B;
const GL_SRC_OUT_NV = 0x928C;
const GL_DST_OUT_NV = 0x928D;
const GL_SRC_ATOP_NV = 0x928E;
const GL_DST_ATOP_NV = 0x928F;
const GL_PLUS_NV = 0x9291;
const GL_PLUS_DARKER_NV = 0x9292;
const GL_MULTIPLY = 0x9294;
const GL_MULTIPLY_KHR = 0x9294;
const GL_MULTIPLY_NV = 0x9294;
const GL_SCREEN = 0x9295;
const GL_SCREEN_KHR = 0x9295;
const GL_SCREEN_NV = 0x9295;
const GL_OVERLAY = 0x9296;
const GL_OVERLAY_KHR = 0x9296;
const GL_OVERLAY_NV = 0x9296;
const GL_DARKEN = 0x9297;
const GL_DARKEN_KHR = 0x9297;
const GL_DARKEN_NV = 0x9297;
const GL_LIGHTEN = 0x9298;
const GL_LIGHTEN_KHR = 0x9298;
const GL_LIGHTEN_NV = 0x9298;
const GL_COLORDODGE = 0x9299;
const GL_COLORDODGE_KHR = 0x9299;
const GL_COLORDODGE_NV = 0x9299;
const GL_COLORBURN = 0x929A;
const GL_COLORBURN_KHR = 0x929A;
const GL_COLORBURN_NV = 0x929A;
const GL_HARDLIGHT = 0x929B;
const GL_HARDLIGHT_KHR = 0x929B;
const GL_HARDLIGHT_NV = 0x929B;
const GL_SOFTLIGHT = 0x929C;
const GL_SOFTLIGHT_KHR = 0x929C;
const GL_SOFTLIGHT_NV = 0x929C;
const GL_DIFFERENCE = 0x929E;
const GL_DIFFERENCE_KHR = 0x929E;
const GL_DIFFERENCE_NV = 0x929E;
const GL_MINUS_NV = 0x929F;
const GL_EXCLUSION = 0x92A0;
const GL_EXCLUSION_KHR = 0x92A0;
const GL_EXCLUSION_NV = 0x92A0;
const GL_CONTRAST_NV = 0x92A1;
const GL_INVERT_RGB_NV = 0x92A3;
const GL_LINEARDODGE_NV = 0x92A4;
const GL_LINEARBURN_NV = 0x92A5;
const GL_VIVIDLIGHT_NV = 0x92A6;
const GL_LINEARLIGHT_NV = 0x92A7;
const GL_PINLIGHT_NV = 0x92A8;
const GL_HARDMIX_NV = 0x92A9;
const GL_HSL_HUE = 0x92AD;
const GL_HSL_HUE_KHR = 0x92AD;
const GL_HSL_HUE_NV = 0x92AD;
const GL_HSL_SATURATION = 0x92AE;
const GL_HSL_SATURATION_KHR = 0x92AE;
const GL_HSL_SATURATION_NV = 0x92AE;
const GL_HSL_COLOR = 0x92AF;
const GL_HSL_COLOR_KHR = 0x92AF;
const GL_HSL_COLOR_NV = 0x92AF;
const GL_HSL_LUMINOSITY = 0x92B0;
const GL_HSL_LUMINOSITY_KHR = 0x92B0;
const GL_HSL_LUMINOSITY_NV = 0x92B0;
const GL_PLUS_CLAMPED_NV = 0x92B1;
const GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
const GL_MINUS_CLAMPED_NV = 0x92B3;
const GL_INVERT_OVG_NV = 0x92B4;
const GL_MAX_LGPU_GPUS_NVX = 0x92BA;
const GL_MULTICAST_GPUS_NV = 0x92BA;
const GL_PURGED_CONTEXT_RESET_NV = 0x92BB;
const GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
const GL_PRIMITIVE_BOUNDING_BOX = 0x92BE;
const GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE;
const GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92BE;
const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CD;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CE;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CF;
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5;
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
const GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
const GL_DEBUG_OUTPUT = 0x92E0;
const GL_DEBUG_OUTPUT_KHR = 0x92E0;
const GL_UNIFORM = 0x92E1;
const GL_UNIFORM_BLOCK = 0x92E2;
const GL_PROGRAM_INPUT = 0x92E3;
const GL_PROGRAM_OUTPUT = 0x92E4;
const GL_BUFFER_VARIABLE = 0x92E5;
const GL_SHADER_STORAGE_BLOCK = 0x92E6;
const GL_IS_PER_PATCH = 0x92E7;
const GL_IS_PER_PATCH_EXT = 0x92E7;
const GL_IS_PER_PATCH_OES = 0x92E7;
const GL_VERTEX_SUBROUTINE = 0x92E8;
const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const GL_GEOMETRY_SUBROUTINE = 0x92EB;
const GL_FRAGMENT_SUBROUTINE = 0x92EC;
const GL_COMPUTE_SUBROUTINE = 0x92ED;
const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const GL_ACTIVE_RESOURCES = 0x92F5;
const GL_MAX_NAME_LENGTH = 0x92F6;
const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GL_NAME_LENGTH = 0x92F9;
const GL_TYPE = 0x92FA;
const GL_ARRAY_SIZE = 0x92FB;
const GL_OFFSET = 0x92FC;
const GL_BLOCK_INDEX = 0x92FD;
const GL_ARRAY_STRIDE = 0x92FE;
const GL_MATRIX_STRIDE = 0x92FF;
const GL_IS_ROW_MAJOR = 0x9300;
const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const GL_BUFFER_BINDING = 0x9302;
const GL_BUFFER_DATA_SIZE = 0x9303;
const GL_NUM_ACTIVE_VARIABLES = 0x9304;
const GL_ACTIVE_VARIABLES = 0x9305;
const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308;
const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309;
const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309;
const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const GL_LOCATION = 0x930E;
const GL_LOCATION_INDEX = 0x930F;
const GL_LOCATION_INDEX_EXT = 0x930F;
const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317;
const GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317;
const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const GL_RASTER_MULTISAMPLE_EXT = 0x9327;
const GL_RASTER_SAMPLES_EXT = 0x9328;
const GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
const GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
const GL_DEPTH_SAMPLES_NV = 0x932D;
const GL_STENCIL_SAMPLES_NV = 0x932E;
const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
const GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
const GL_COVERAGE_MODULATION_NV = 0x9332;
const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
const GL_WARP_SIZE_NV = 0x9339;
const GL_WARPS_PER_SM_NV = 0x933A;
const GL_SM_COUNT_NV = 0x933B;
const GL_FILL_RECTANGLE_NV = 0x933C;
const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
const GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
const GL_LOCATION_COMPONENT = 0x934A;
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
const GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
const GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
const GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
const GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
const GL_CLIP_ORIGIN = 0x935C;
const GL_CLIP_ORIGIN_EXT = 0x935C;
const GL_CLIP_DEPTH_MODE = 0x935D;
const GL_CLIP_DEPTH_MODE_EXT = 0x935D;
const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
const GL_NEGATIVE_ONE_TO_ONE_EXT = 0x935E;
const GL_ZERO_TO_ONE = 0x935F;
const GL_ZERO_TO_ONE_EXT = 0x935F;
const GL_CLEAR_TEXTURE = 0x9365;
const GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
const GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
const GL_WEIGHTED_AVERAGE_ARB = 0x9367;
const GL_WEIGHTED_AVERAGE_EXT = 0x9367;
const GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
const GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
const GL_FONT_UNAVAILABLE_NV = 0x936A;
const GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
const GL_STANDARD_FONT_FORMAT_NV = 0x936C;
const GL_FRAGMENT_INPUT_NV = 0x936D;
const GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
const GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
const GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
const GL_MULTISAMPLES_NV = 0x9371;
const GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
const GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
const GL_CONFORMANT_NV = 0x9374;
const GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
const GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
const GL_NUM_SAMPLE_COUNTS = 0x9380;
const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
const GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;
const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;
const GL_VIEW_CLASS_EAC_R11 = 0x9383;
const GL_VIEW_CLASS_EAC_RG11 = 0x9384;
const GL_VIEW_CLASS_ETC2_RGB = 0x9385;
const GL_VIEW_CLASS_ETC2_RGBA = 0x9386;
const GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
const GL_VIEW_CLASS_ASTC_4X4_RGBA = 0x9388;
const GL_VIEW_CLASS_ASTC_5X4_RGBA = 0x9389;
const GL_VIEW_CLASS_ASTC_5X5_RGBA = 0x938A;
const GL_VIEW_CLASS_ASTC_6X5_RGBA = 0x938B;
const GL_VIEW_CLASS_ASTC_6X6_RGBA = 0x938C;
const GL_VIEW_CLASS_ASTC_8X5_RGBA = 0x938D;
const GL_VIEW_CLASS_ASTC_8X6_RGBA = 0x938E;
const GL_VIEW_CLASS_ASTC_8X8_RGBA = 0x938F;
const GL_VIEW_CLASS_ASTC_10X5_RGBA = 0x9390;
const GL_VIEW_CLASS_ASTC_10X6_RGBA = 0x9391;
const GL_VIEW_CLASS_ASTC_10X8_RGBA = 0x9392;
const GL_VIEW_CLASS_ASTC_10X10_RGBA = 0x9393;
const GL_VIEW_CLASS_ASTC_12X10_RGBA = 0x9394;
const GL_VIEW_CLASS_ASTC_12X12_RGBA = 0x9395;
const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0;
const GL_BGRA8_EXT = 0x93A1;
const GL_TEXTURE_USAGE_ANGLE = 0x93A2;
const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3;
const GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4;
const GL_PROGRAM_BINARY_ANGLE = 0x93A6;
const GL_COMPRESSED_RGBA_ASTC_4X4 = 0x93B0;
const GL_COMPRESSED_RGBA_ASTC_4X4_KHR = 0x93B0;
const GL_COMPRESSED_RGBA_ASTC_5X4 = 0x93B1;
const GL_COMPRESSED_RGBA_ASTC_5X4_KHR = 0x93B1;
const GL_COMPRESSED_RGBA_ASTC_5X5 = 0x93B2;
const GL_COMPRESSED_RGBA_ASTC_5X5_KHR = 0x93B2;
const GL_COMPRESSED_RGBA_ASTC_6X5 = 0x93B3;
const GL_COMPRESSED_RGBA_ASTC_6X5_KHR = 0x93B3;
const GL_COMPRESSED_RGBA_ASTC_6X6 = 0x93B4;
const GL_COMPRESSED_RGBA_ASTC_6X6_KHR = 0x93B4;
const GL_COMPRESSED_RGBA_ASTC_8X5 = 0x93B5;
const GL_COMPRESSED_RGBA_ASTC_8X5_KHR = 0x93B5;
const GL_COMPRESSED_RGBA_ASTC_8X6 = 0x93B6;
const GL_COMPRESSED_RGBA_ASTC_8X6_KHR = 0x93B6;
const GL_COMPRESSED_RGBA_ASTC_8X8 = 0x93B7;
const GL_COMPRESSED_RGBA_ASTC_8X8_KHR = 0x93B7;
const GL_COMPRESSED_RGBA_ASTC_10X5 = 0x93B8;
const GL_COMPRESSED_RGBA_ASTC_10X5_KHR = 0x93B8;
const GL_COMPRESSED_RGBA_ASTC_10X6 = 0x93B9;
const GL_COMPRESSED_RGBA_ASTC_10X6_KHR = 0x93B9;
const GL_COMPRESSED_RGBA_ASTC_10X8 = 0x93BA;
const GL_COMPRESSED_RGBA_ASTC_10X8_KHR = 0x93BA;
const GL_COMPRESSED_RGBA_ASTC_10X10 = 0x93BB;
const GL_COMPRESSED_RGBA_ASTC_10X10_KHR = 0x93BB;
const GL_COMPRESSED_RGBA_ASTC_12X10 = 0x93BC;
const GL_COMPRESSED_RGBA_ASTC_12X10_KHR = 0x93BC;
const GL_COMPRESSED_RGBA_ASTC_12X12 = 0x93BD;
const GL_COMPRESSED_RGBA_ASTC_12X12_KHR = 0x93BD;
const GL_COMPRESSED_RGBA_ASTC_3X3X3_OES = 0x93C0;
const GL_COMPRESSED_RGBA_ASTC_4X3X3_OES = 0x93C1;
const GL_COMPRESSED_RGBA_ASTC_4X4X3_OES = 0x93C2;
const GL_COMPRESSED_RGBA_ASTC_4X4X4_OES = 0x93C3;
const GL_COMPRESSED_RGBA_ASTC_5X4X4_OES = 0x93C4;
const GL_COMPRESSED_RGBA_ASTC_5X5X4_OES = 0x93C5;
const GL_COMPRESSED_RGBA_ASTC_5X5X5_OES = 0x93C6;
const GL_COMPRESSED_RGBA_ASTC_6X5X5_OES = 0x93C7;
const GL_COMPRESSED_RGBA_ASTC_6X6X5_OES = 0x93C8;
const GL_COMPRESSED_RGBA_ASTC_6X6X6_OES = 0x93C9;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4 = 0x93D0;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93D0;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X4 = 0x93D1;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93D1;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5 = 0x93D2;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93D2;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X5 = 0x93D3;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93D3;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6 = 0x93D4;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93D4;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X5 = 0x93D5;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93D5;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X6 = 0x93D6;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93D6;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X8 = 0x93D7;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93D7;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X5 = 0x93D8;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93D8;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X6 = 0x93D9;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93D9;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X8 = 0x93DA;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93DA;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X10 = 0x93DB;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93DB;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X10 = 0x93DC;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93DC;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X12 = 0x93DD;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93DD;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3X3X3_OES = 0x93E0;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X3X3_OES = 0x93E1;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4X3_OES = 0x93E2;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4X4_OES = 0x93E3;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X4X4_OES = 0x93E4;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5X4_OES = 0x93E5;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5X5_OES = 0x93E6;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X5X5_OES = 0x93E7;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6X5_OES = 0x93E8;
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6X6_OES = 0x93E9;
const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0;
const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1;
const GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
const GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530;
const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531;
const GL_SUBGROUP_SIZE_KHR = 0x9532;
const GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
const GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
const GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
const GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
const GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
const GL_MESH_WORK_GROUP_SIZE_NV = 0x953E;
const GL_TASK_WORK_GROUP_SIZE_NV = 0x953F;
const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;
const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;
const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
const GL_QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;
const GL_QUERY_RESOURCE_TEXTURE_NV = 0x9545;
const GL_QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;
const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;
const GL_PER_GPU_STORAGE_NV = 0x9548;
const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
const GL_UPLOAD_GPU_MASK_NVX = 0x954A;
const GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
const GL_SPIR_V_BINARY = 0x9552;
const GL_SPIR_V_BINARY_ARB = 0x9552;
const GL_SPIR_V_EXTENSIONS = 0x9553;
const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
const GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
const GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
const GL_MAX_MESH_VIEWS_NV = 0x9557;
const GL_RENDER_GPU_MASK_NV = 0x9558;
const GL_MESH_SHADER_NV = 0x9559;
const GL_TASK_SHADER_NV = 0x955A;
const GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
const GL_SHADING_RATE_IMAGE_NV = 0x9563;
const GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
const GL_MESH_VERTICES_OUT_NV = 0x9579;
const GL_MESH_PRIMITIVES_OUT_NV = 0x957A;
const GL_MESH_OUTPUT_TYPE_NV = 0x957B;
const GL_MESH_SUBROUTINE_NV = 0x957C;
const GL_TASK_SUBROUTINE_NV = 0x957D;
const GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
const GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
const GL_TEXTURE_TILING_EXT = 0x9580;
const GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
const GL_NUM_TILING_TYPES_EXT = 0x9582;
const GL_TILING_TYPES_EXT = 0x9583;
const GL_OPTIMAL_TILING_EXT = 0x9584;
const GL_LINEAR_TILING_EXT = 0x9585;
const GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
const GL_LAYOUT_GENERAL_EXT = 0x958D;
const GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
const GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
const GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592;
const GL_LAYOUT_TRANSFER_DST_EXT = 0x9593;
const GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
const GL_D3D12_FENCE_VALUE_EXT = 0x9595;
const GL_TIMELINE_SEMAPHORE_VALUE_NV = 0x9595;
const GL_NUM_DEVICE_UUIDS_EXT = 0x9596;
const GL_DEVICE_UUID_EXT = 0x9597;
const GL_DRIVER_UUID_EXT = 0x9598;
const GL_DEVICE_LUID_EXT = 0x9599;
const GL_DEVICE_NODE_MASK_EXT = 0x959A;
const GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
const GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
const GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
const GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
const GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
const GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
const GL_MEMORY_ATTACHABLE_NV = 0x95A8;
const GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
const GL_DETACHED_TEXTURES_NV = 0x95AA;
const GL_DETACHED_BUFFERS_NV = 0x95AB;
const GL_MAX_DETACHED_TEXTURES_NV = 0x95AC;
const GL_MAX_DETACHED_BUFFERS_NV = 0x95AD;
const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1;
const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2;
const GL_SEMAPHORE_TYPE_NV = 0x95B3;
const GL_SEMAPHORE_TYPE_BINARY_NV = 0x95B4;
const GL_SEMAPHORE_TYPE_TIMELINE_NV = 0x95B5;
const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
const GL_MAX_VIEWS_OVR = 0x9631;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
const GL_GS_SHADER_BINARY_MTK = 0x9640;
const GL_GS_PROGRAM_BINARY_MTK = 0x9641;
const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650;
const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651;
const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652;
const GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x96A0;
const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2;
const GL_VALIDATE_SHADER_BINARY_QCOM = 0x96A3;
const GL_SHADING_RATE_QCOM = 0x96A4;
const GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5;
const GL_SHADING_RATE_1X1_PIXELS_QCOM = 0x96A6;
const GL_SHADING_RATE_1X2_PIXELS_QCOM = 0x96A7;
const GL_SHADING_RATE_2X1_PIXELS_QCOM = 0x96A8;
const GL_SHADING_RATE_2X2_PIXELS_QCOM = 0x96A9;
const GL_SHADING_RATE_1X4_PIXELS_QCOM = 0x96AA;
const GL_SHADING_RATE_4X1_PIXELS_QCOM = 0x96AB;
const GL_SHADING_RATE_4X2_PIXELS_QCOM = 0x96AC;
const GL_SHADING_RATE_2X4_PIXELS_QCOM = 0x96AD;
const GL_SHADING_RATE_4X4_PIXELS_QCOM = 0x96AE;
const GL_SHADING_RATE_1X1_PIXELS_EXT = 0x96A6;
const GL_SHADING_RATE_1X2_PIXELS_EXT = 0x96A7;
const GL_SHADING_RATE_2X1_PIXELS_EXT = 0x96A8;
const GL_SHADING_RATE_2X2_PIXELS_EXT = 0x96A9;
const GL_SHADING_RATE_1X4_PIXELS_EXT = 0x96AA;
const GL_SHADING_RATE_4X1_PIXELS_EXT = 0x96AB;
const GL_SHADING_RATE_4X2_PIXELS_EXT = 0x96AC;
const GL_SHADING_RATE_2X4_PIXELS_EXT = 0x96AD;
const GL_SHADING_RATE_4X4_PIXELS_EXT = 0x96AE;
const GL_SURFACE_COMPRESSION_EXT = 0x96C0;
const GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = 0x96C1;
const GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x96C2;
const GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = 0x96C4;
const GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = 0x96C5;
const GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = 0x96C6;
const GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = 0x96C7;
const GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = 0x96C8;
const GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = 0x96C9;
const GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = 0x96CA;
const GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = 0x96CB;
const GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = 0x96CC;
const GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = 0x96CD;
const GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = 0x96CE;
const GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = 0x96CF;
const GL_SHADING_RATE_EXT = 0x96D0;
const GL_SHADING_RATE_ATTACHMENT_EXT = 0x96D1;
const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = 0x96D2;
const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = 0x96D3;
const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = 0x96D4;
const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = 0x96D5;
const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = 0x96D6;
const GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D7;
const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D8;
const GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96D9;
const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96DA;
const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x96DB;
const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x96DC;
const GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x96DD;
const GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x96DE;
const GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x96DF;
const GL_SHADER_CORE_COUNT_ARM = 0x96F0;
const GL_SHADER_CORE_ACTIVE_COUNT_ARM = 0x96F1;
const GL_SHADER_CORE_PRESENT_MASK_ARM = 0x96F2;
const GL_SHADER_CORE_MAX_WARP_COUNT_ARM = 0x96F3;
const GL_SHADER_CORE_PIXEL_RATE_ARM = 0x96F4;
const GL_SHADER_CORE_TEXEL_RATE_ARM = 0x96F5;
const GL_SHADER_CORE_FMA_RATE_ARM = 0x96F6;
const GL_TEXTURE_Y_DEGAMMA_QCOM = 0x9710;
const GL_TEXTURE_CBCR_DEGAMMA_QCOM = 0x9711;
const GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
const GL_CULL_VERTEX_IBM = 103050;
const GL_ALL_STATIC_DATA_IBM = 103060;
const GL_STATIC_VERTEX_ARRAY_IBM = 103061;
const GL_VERTEX_ARRAY_LIST_IBM = 103070;
const GL_NORMAL_ARRAY_LIST_IBM = 103071;
const GL_COLOR_ARRAY_LIST_IBM = 103072;
const GL_INDEX_ARRAY_LIST_IBM = 103073;
const GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
const GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
const GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
const GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
const GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
const GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
const GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
const GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
const GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
const GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
const GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
const GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
const GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
const GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
const GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
const GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
const GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
const GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
const GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
const GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
const GL_CLIP_NEAR_HINT_PGI = 0x1A220;
const GL_CLIP_FAR_HINT_PGI = 0x1A221;
const GL_WIDE_LINE_HINT_PGI = 0x1A222;
const GL_BACK_NORMALS_HINT_PGI = 0x1A223;
const GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
const GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
const GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
const GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
alias PFNglAccumPROC = fn void(GLenum op, GLfloat value);
PFNglAccumPROC accum = null;
alias PFNglAccumxOESPROC = fn void(GLenum op, GLfixed value);
PFNglAccumxOESPROC accumxOES = null;
alias PFNglActiveProgramEXTPROC = fn void(GLuint program);
PFNglActiveProgramEXTPROC activeProgramEXT = null;
alias PFNglActiveShaderProgramPROC = fn void(GLuint pipeline, GLuint program);
PFNglActiveShaderProgramPROC activeShaderProgram = null;
alias PFNglActiveShaderProgramEXTPROC = fn void(GLuint pipeline, GLuint program);
PFNglActiveShaderProgramEXTPROC activeShaderProgramEXT = null;
alias PFNglActiveStencilFaceEXTPROC = fn void(GLenum face);
PFNglActiveStencilFaceEXTPROC activeStencilFaceEXT = null;
alias PFNglActiveTexturePROC = fn void(GLenum texture);
PFNglActiveTexturePROC activeTexture = null;
alias PFNglActiveTextureARBPROC = fn void(GLenum texture);
PFNglActiveTextureARBPROC activeTextureARB = null;
alias PFNglActiveVaryingNVPROC = fn void(GLuint program, GLchar* name);
PFNglActiveVaryingNVPROC activeVaryingNV = null;
alias PFNglAlphaFragmentOp1ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
PFNglAlphaFragmentOp1ATIPROC alphaFragmentOp1ATI = null;
alias PFNglAlphaFragmentOp2ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
PFNglAlphaFragmentOp2ATIPROC alphaFragmentOp2ATI = null;
alias PFNglAlphaFragmentOp3ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
PFNglAlphaFragmentOp3ATIPROC alphaFragmentOp3ATI = null;
alias PFNglAlphaFuncPROC = fn void(GLenum func, GLfloat ref);
PFNglAlphaFuncPROC alphaFunc = null;
alias PFNglAlphaFuncQCOMPROC = fn void(GLenum func, GLclampf ref);
PFNglAlphaFuncQCOMPROC alphaFuncQCOM = null;
alias PFNglAlphaFuncxPROC = fn void(GLenum func, GLfixed ref);
PFNglAlphaFuncxPROC alphaFuncx = null;
alias PFNglAlphaFuncxOESPROC = fn void(GLenum func, GLfixed ref);
PFNglAlphaFuncxOESPROC alphaFuncxOES = null;
alias PFNglAlphaToCoverageDitherControlNVPROC = fn void(GLenum mode);
PFNglAlphaToCoverageDitherControlNVPROC alphaToCoverageDitherControlNV = null;
alias PFNglApplyFramebufferAttachmentCMAAINTELPROC = fn void();
PFNglApplyFramebufferAttachmentCMAAINTELPROC applyFramebufferAttachmentCMAAINTEL = null;
alias PFNglApplyTextureEXTPROC = fn void(GLenum mode);
PFNglApplyTextureEXTPROC applyTextureEXT = null;
alias PFNglAcquireKeyedMutexWin32EXTPROC = fn GLboolean(GLuint memory, GLuint64 key, GLuint timeout);
PFNglAcquireKeyedMutexWin32EXTPROC acquireKeyedMutexWin32EXT = null;
alias PFNglAreProgramsResidentNVPROC = fn GLboolean(GLsizei n, GLuint* programs, GLboolean* residences);
PFNglAreProgramsResidentNVPROC areProgramsResidentNV = null;
alias PFNglAreTexturesResidentPROC = fn GLboolean(GLsizei n, GLuint* textures, GLboolean* residences);
PFNglAreTexturesResidentPROC areTexturesResident = null;
alias PFNglAreTexturesResidentEXTPROC = fn GLboolean(GLsizei n, GLuint* textures, GLboolean* residences);
PFNglAreTexturesResidentEXTPROC areTexturesResidentEXT = null;
alias PFNglArrayElementPROC = fn void(GLint i);
PFNglArrayElementPROC arrayElement = null;
alias PFNglArrayElementEXTPROC = fn void(GLint i);
PFNglArrayElementEXTPROC arrayElementEXT = null;
alias PFNglArrayObjectATIPROC = fn void(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
PFNglArrayObjectATIPROC arrayObjectATI = null;
alias PFNglAsyncCopyBufferSubDataNVXPROC = fn GLuint(GLsizei waitSemaphoreCount, GLuint* waitSemaphoreArray, GLuint64* fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, GLuint* signalSemaphoreArray, GLuint64* signalValueArray);
PFNglAsyncCopyBufferSubDataNVXPROC asyncCopyBufferSubDataNVX = null;
alias PFNglAsyncCopyImageSubDataNVXPROC = fn GLuint(GLsizei waitSemaphoreCount, GLuint* waitSemaphoreArray, GLuint64* waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, GLuint* signalSemaphoreArray, GLuint64* signalValueArray);
PFNglAsyncCopyImageSubDataNVXPROC asyncCopyImageSubDataNVX = null;
alias PFNglAsyncMarkerSGIXPROC = fn void(GLuint marker);
PFNglAsyncMarkerSGIXPROC asyncMarkerSGIX = null;
alias PFNglAttachObjectARBPROC = fn void(GLhandleARB containerObj, GLhandleARB obj);
PFNglAttachObjectARBPROC attachObjectARB = null;
alias PFNglAttachShaderPROC = fn void(GLuint program, GLuint shader);
PFNglAttachShaderPROC attachShader = null;
alias PFNglBeginPROC = fn void(GLenum mode);
PFNglBeginPROC begin = null;
alias PFNglBeginConditionalRenderPROC = fn void(GLuint id, GLenum mode);
PFNglBeginConditionalRenderPROC beginConditionalRender = null;
alias PFNglBeginConditionalRenderNVPROC = fn void(GLuint id, GLenum mode);
PFNglBeginConditionalRenderNVPROC beginConditionalRenderNV = null;
alias PFNglBeginConditionalRenderNVXPROC = fn void(GLuint id);
PFNglBeginConditionalRenderNVXPROC beginConditionalRenderNVX = null;
alias PFNglBeginFragmentShaderATIPROC = fn void();
PFNglBeginFragmentShaderATIPROC beginFragmentShaderATI = null;
alias PFNglBeginOcclusionQueryNVPROC = fn void(GLuint id);
PFNglBeginOcclusionQueryNVPROC beginOcclusionQueryNV = null;
alias PFNglBeginPerfMonitorAMDPROC = fn void(GLuint monitor);
PFNglBeginPerfMonitorAMDPROC beginPerfMonitorAMD = null;
alias PFNglBeginPerfQueryINTELPROC = fn void(GLuint queryHandle);
PFNglBeginPerfQueryINTELPROC beginPerfQueryINTEL = null;
alias PFNglBeginQueryPROC = fn void(GLenum target, GLuint id);
PFNglBeginQueryPROC beginQuery = null;
alias PFNglBeginQueryARBPROC = fn void(GLenum target, GLuint id);
PFNglBeginQueryARBPROC beginQueryARB = null;
alias PFNglBeginQueryEXTPROC = fn void(GLenum target, GLuint id);
PFNglBeginQueryEXTPROC beginQueryEXT = null;
alias PFNglBeginQueryIndexedPROC = fn void(GLenum target, GLuint index, GLuint id);
PFNglBeginQueryIndexedPROC beginQueryIndexed = null;
alias PFNglBeginTransformFeedbackPROC = fn void(GLenum primitiveMode);
PFNglBeginTransformFeedbackPROC beginTransformFeedback = null;
alias PFNglBeginTransformFeedbackEXTPROC = fn void(GLenum primitiveMode);
PFNglBeginTransformFeedbackEXTPROC beginTransformFeedbackEXT = null;
alias PFNglBeginTransformFeedbackNVPROC = fn void(GLenum primitiveMode);
PFNglBeginTransformFeedbackNVPROC beginTransformFeedbackNV = null;
alias PFNglBeginVertexShaderEXTPROC = fn void();
PFNglBeginVertexShaderEXTPROC beginVertexShaderEXT = null;
alias PFNglBeginVideoCaptureNVPROC = fn void(GLuint video_capture_slot);
PFNglBeginVideoCaptureNVPROC beginVideoCaptureNV = null;
alias PFNglBindAttribLocationPROC = fn void(GLuint program, GLuint index, GLchar* name);
PFNglBindAttribLocationPROC bindAttribLocation = null;
alias PFNglBindAttribLocationARBPROC = fn void(GLhandleARB programObj, GLuint index, GLcharARB* name);
PFNglBindAttribLocationARBPROC bindAttribLocationARB = null;
alias PFNglBindBufferPROC = fn void(GLenum target, GLuint buffer);
PFNglBindBufferPROC bindBuffer = null;
alias PFNglBindBufferARBPROC = fn void(GLenum target, GLuint buffer);
PFNglBindBufferARBPROC bindBufferARB = null;
alias PFNglBindBufferBasePROC = fn void(GLenum target, GLuint index, GLuint buffer);
PFNglBindBufferBasePROC bindBufferBase = null;
alias PFNglBindBufferBaseEXTPROC = fn void(GLenum target, GLuint index, GLuint buffer);
PFNglBindBufferBaseEXTPROC bindBufferBaseEXT = null;
alias PFNglBindBufferBaseNVPROC = fn void(GLenum target, GLuint index, GLuint buffer);
PFNglBindBufferBaseNVPROC bindBufferBaseNV = null;
alias PFNglBindBufferOffsetEXTPROC = fn void(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
PFNglBindBufferOffsetEXTPROC bindBufferOffsetEXT = null;
alias PFNglBindBufferOffsetNVPROC = fn void(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
PFNglBindBufferOffsetNVPROC bindBufferOffsetNV = null;
alias PFNglBindBufferRangePROC = fn void(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglBindBufferRangePROC bindBufferRange = null;
alias PFNglBindBufferRangeEXTPROC = fn void(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglBindBufferRangeEXTPROC bindBufferRangeEXT = null;
alias PFNglBindBufferRangeNVPROC = fn void(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglBindBufferRangeNVPROC bindBufferRangeNV = null;
alias PFNglBindBuffersBasePROC = fn void(GLenum target, GLuint first, GLsizei count, GLuint* buffers);
PFNglBindBuffersBasePROC bindBuffersBase = null;
alias PFNglBindBuffersRangePROC = fn void(GLenum target, GLuint first, GLsizei count, GLuint* buffers, GLintptr* offsets, GLsizeiptr* sizes);
PFNglBindBuffersRangePROC bindBuffersRange = null;
alias PFNglBindFragDataLocationPROC = fn void(GLuint program, GLuint color, GLchar* name);
PFNglBindFragDataLocationPROC bindFragDataLocation = null;
alias PFNglBindFragDataLocationEXTPROC = fn void(GLuint program, GLuint color, GLchar* name);
PFNglBindFragDataLocationEXTPROC bindFragDataLocationEXT = null;
alias PFNglBindFragDataLocationIndexedPROC = fn void(GLuint program, GLuint colorNumber, GLuint index, GLchar* name);
PFNglBindFragDataLocationIndexedPROC bindFragDataLocationIndexed = null;
alias PFNglBindFragDataLocationIndexedEXTPROC = fn void(GLuint program, GLuint colorNumber, GLuint index, GLchar* name);
PFNglBindFragDataLocationIndexedEXTPROC bindFragDataLocationIndexedEXT = null;
alias PFNglBindFragmentShaderATIPROC = fn void(GLuint id);
PFNglBindFragmentShaderATIPROC bindFragmentShaderATI = null;
alias PFNglBindFramebufferPROC = fn void(GLenum target, GLuint framebuffer);
PFNglBindFramebufferPROC bindFramebuffer = null;
alias PFNglBindFramebufferEXTPROC = fn void(GLenum target, GLuint framebuffer);
PFNglBindFramebufferEXTPROC bindFramebufferEXT = null;
alias PFNglBindFramebufferOESPROC = fn void(GLenum target, GLuint framebuffer);
PFNglBindFramebufferOESPROC bindFramebufferOES = null;
alias PFNglBindImageTexturePROC = fn void(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
PFNglBindImageTexturePROC bindImageTexture = null;
alias PFNglBindImageTextureEXTPROC = fn void(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
PFNglBindImageTextureEXTPROC bindImageTextureEXT = null;
alias PFNglBindImageTexturesPROC = fn void(GLuint first, GLsizei count, GLuint* textures);
PFNglBindImageTexturesPROC bindImageTextures = null;
alias PFNglBindLightParameterEXTPROC = fn GLuint(GLenum light, GLenum value);
PFNglBindLightParameterEXTPROC bindLightParameterEXT = null;
alias PFNglBindMaterialParameterEXTPROC = fn GLuint(GLenum face, GLenum value);
PFNglBindMaterialParameterEXTPROC bindMaterialParameterEXT = null;
alias PFNglBindMultiTextureEXTPROC = fn void(GLenum texunit, GLenum target, GLuint texture);
PFNglBindMultiTextureEXTPROC bindMultiTextureEXT = null;
alias PFNglBindParameterEXTPROC = fn GLuint(GLenum value);
PFNglBindParameterEXTPROC bindParameterEXT = null;
alias PFNglBindProgramARBPROC = fn void(GLenum target, GLuint program);
PFNglBindProgramARBPROC bindProgramARB = null;
alias PFNglBindProgramNVPROC = fn void(GLenum target, GLuint id);
PFNglBindProgramNVPROC bindProgramNV = null;
alias PFNglBindProgramPipelinePROC = fn void(GLuint pipeline);
PFNglBindProgramPipelinePROC bindProgramPipeline = null;
alias PFNglBindProgramPipelineEXTPROC = fn void(GLuint pipeline);
PFNglBindProgramPipelineEXTPROC bindProgramPipelineEXT = null;
alias PFNglBindRenderbufferPROC = fn void(GLenum target, GLuint renderbuffer);
PFNglBindRenderbufferPROC bindRenderbuffer = null;
alias PFNglBindRenderbufferEXTPROC = fn void(GLenum target, GLuint renderbuffer);
PFNglBindRenderbufferEXTPROC bindRenderbufferEXT = null;
alias PFNglBindRenderbufferOESPROC = fn void(GLenum target, GLuint renderbuffer);
PFNglBindRenderbufferOESPROC bindRenderbufferOES = null;
alias PFNglBindSamplerPROC = fn void(GLuint unit, GLuint sampler);
PFNglBindSamplerPROC bindSampler = null;
alias PFNglBindSamplersPROC = fn void(GLuint first, GLsizei count, GLuint* samplers);
PFNglBindSamplersPROC bindSamplers = null;
alias PFNglBindShadingRateImageNVPROC = fn void(GLuint texture);
PFNglBindShadingRateImageNVPROC bindShadingRateImageNV = null;
alias PFNglBindTexGenParameterEXTPROC = fn GLuint(GLenum unit, GLenum coord, GLenum value);
PFNglBindTexGenParameterEXTPROC bindTexGenParameterEXT = null;
alias PFNglBindTexturePROC = fn void(GLenum target, GLuint texture);
PFNglBindTexturePROC bindTexture = null;
alias PFNglBindTextureEXTPROC = fn void(GLenum target, GLuint texture);
PFNglBindTextureEXTPROC bindTextureEXT = null;
alias PFNglBindTextureUnitPROC = fn void(GLuint unit, GLuint texture);
PFNglBindTextureUnitPROC bindTextureUnit = null;
alias PFNglBindTextureUnitParameterEXTPROC = fn GLuint(GLenum unit, GLenum value);
PFNglBindTextureUnitParameterEXTPROC bindTextureUnitParameterEXT = null;
alias PFNglBindTexturesPROC = fn void(GLuint first, GLsizei count, GLuint* textures);
PFNglBindTexturesPROC bindTextures = null;
alias PFNglBindTransformFeedbackPROC = fn void(GLenum target, GLuint id);
PFNglBindTransformFeedbackPROC bindTransformFeedback = null;
alias PFNglBindTransformFeedbackNVPROC = fn void(GLenum target, GLuint id);
PFNglBindTransformFeedbackNVPROC bindTransformFeedbackNV = null;
alias PFNglBindVertexArrayPROC = fn void(GLuint array);
PFNglBindVertexArrayPROC bindVertexArray = null;
alias PFNglBindVertexArrayAPPLEPROC = fn void(GLuint array);
PFNglBindVertexArrayAPPLEPROC bindVertexArrayAPPLE = null;
alias PFNglBindVertexArrayOESPROC = fn void(GLuint array);
PFNglBindVertexArrayOESPROC bindVertexArrayOES = null;
alias PFNglBindVertexBufferPROC = fn void(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
PFNglBindVertexBufferPROC bindVertexBuffer = null;
alias PFNglBindVertexBuffersPROC = fn void(GLuint first, GLsizei count, GLuint* buffers, GLintptr* offsets, GLsizei* strides);
PFNglBindVertexBuffersPROC bindVertexBuffers = null;
alias PFNglBindVertexShaderEXTPROC = fn void(GLuint id);
PFNglBindVertexShaderEXTPROC bindVertexShaderEXT = null;
alias PFNglBindVideoCaptureStreamBufferNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
PFNglBindVideoCaptureStreamBufferNVPROC bindVideoCaptureStreamBufferNV = null;
alias PFNglBindVideoCaptureStreamTextureNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
PFNglBindVideoCaptureStreamTextureNVPROC bindVideoCaptureStreamTextureNV = null;
alias PFNglBinormal3bEXTPROC = fn void(GLbyte bx, GLbyte by, GLbyte bz);
PFNglBinormal3bEXTPROC binormal3bEXT = null;
alias PFNglBinormal3bvEXTPROC = fn void(GLbyte* v);
PFNglBinormal3bvEXTPROC binormal3bvEXT = null;
alias PFNglBinormal3dEXTPROC = fn void(GLdouble bx, GLdouble by, GLdouble bz);
PFNglBinormal3dEXTPROC binormal3dEXT = null;
alias PFNglBinormal3dvEXTPROC = fn void(GLdouble* v);
PFNglBinormal3dvEXTPROC binormal3dvEXT = null;
alias PFNglBinormal3fEXTPROC = fn void(GLfloat bx, GLfloat by, GLfloat bz);
PFNglBinormal3fEXTPROC binormal3fEXT = null;
alias PFNglBinormal3fvEXTPROC = fn void(GLfloat* v);
PFNglBinormal3fvEXTPROC binormal3fvEXT = null;
alias PFNglBinormal3iEXTPROC = fn void(GLint bx, GLint by, GLint bz);
PFNglBinormal3iEXTPROC binormal3iEXT = null;
alias PFNglBinormal3ivEXTPROC = fn void(GLint* v);
PFNglBinormal3ivEXTPROC binormal3ivEXT = null;
alias PFNglBinormal3sEXTPROC = fn void(GLshort bx, GLshort by, GLshort bz);
PFNglBinormal3sEXTPROC binormal3sEXT = null;
alias PFNglBinormal3svEXTPROC = fn void(GLshort* v);
PFNglBinormal3svEXTPROC binormal3svEXT = null;
alias PFNglBinormalPointerEXTPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglBinormalPointerEXTPROC binormalPointerEXT = null;
alias PFNglBitmapPROC = fn void(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
PFNglBitmapPROC bitmap = null;
alias PFNglBitmapxOESPROC = fn void(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, GLubyte* bitmap);
PFNglBitmapxOESPROC bitmapxOES = null;
alias PFNglBlendBarrierPROC = fn void();
PFNglBlendBarrierPROC blendBarrier = null;
alias PFNglBlendBarrierKHRPROC = fn void();
PFNglBlendBarrierKHRPROC blendBarrierKHR = null;
alias PFNglBlendBarrierNVPROC = fn void();
PFNglBlendBarrierNVPROC blendBarrierNV = null;
alias PFNglBlendColorPROC = fn void(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
PFNglBlendColorPROC blendColor = null;
alias PFNglBlendColorEXTPROC = fn void(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
PFNglBlendColorEXTPROC blendColorEXT = null;
alias PFNglBlendColorxOESPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglBlendColorxOESPROC blendColorxOES = null;
alias PFNglBlendEquationPROC = fn void(GLenum mode);
PFNglBlendEquationPROC blendEquation = null;
alias PFNglBlendEquationEXTPROC = fn void(GLenum mode);
PFNglBlendEquationEXTPROC blendEquationEXT = null;
alias PFNglBlendEquationIndexedAMDPROC = fn void(GLuint buf, GLenum mode);
PFNglBlendEquationIndexedAMDPROC blendEquationIndexedAMD = null;
alias PFNglBlendEquationOESPROC = fn void(GLenum mode);
PFNglBlendEquationOESPROC blendEquationOES = null;
alias PFNglBlendEquationSeparatePROC = fn void(GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparatePROC blendEquationSeparate = null;
alias PFNglBlendEquationSeparateEXTPROC = fn void(GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateEXTPROC blendEquationSeparateEXT = null;
alias PFNglBlendEquationSeparateIndexedAMDPROC = fn void(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateIndexedAMDPROC blendEquationSeparateIndexedAMD = null;
alias PFNglBlendEquationSeparateOESPROC = fn void(GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateOESPROC blendEquationSeparateOES = null;
alias PFNglBlendEquationSeparateiPROC = fn void(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateiPROC blendEquationSeparatei = null;
alias PFNglBlendEquationSeparateiARBPROC = fn void(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateiARBPROC blendEquationSeparateiARB = null;
alias PFNglBlendEquationSeparateiEXTPROC = fn void(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateiEXTPROC blendEquationSeparateiEXT = null;
alias PFNglBlendEquationSeparateiOESPROC = fn void(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
PFNglBlendEquationSeparateiOESPROC blendEquationSeparateiOES = null;
alias PFNglBlendEquationiPROC = fn void(GLuint buf, GLenum mode);
PFNglBlendEquationiPROC blendEquationi = null;
alias PFNglBlendEquationiARBPROC = fn void(GLuint buf, GLenum mode);
PFNglBlendEquationiARBPROC blendEquationiARB = null;
alias PFNglBlendEquationiEXTPROC = fn void(GLuint buf, GLenum mode);
PFNglBlendEquationiEXTPROC blendEquationiEXT = null;
alias PFNglBlendEquationiOESPROC = fn void(GLuint buf, GLenum mode);
PFNglBlendEquationiOESPROC blendEquationiOES = null;
alias PFNglBlendFuncPROC = fn void(GLenum sfactor, GLenum dfactor);
PFNglBlendFuncPROC blendFunc = null;
alias PFNglBlendFuncIndexedAMDPROC = fn void(GLuint buf, GLenum src, GLenum dst);
PFNglBlendFuncIndexedAMDPROC blendFuncIndexedAMD = null;
alias PFNglBlendFuncSeparatePROC = fn void(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
PFNglBlendFuncSeparatePROC blendFuncSeparate = null;
alias PFNglBlendFuncSeparateEXTPROC = fn void(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
PFNglBlendFuncSeparateEXTPROC blendFuncSeparateEXT = null;
alias PFNglBlendFuncSeparateINGRPROC = fn void(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
PFNglBlendFuncSeparateINGRPROC blendFuncSeparateINGR = null;
alias PFNglBlendFuncSeparateIndexedAMDPROC = fn void(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateIndexedAMDPROC blendFuncSeparateIndexedAMD = null;
alias PFNglBlendFuncSeparateOESPROC = fn void(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateOESPROC blendFuncSeparateOES = null;
alias PFNglBlendFuncSeparateiPROC = fn void(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateiPROC blendFuncSeparatei = null;
alias PFNglBlendFuncSeparateiARBPROC = fn void(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateiARBPROC blendFuncSeparateiARB = null;
alias PFNglBlendFuncSeparateiEXTPROC = fn void(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateiEXTPROC blendFuncSeparateiEXT = null;
alias PFNglBlendFuncSeparateiOESPROC = fn void(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
PFNglBlendFuncSeparateiOESPROC blendFuncSeparateiOES = null;
alias PFNglBlendFunciPROC = fn void(GLuint buf, GLenum src, GLenum dst);
PFNglBlendFunciPROC blendFunci = null;
alias PFNglBlendFunciARBPROC = fn void(GLuint buf, GLenum src, GLenum dst);
PFNglBlendFunciARBPROC blendFunciARB = null;
alias PFNglBlendFunciEXTPROC = fn void(GLuint buf, GLenum src, GLenum dst);
PFNglBlendFunciEXTPROC blendFunciEXT = null;
alias PFNglBlendFunciOESPROC = fn void(GLuint buf, GLenum src, GLenum dst);
PFNglBlendFunciOESPROC blendFunciOES = null;
alias PFNglBlendParameteriNVPROC = fn void(GLenum pname, GLint value);
PFNglBlendParameteriNVPROC blendParameteriNV = null;
alias PFNglBlitFramebufferPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferPROC blitFramebuffer = null;
alias PFNglBlitFramebufferANGLEPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferANGLEPROC blitFramebufferANGLE = null;
alias PFNglBlitFramebufferEXTPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferEXTPROC blitFramebufferEXT = null;
alias PFNglBlitFramebufferLayerEXTPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint srcLayer, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLint dstLayer, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferLayerEXTPROC blitFramebufferLayerEXT = null;
alias PFNglBlitFramebufferLayersEXTPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferLayersEXTPROC blitFramebufferLayersEXT = null;
alias PFNglBlitFramebufferNVPROC = fn void(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitFramebufferNVPROC blitFramebufferNV = null;
alias PFNglBlitNamedFramebufferPROC = fn void(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglBlitNamedFramebufferPROC blitNamedFramebuffer = null;
alias PFNglBufferAddressRangeNVPROC = fn void(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
PFNglBufferAddressRangeNVPROC bufferAddressRangeNV = null;
alias PFNglBufferAttachMemoryNVPROC = fn void(GLenum target, GLuint memory, GLuint64 offset);
PFNglBufferAttachMemoryNVPROC bufferAttachMemoryNV = null;
alias PFNglBufferDataPROC = fn void(GLenum target, GLsizeiptr size, void* data, GLenum usage);
PFNglBufferDataPROC bufferData = null;
alias PFNglBufferDataARBPROC = fn void(GLenum target, GLsizeiptrARB size, void* data, GLenum usage);
PFNglBufferDataARBPROC bufferDataARB = null;
alias PFNglBufferPageCommitmentARBPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
PFNglBufferPageCommitmentARBPROC bufferPageCommitmentARB = null;
alias PFNglBufferPageCommitmentMemNVPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
PFNglBufferPageCommitmentMemNVPROC bufferPageCommitmentMemNV = null;
alias PFNglBufferParameteriAPPLEPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglBufferParameteriAPPLEPROC bufferParameteriAPPLE = null;
alias PFNglBufferStoragePROC = fn void(GLenum target, GLsizeiptr size, void* data, GLbitfield flags);
PFNglBufferStoragePROC bufferStorage = null;
alias PFNglBufferStorageEXTPROC = fn void(GLenum target, GLsizeiptr size, void* data, GLbitfield flags);
PFNglBufferStorageEXTPROC bufferStorageEXT = null;
alias PFNglBufferStorageExternalEXTPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
PFNglBufferStorageExternalEXTPROC bufferStorageExternalEXT = null;
alias PFNglBufferStorageMemEXTPROC = fn void(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
PFNglBufferStorageMemEXTPROC bufferStorageMemEXT = null;
alias PFNglBufferSubDataPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
PFNglBufferSubDataPROC bufferSubData = null;
alias PFNglBufferSubDataARBPROC = fn void(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data);
PFNglBufferSubDataARBPROC bufferSubDataARB = null;
alias PFNglCallCommandListNVPROC = fn void(GLuint list);
PFNglCallCommandListNVPROC callCommandListNV = null;
alias PFNglCallListPROC = fn void(GLuint list);
PFNglCallListPROC callList = null;
alias PFNglCallListsPROC = fn void(GLsizei n, GLenum type, void* lists);
PFNglCallListsPROC callLists = null;
alias PFNglCheckFramebufferStatusPROC = fn GLenum(GLenum target);
PFNglCheckFramebufferStatusPROC checkFramebufferStatus = null;
alias PFNglCheckFramebufferStatusEXTPROC = fn GLenum(GLenum target);
PFNglCheckFramebufferStatusEXTPROC checkFramebufferStatusEXT = null;
alias PFNglCheckFramebufferStatusOESPROC = fn GLenum(GLenum target);
PFNglCheckFramebufferStatusOESPROC checkFramebufferStatusOES = null;
alias PFNglCheckNamedFramebufferStatusPROC = fn GLenum(GLuint framebuffer, GLenum target);
PFNglCheckNamedFramebufferStatusPROC checkNamedFramebufferStatus = null;
alias PFNglCheckNamedFramebufferStatusEXTPROC = fn GLenum(GLuint framebuffer, GLenum target);
PFNglCheckNamedFramebufferStatusEXTPROC checkNamedFramebufferStatusEXT = null;
alias PFNglClampColorPROC = fn void(GLenum target, GLenum clamp);
PFNglClampColorPROC clampColor = null;
alias PFNglClampColorARBPROC = fn void(GLenum target, GLenum clamp);
PFNglClampColorARBPROC clampColorARB = null;
alias PFNglClearPROC = fn void(GLbitfield mask);
PFNglClearPROC clear = null;
alias PFNglClearAccumPROC = fn void(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
PFNglClearAccumPROC clearAccum = null;
alias PFNglClearAccumxOESPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglClearAccumxOESPROC clearAccumxOES = null;
alias PFNglClearBufferDataPROC = fn void(GLenum target, GLenum internalformat, GLenum format, GLenum type, void* data);
PFNglClearBufferDataPROC clearBufferData = null;
alias PFNglClearBufferSubDataPROC = fn void(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, void* data);
PFNglClearBufferSubDataPROC clearBufferSubData = null;
alias PFNglClearBufferfiPROC = fn void(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
PFNglClearBufferfiPROC clearBufferfi = null;
alias PFNglClearBufferfvPROC = fn void(GLenum buffer, GLint drawbuffer, GLfloat* value);
PFNglClearBufferfvPROC clearBufferfv = null;
alias PFNglClearBufferivPROC = fn void(GLenum buffer, GLint drawbuffer, GLint* value);
PFNglClearBufferivPROC clearBufferiv = null;
alias PFNglClearBufferuivPROC = fn void(GLenum buffer, GLint drawbuffer, GLuint* value);
PFNglClearBufferuivPROC clearBufferuiv = null;
alias PFNglClearColorPROC = fn void(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
PFNglClearColorPROC clearColor = null;
alias PFNglClearColorIiEXTPROC = fn void(GLint red, GLint green, GLint blue, GLint alpha);
PFNglClearColorIiEXTPROC clearColorIiEXT = null;
alias PFNglClearColorIuiEXTPROC = fn void(GLuint red, GLuint green, GLuint blue, GLuint alpha);
PFNglClearColorIuiEXTPROC clearColorIuiEXT = null;
alias PFNglClearColorxPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglClearColorxPROC clearColorx = null;
alias PFNglClearColorxOESPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglClearColorxOESPROC clearColorxOES = null;
alias PFNglClearDepthPROC = fn void(GLdouble depth);
PFNglClearDepthPROC clearDepth = null;
alias PFNglClearDepthdNVPROC = fn void(GLdouble depth);
PFNglClearDepthdNVPROC clearDepthdNV = null;
alias PFNglClearDepthfPROC = fn void(GLfloat d);
PFNglClearDepthfPROC clearDepthf = null;
alias PFNglClearDepthfOESPROC = fn void(GLclampf depth);
PFNglClearDepthfOESPROC clearDepthfOES = null;
alias PFNglClearDepthxPROC = fn void(GLfixed depth);
PFNglClearDepthxPROC clearDepthx = null;
alias PFNglClearDepthxOESPROC = fn void(GLfixed depth);
PFNglClearDepthxOESPROC clearDepthxOES = null;
alias PFNglClearIndexPROC = fn void(GLfloat c);
PFNglClearIndexPROC clearIndex = null;
alias PFNglClearNamedBufferDataPROC = fn void(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, void* data);
PFNglClearNamedBufferDataPROC clearNamedBufferData = null;
alias PFNglClearNamedBufferDataEXTPROC = fn void(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, void* data);
PFNglClearNamedBufferDataEXTPROC clearNamedBufferDataEXT = null;
alias PFNglClearNamedBufferSubDataPROC = fn void(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, void* data);
PFNglClearNamedBufferSubDataPROC clearNamedBufferSubData = null;
alias PFNglClearNamedBufferSubDataEXTPROC = fn void(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, void* data);
PFNglClearNamedBufferSubDataEXTPROC clearNamedBufferSubDataEXT = null;
alias PFNglClearNamedFramebufferfiPROC = fn void(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
PFNglClearNamedFramebufferfiPROC clearNamedFramebufferfi = null;
alias PFNglClearNamedFramebufferfvPROC = fn void(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value);
PFNglClearNamedFramebufferfvPROC clearNamedFramebufferfv = null;
alias PFNglClearNamedFramebufferivPROC = fn void(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLint* value);
PFNglClearNamedFramebufferivPROC clearNamedFramebufferiv = null;
alias PFNglClearNamedFramebufferuivPROC = fn void(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLuint* value);
PFNglClearNamedFramebufferuivPROC clearNamedFramebufferuiv = null;
alias PFNglClearPixelLocalStorageuiEXTPROC = fn void(GLsizei offset, GLsizei n, GLuint* values);
PFNglClearPixelLocalStorageuiEXTPROC clearPixelLocalStorageuiEXT = null;
alias PFNglClearStencilPROC = fn void(GLint s);
PFNglClearStencilPROC clearStencil = null;
alias PFNglClearTexImagePROC = fn void(GLuint texture, GLint level, GLenum format, GLenum type, void* data);
PFNglClearTexImagePROC clearTexImage = null;
alias PFNglClearTexImageEXTPROC = fn void(GLuint texture, GLint level, GLenum format, GLenum type, void* data);
PFNglClearTexImageEXTPROC clearTexImageEXT = null;
alias PFNglClearTexSubImagePROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* data);
PFNglClearTexSubImagePROC clearTexSubImage = null;
alias PFNglClearTexSubImageEXTPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* data);
PFNglClearTexSubImageEXTPROC clearTexSubImageEXT = null;
alias PFNglClientActiveTexturePROC = fn void(GLenum texture);
PFNglClientActiveTexturePROC clientActiveTexture = null;
alias PFNglClientActiveTextureARBPROC = fn void(GLenum texture);
PFNglClientActiveTextureARBPROC clientActiveTextureARB = null;
alias PFNglClientActiveVertexStreamATIPROC = fn void(GLenum stream);
PFNglClientActiveVertexStreamATIPROC clientActiveVertexStreamATI = null;
alias PFNglClientAttribDefaultEXTPROC = fn void(GLbitfield mask);
PFNglClientAttribDefaultEXTPROC clientAttribDefaultEXT = null;
alias PFNglClientWaitSemaphoreui64NVXPROC = fn void(GLsizei fenceObjectCount, GLuint* semaphoreArray, GLuint64* fenceValueArray);
PFNglClientWaitSemaphoreui64NVXPROC clientWaitSemaphoreui64NVX = null;
alias PFNglClientWaitSyncPROC = fn GLenum(GLsync sync, GLbitfield flags, GLuint64 timeout);
PFNglClientWaitSyncPROC clientWaitSync = null;
alias PFNglClientWaitSyncAPPLEPROC = fn GLenum(GLsync sync, GLbitfield flags, GLuint64 timeout);
PFNglClientWaitSyncAPPLEPROC clientWaitSyncAPPLE = null;
alias PFNglClipControlPROC = fn void(GLenum origin, GLenum depth);
PFNglClipControlPROC clipControl = null;
alias PFNglClipControlEXTPROC = fn void(GLenum origin, GLenum depth);
PFNglClipControlEXTPROC clipControlEXT = null;
alias PFNglClipPlanePROC = fn void(GLenum plane, GLdouble* equation);
PFNglClipPlanePROC clipPlane = null;
alias PFNglClipPlanefPROC = fn void(GLenum p, GLfloat* eqn);
PFNglClipPlanefPROC clipPlanef = null;
alias PFNglClipPlanefIMGPROC = fn void(GLenum p, GLfloat* eqn);
PFNglClipPlanefIMGPROC clipPlanefIMG = null;
alias PFNglClipPlanefOESPROC = fn void(GLenum plane, GLfloat* equation);
PFNglClipPlanefOESPROC clipPlanefOES = null;
alias PFNglClipPlanexPROC = fn void(GLenum plane, GLfixed* equation);
PFNglClipPlanexPROC clipPlanex = null;
alias PFNglClipPlanexIMGPROC = fn void(GLenum p, GLfixed* eqn);
PFNglClipPlanexIMGPROC clipPlanexIMG = null;
alias PFNglClipPlanexOESPROC = fn void(GLenum plane, GLfixed* equation);
PFNglClipPlanexOESPROC clipPlanexOES = null;
alias PFNglColor3bPROC = fn void(GLbyte red, GLbyte green, GLbyte blue);
PFNglColor3bPROC color3b = null;
alias PFNglColor3bvPROC = fn void(GLbyte* v);
PFNglColor3bvPROC color3bv = null;
alias PFNglColor3dPROC = fn void(GLdouble red, GLdouble green, GLdouble blue);
PFNglColor3dPROC color3d = null;
alias PFNglColor3dvPROC = fn void(GLdouble* v);
PFNglColor3dvPROC color3dv = null;
alias PFNglColor3fPROC = fn void(GLfloat red, GLfloat green, GLfloat blue);
PFNglColor3fPROC color3f = null;
alias PFNglColor3fVertex3fSUNPROC = fn void(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
PFNglColor3fVertex3fSUNPROC color3fVertex3fSUN = null;
alias PFNglColor3fVertex3fvSUNPROC = fn void(GLfloat* c, GLfloat* v);
PFNglColor3fVertex3fvSUNPROC color3fVertex3fvSUN = null;
alias PFNglColor3fvPROC = fn void(GLfloat* v);
PFNglColor3fvPROC color3fv = null;
alias PFNglColor3hNVPROC = fn void(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
PFNglColor3hNVPROC color3hNV = null;
alias PFNglColor3hvNVPROC = fn void(GLhalfNV* v);
PFNglColor3hvNVPROC color3hvNV = null;
alias PFNglColor3iPROC = fn void(GLint red, GLint green, GLint blue);
PFNglColor3iPROC color3i = null;
alias PFNglColor3ivPROC = fn void(GLint* v);
PFNglColor3ivPROC color3iv = null;
alias PFNglColor3sPROC = fn void(GLshort red, GLshort green, GLshort blue);
PFNglColor3sPROC color3s = null;
alias PFNglColor3svPROC = fn void(GLshort* v);
PFNglColor3svPROC color3sv = null;
alias PFNglColor3ubPROC = fn void(GLubyte red, GLubyte green, GLubyte blue);
PFNglColor3ubPROC color3ub = null;
alias PFNglColor3ubvPROC = fn void(GLubyte* v);
PFNglColor3ubvPROC color3ubv = null;
alias PFNglColor3uiPROC = fn void(GLuint red, GLuint green, GLuint blue);
PFNglColor3uiPROC color3ui = null;
alias PFNglColor3uivPROC = fn void(GLuint* v);
PFNglColor3uivPROC color3uiv = null;
alias PFNglColor3usPROC = fn void(GLushort red, GLushort green, GLushort blue);
PFNglColor3usPROC color3us = null;
alias PFNglColor3usvPROC = fn void(GLushort* v);
PFNglColor3usvPROC color3usv = null;
alias PFNglColor3xOESPROC = fn void(GLfixed red, GLfixed green, GLfixed blue);
PFNglColor3xOESPROC color3xOES = null;
alias PFNglColor3xvOESPROC = fn void(GLfixed* components);
PFNglColor3xvOESPROC color3xvOES = null;
alias PFNglColor4bPROC = fn void(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
PFNglColor4bPROC color4b = null;
alias PFNglColor4bvPROC = fn void(GLbyte* v);
PFNglColor4bvPROC color4bv = null;
alias PFNglColor4dPROC = fn void(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
PFNglColor4dPROC color4d = null;
alias PFNglColor4dvPROC = fn void(GLdouble* v);
PFNglColor4dvPROC color4dv = null;
alias PFNglColor4fPROC = fn void(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
PFNglColor4fPROC color4f = null;
alias PFNglColor4fNormal3fVertex3fSUNPROC = fn void(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglColor4fNormal3fVertex3fSUNPROC color4fNormal3fVertex3fSUN = null;
alias PFNglColor4fNormal3fVertex3fvSUNPROC = fn void(GLfloat* c, GLfloat* n, GLfloat* v);
PFNglColor4fNormal3fVertex3fvSUNPROC color4fNormal3fVertex3fvSUN = null;
alias PFNglColor4fvPROC = fn void(GLfloat* v);
PFNglColor4fvPROC color4fv = null;
alias PFNglColor4hNVPROC = fn void(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
PFNglColor4hNVPROC color4hNV = null;
alias PFNglColor4hvNVPROC = fn void(GLhalfNV* v);
PFNglColor4hvNVPROC color4hvNV = null;
alias PFNglColor4iPROC = fn void(GLint red, GLint green, GLint blue, GLint alpha);
PFNglColor4iPROC color4i = null;
alias PFNglColor4ivPROC = fn void(GLint* v);
PFNglColor4ivPROC color4iv = null;
alias PFNglColor4sPROC = fn void(GLshort red, GLshort green, GLshort blue, GLshort alpha);
PFNglColor4sPROC color4s = null;
alias PFNglColor4svPROC = fn void(GLshort* v);
PFNglColor4svPROC color4sv = null;
alias PFNglColor4ubPROC = fn void(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
PFNglColor4ubPROC color4ub = null;
alias PFNglColor4ubVertex2fSUNPROC = fn void(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
PFNglColor4ubVertex2fSUNPROC color4ubVertex2fSUN = null;
alias PFNglColor4ubVertex2fvSUNPROC = fn void(GLubyte* c, GLfloat* v);
PFNglColor4ubVertex2fvSUNPROC color4ubVertex2fvSUN = null;
alias PFNglColor4ubVertex3fSUNPROC = fn void(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
PFNglColor4ubVertex3fSUNPROC color4ubVertex3fSUN = null;
alias PFNglColor4ubVertex3fvSUNPROC = fn void(GLubyte* c, GLfloat* v);
PFNglColor4ubVertex3fvSUNPROC color4ubVertex3fvSUN = null;
alias PFNglColor4ubvPROC = fn void(GLubyte* v);
PFNglColor4ubvPROC color4ubv = null;
alias PFNglColor4uiPROC = fn void(GLuint red, GLuint green, GLuint blue, GLuint alpha);
PFNglColor4uiPROC color4ui = null;
alias PFNglColor4uivPROC = fn void(GLuint* v);
PFNglColor4uivPROC color4uiv = null;
alias PFNglColor4usPROC = fn void(GLushort red, GLushort green, GLushort blue, GLushort alpha);
PFNglColor4usPROC color4us = null;
alias PFNglColor4usvPROC = fn void(GLushort* v);
PFNglColor4usvPROC color4usv = null;
alias PFNglColor4xPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglColor4xPROC color4x = null;
alias PFNglColor4xOESPROC = fn void(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
PFNglColor4xOESPROC color4xOES = null;
alias PFNglColor4xvOESPROC = fn void(GLfixed* components);
PFNglColor4xvOESPROC color4xvOES = null;
alias PFNglColorFormatNVPROC = fn void(GLint size, GLenum type, GLsizei stride);
PFNglColorFormatNVPROC colorFormatNV = null;
alias PFNglColorFragmentOp1ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
PFNglColorFragmentOp1ATIPROC colorFragmentOp1ATI = null;
alias PFNglColorFragmentOp2ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
PFNglColorFragmentOp2ATIPROC colorFragmentOp2ATI = null;
alias PFNglColorFragmentOp3ATIPROC = fn void(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
PFNglColorFragmentOp3ATIPROC colorFragmentOp3ATI = null;
alias PFNglColorMaskPROC = fn void(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
PFNglColorMaskPROC colorMask = null;
alias PFNglColorMaskIndexedEXTPROC = fn void(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
PFNglColorMaskIndexedEXTPROC colorMaskIndexedEXT = null;
alias PFNglColorMaskiPROC = fn void(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
PFNglColorMaskiPROC colorMaski = null;
alias PFNglColorMaskiEXTPROC = fn void(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
PFNglColorMaskiEXTPROC colorMaskiEXT = null;
alias PFNglColorMaskiOESPROC = fn void(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
PFNglColorMaskiOESPROC colorMaskiOES = null;
alias PFNglColorMaterialPROC = fn void(GLenum face, GLenum mode);
PFNglColorMaterialPROC colorMaterial = null;
alias PFNglColorP3uiPROC = fn void(GLenum type, GLuint color);
PFNglColorP3uiPROC colorP3ui = null;
alias PFNglColorP3uivPROC = fn void(GLenum type, GLuint* color);
PFNglColorP3uivPROC colorP3uiv = null;
alias PFNglColorP4uiPROC = fn void(GLenum type, GLuint color);
PFNglColorP4uiPROC colorP4ui = null;
alias PFNglColorP4uivPROC = fn void(GLenum type, GLuint* color);
PFNglColorP4uivPROC colorP4uiv = null;
alias PFNglColorPointerPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglColorPointerPROC colorPointer = null;
alias PFNglColorPointerEXTPROC = fn void(GLint size, GLenum type, GLsizei stride, GLsizei count, void* pointer);
PFNglColorPointerEXTPROC colorPointerEXT = null;
alias PFNglColorPointerListIBMPROC = fn void(GLint size, GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglColorPointerListIBMPROC colorPointerListIBM = null;
alias PFNglColorPointervINTELPROC = fn void(GLint size, GLenum type, void** pointer);
PFNglColorPointervINTELPROC colorPointervINTEL = null;
alias PFNglColorSubTablePROC = fn void(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, void* data);
PFNglColorSubTablePROC colorSubTable = null;
alias PFNglColorSubTableEXTPROC = fn void(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, void* data);
PFNglColorSubTableEXTPROC colorSubTableEXT = null;
alias PFNglColorTablePROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, void* table);
PFNglColorTablePROC colorTable = null;
alias PFNglColorTableEXTPROC = fn void(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, void* table);
PFNglColorTableEXTPROC colorTableEXT = null;
alias PFNglColorTableParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglColorTableParameterfvPROC colorTableParameterfv = null;
alias PFNglColorTableParameterfvSGIPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglColorTableParameterfvSGIPROC colorTableParameterfvSGI = null;
alias PFNglColorTableParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglColorTableParameterivPROC colorTableParameteriv = null;
alias PFNglColorTableParameterivSGIPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglColorTableParameterivSGIPROC colorTableParameterivSGI = null;
alias PFNglColorTableSGIPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, void* table);
PFNglColorTableSGIPROC colorTableSGI = null;
alias PFNglCombinerInputNVPROC = fn void(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
PFNglCombinerInputNVPROC combinerInputNV = null;
alias PFNglCombinerOutputNVPROC = fn void(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
PFNglCombinerOutputNVPROC combinerOutputNV = null;
alias PFNglCombinerParameterfNVPROC = fn void(GLenum pname, GLfloat param);
PFNglCombinerParameterfNVPROC combinerParameterfNV = null;
alias PFNglCombinerParameterfvNVPROC = fn void(GLenum pname, GLfloat* params);
PFNglCombinerParameterfvNVPROC combinerParameterfvNV = null;
alias PFNglCombinerParameteriNVPROC = fn void(GLenum pname, GLint param);
PFNglCombinerParameteriNVPROC combinerParameteriNV = null;
alias PFNglCombinerParameterivNVPROC = fn void(GLenum pname, GLint* params);
PFNglCombinerParameterivNVPROC combinerParameterivNV = null;
alias PFNglCombinerStageParameterfvNVPROC = fn void(GLenum stage, GLenum pname, GLfloat* params);
PFNglCombinerStageParameterfvNVPROC combinerStageParameterfvNV = null;
alias PFNglCommandListSegmentsNVPROC = fn void(GLuint list, GLuint segments);
PFNglCommandListSegmentsNVPROC commandListSegmentsNV = null;
alias PFNglCompileCommandListNVPROC = fn void(GLuint list);
PFNglCompileCommandListNVPROC compileCommandListNV = null;
alias PFNglCompileShaderPROC = fn void(GLuint shader);
PFNglCompileShaderPROC compileShader = null;
alias PFNglCompileShaderARBPROC = fn void(GLhandleARB shaderObj);
PFNglCompileShaderARBPROC compileShaderARB = null;
alias PFNglCompileShaderIncludeARBPROC = fn void(GLuint shader, GLsizei count, GLchar** path, GLint* length);
PFNglCompileShaderIncludeARBPROC compileShaderIncludeARB = null;
alias PFNglCompressedMultiTexImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexImage1DEXTPROC compressedMultiTexImage1DEXT = null;
alias PFNglCompressedMultiTexImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexImage2DEXTPROC compressedMultiTexImage2DEXT = null;
alias PFNglCompressedMultiTexImage3DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexImage3DEXTPROC compressedMultiTexImage3DEXT = null;
alias PFNglCompressedMultiTexSubImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexSubImage1DEXTPROC compressedMultiTexSubImage1DEXT = null;
alias PFNglCompressedMultiTexSubImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexSubImage2DEXTPROC compressedMultiTexSubImage2DEXT = null;
alias PFNglCompressedMultiTexSubImage3DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedMultiTexSubImage3DEXTPROC compressedMultiTexSubImage3DEXT = null;
alias PFNglCompressedTexImage1DPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage1DPROC compressedTexImage1D = null;
alias PFNglCompressedTexImage1DARBPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage1DARBPROC compressedTexImage1DARB = null;
alias PFNglCompressedTexImage2DPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage2DPROC compressedTexImage2D = null;
alias PFNglCompressedTexImage2DARBPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage2DARBPROC compressedTexImage2DARB = null;
alias PFNglCompressedTexImage3DPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage3DPROC compressedTexImage3D = null;
alias PFNglCompressedTexImage3DARBPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage3DARBPROC compressedTexImage3DARB = null;
alias PFNglCompressedTexImage3DOESPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
PFNglCompressedTexImage3DOESPROC compressedTexImage3DOES = null;
alias PFNglCompressedTexSubImage1DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage1DPROC compressedTexSubImage1D = null;
alias PFNglCompressedTexSubImage1DARBPROC = fn void(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage1DARBPROC compressedTexSubImage1DARB = null;
alias PFNglCompressedTexSubImage2DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage2DPROC compressedTexSubImage2D = null;
alias PFNglCompressedTexSubImage2DARBPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage2DARBPROC compressedTexSubImage2DARB = null;
alias PFNglCompressedTexSubImage3DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage3DPROC compressedTexSubImage3D = null;
alias PFNglCompressedTexSubImage3DARBPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage3DARBPROC compressedTexSubImage3DARB = null;
alias PFNglCompressedTexSubImage3DOESPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTexSubImage3DOESPROC compressedTexSubImage3DOES = null;
alias PFNglCompressedTextureImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedTextureImage1DEXTPROC compressedTextureImage1DEXT = null;
alias PFNglCompressedTextureImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedTextureImage2DEXTPROC compressedTextureImage2DEXT = null;
alias PFNglCompressedTextureImage3DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* bits);
PFNglCompressedTextureImage3DEXTPROC compressedTextureImage3DEXT = null;
alias PFNglCompressedTextureSubImage1DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTextureSubImage1DPROC compressedTextureSubImage1D = null;
alias PFNglCompressedTextureSubImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedTextureSubImage1DEXTPROC compressedTextureSubImage1DEXT = null;
alias PFNglCompressedTextureSubImage2DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTextureSubImage2DPROC compressedTextureSubImage2D = null;
alias PFNglCompressedTextureSubImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedTextureSubImage2DEXTPROC compressedTextureSubImage2DEXT = null;
alias PFNglCompressedTextureSubImage3DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
PFNglCompressedTextureSubImage3DPROC compressedTextureSubImage3D = null;
alias PFNglCompressedTextureSubImage3DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* bits);
PFNglCompressedTextureSubImage3DEXTPROC compressedTextureSubImage3DEXT = null;
alias PFNglConservativeRasterParameterfNVPROC = fn void(GLenum pname, GLfloat value);
PFNglConservativeRasterParameterfNVPROC conservativeRasterParameterfNV = null;
alias PFNglConservativeRasterParameteriNVPROC = fn void(GLenum pname, GLint param);
PFNglConservativeRasterParameteriNVPROC conservativeRasterParameteriNV = null;
alias PFNglConvolutionFilter1DPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, void* image);
PFNglConvolutionFilter1DPROC convolutionFilter1D = null;
alias PFNglConvolutionFilter1DEXTPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, void* image);
PFNglConvolutionFilter1DEXTPROC convolutionFilter1DEXT = null;
alias PFNglConvolutionFilter2DPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, void* image);
PFNglConvolutionFilter2DPROC convolutionFilter2D = null;
alias PFNglConvolutionFilter2DEXTPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, void* image);
PFNglConvolutionFilter2DEXTPROC convolutionFilter2DEXT = null;
alias PFNglConvolutionParameterfPROC = fn void(GLenum target, GLenum pname, GLfloat params);
PFNglConvolutionParameterfPROC convolutionParameterf = null;
alias PFNglConvolutionParameterfEXTPROC = fn void(GLenum target, GLenum pname, GLfloat params);
PFNglConvolutionParameterfEXTPROC convolutionParameterfEXT = null;
alias PFNglConvolutionParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglConvolutionParameterfvPROC convolutionParameterfv = null;
alias PFNglConvolutionParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglConvolutionParameterfvEXTPROC convolutionParameterfvEXT = null;
alias PFNglConvolutionParameteriPROC = fn void(GLenum target, GLenum pname, GLint params);
PFNglConvolutionParameteriPROC convolutionParameteri = null;
alias PFNglConvolutionParameteriEXTPROC = fn void(GLenum target, GLenum pname, GLint params);
PFNglConvolutionParameteriEXTPROC convolutionParameteriEXT = null;
alias PFNglConvolutionParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglConvolutionParameterivPROC convolutionParameteriv = null;
alias PFNglConvolutionParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglConvolutionParameterivEXTPROC convolutionParameterivEXT = null;
alias PFNglConvolutionParameterxOESPROC = fn void(GLenum target, GLenum pname, GLfixed param);
PFNglConvolutionParameterxOESPROC convolutionParameterxOES = null;
alias PFNglConvolutionParameterxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglConvolutionParameterxvOESPROC convolutionParameterxvOES = null;
alias PFNglCopyBufferSubDataPROC = fn void(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
PFNglCopyBufferSubDataPROC copyBufferSubData = null;
alias PFNglCopyBufferSubDataNVPROC = fn void(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
PFNglCopyBufferSubDataNVPROC copyBufferSubDataNV = null;
alias PFNglCopyColorSubTablePROC = fn void(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
PFNglCopyColorSubTablePROC copyColorSubTable = null;
alias PFNglCopyColorSubTableEXTPROC = fn void(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
PFNglCopyColorSubTableEXTPROC copyColorSubTableEXT = null;
alias PFNglCopyColorTablePROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
PFNglCopyColorTablePROC copyColorTable = null;
alias PFNglCopyColorTableSGIPROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
PFNglCopyColorTableSGIPROC copyColorTableSGI = null;
alias PFNglCopyConvolutionFilter1DPROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
PFNglCopyConvolutionFilter1DPROC copyConvolutionFilter1D = null;
alias PFNglCopyConvolutionFilter1DEXTPROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
PFNglCopyConvolutionFilter1DEXTPROC copyConvolutionFilter1DEXT = null;
alias PFNglCopyConvolutionFilter2DPROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyConvolutionFilter2DPROC copyConvolutionFilter2D = null;
alias PFNglCopyConvolutionFilter2DEXTPROC = fn void(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyConvolutionFilter2DEXTPROC copyConvolutionFilter2DEXT = null;
alias PFNglCopyImageSubDataPROC = fn void(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
PFNglCopyImageSubDataPROC copyImageSubData = null;
alias PFNglCopyImageSubDataEXTPROC = fn void(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
PFNglCopyImageSubDataEXTPROC copyImageSubDataEXT = null;
alias PFNglCopyImageSubDataNVPROC = fn void(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
PFNglCopyImageSubDataNVPROC copyImageSubDataNV = null;
alias PFNglCopyImageSubDataOESPROC = fn void(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
PFNglCopyImageSubDataOESPROC copyImageSubDataOES = null;
alias PFNglCopyMultiTexImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
PFNglCopyMultiTexImage1DEXTPROC copyMultiTexImage1DEXT = null;
alias PFNglCopyMultiTexImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
PFNglCopyMultiTexImage2DEXTPROC copyMultiTexImage2DEXT = null;
alias PFNglCopyMultiTexSubImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
PFNglCopyMultiTexSubImage1DEXTPROC copyMultiTexSubImage1DEXT = null;
alias PFNglCopyMultiTexSubImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyMultiTexSubImage2DEXTPROC copyMultiTexSubImage2DEXT = null;
alias PFNglCopyMultiTexSubImage3DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyMultiTexSubImage3DEXTPROC copyMultiTexSubImage3DEXT = null;
alias PFNglCopyNamedBufferSubDataPROC = fn void(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
PFNglCopyNamedBufferSubDataPROC copyNamedBufferSubData = null;
alias PFNglCopyPathNVPROC = fn void(GLuint resultPath, GLuint srcPath);
PFNglCopyPathNVPROC copyPathNV = null;
alias PFNglCopyPixelsPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
PFNglCopyPixelsPROC copyPixels = null;
alias PFNglCopyTexImage1DPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
PFNglCopyTexImage1DPROC copyTexImage1D = null;
alias PFNglCopyTexImage1DEXTPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
PFNglCopyTexImage1DEXTPROC copyTexImage1DEXT = null;
alias PFNglCopyTexImage2DPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
PFNglCopyTexImage2DPROC copyTexImage2D = null;
alias PFNglCopyTexImage2DEXTPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
PFNglCopyTexImage2DEXTPROC copyTexImage2DEXT = null;
alias PFNglCopyTexSubImage1DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
PFNglCopyTexSubImage1DPROC copyTexSubImage1D = null;
alias PFNglCopyTexSubImage1DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
PFNglCopyTexSubImage1DEXTPROC copyTexSubImage1DEXT = null;
alias PFNglCopyTexSubImage2DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTexSubImage2DPROC copyTexSubImage2D = null;
alias PFNglCopyTexSubImage2DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTexSubImage2DEXTPROC copyTexSubImage2DEXT = null;
alias PFNglCopyTexSubImage3DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTexSubImage3DPROC copyTexSubImage3D = null;
alias PFNglCopyTexSubImage3DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTexSubImage3DEXTPROC copyTexSubImage3DEXT = null;
alias PFNglCopyTexSubImage3DOESPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTexSubImage3DOESPROC copyTexSubImage3DOES = null;
alias PFNglCopyTextureImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
PFNglCopyTextureImage1DEXTPROC copyTextureImage1DEXT = null;
alias PFNglCopyTextureImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
PFNglCopyTextureImage2DEXTPROC copyTextureImage2DEXT = null;
alias PFNglCopyTextureLevelsAPPLEPROC = fn void(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);
PFNglCopyTextureLevelsAPPLEPROC copyTextureLevelsAPPLE = null;
alias PFNglCopyTextureSubImage1DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
PFNglCopyTextureSubImage1DPROC copyTextureSubImage1D = null;
alias PFNglCopyTextureSubImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
PFNglCopyTextureSubImage1DEXTPROC copyTextureSubImage1DEXT = null;
alias PFNglCopyTextureSubImage2DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTextureSubImage2DPROC copyTextureSubImage2D = null;
alias PFNglCopyTextureSubImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTextureSubImage2DEXTPROC copyTextureSubImage2DEXT = null;
alias PFNglCopyTextureSubImage3DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTextureSubImage3DPROC copyTextureSubImage3D = null;
alias PFNglCopyTextureSubImage3DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglCopyTextureSubImage3DEXTPROC copyTextureSubImage3DEXT = null;
alias PFNglCoverFillPathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, GLfloat* transformValues);
PFNglCoverFillPathInstancedNVPROC coverFillPathInstancedNV = null;
alias PFNglCoverFillPathNVPROC = fn void(GLuint path, GLenum coverMode);
PFNglCoverFillPathNVPROC coverFillPathNV = null;
alias PFNglCoverStrokePathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, GLfloat* transformValues);
PFNglCoverStrokePathInstancedNVPROC coverStrokePathInstancedNV = null;
alias PFNglCoverStrokePathNVPROC = fn void(GLuint path, GLenum coverMode);
PFNglCoverStrokePathNVPROC coverStrokePathNV = null;
alias PFNglCoverageMaskNVPROC = fn void(GLboolean mask);
PFNglCoverageMaskNVPROC coverageMaskNV = null;
alias PFNglCoverageModulationNVPROC = fn void(GLenum components);
PFNglCoverageModulationNVPROC coverageModulationNV = null;
alias PFNglCoverageModulationTableNVPROC = fn void(GLsizei n, GLfloat* v);
PFNglCoverageModulationTableNVPROC coverageModulationTableNV = null;
alias PFNglCoverageOperationNVPROC = fn void(GLenum operation);
PFNglCoverageOperationNVPROC coverageOperationNV = null;
alias PFNglCreateBuffersPROC = fn void(GLsizei n, GLuint* buffers);
PFNglCreateBuffersPROC createBuffers = null;
alias PFNglCreateCommandListsNVPROC = fn void(GLsizei n, GLuint* lists);
PFNglCreateCommandListsNVPROC createCommandListsNV = null;
alias PFNglCreateFramebuffersPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglCreateFramebuffersPROC createFramebuffers = null;
alias PFNglCreateMemoryObjectsEXTPROC = fn void(GLsizei n, GLuint* memoryObjects);
PFNglCreateMemoryObjectsEXTPROC createMemoryObjectsEXT = null;
alias PFNglCreatePerfQueryINTELPROC = fn void(GLuint queryId, GLuint* queryHandle);
PFNglCreatePerfQueryINTELPROC createPerfQueryINTEL = null;
alias PFNglCreateProgramPROC = fn GLuint();
PFNglCreateProgramPROC createProgram = null;
alias PFNglCreateProgramObjectARBPROC = fn GLhandleARB();
PFNglCreateProgramObjectARBPROC createProgramObjectARB = null;
alias PFNglCreateProgramPipelinesPROC = fn void(GLsizei n, GLuint* pipelines);
PFNglCreateProgramPipelinesPROC createProgramPipelines = null;
alias PFNglCreateProgressFenceNVXPROC = fn GLuint();
PFNglCreateProgressFenceNVXPROC createProgressFenceNVX = null;
alias PFNglCreateQueriesPROC = fn void(GLenum target, GLsizei n, GLuint* ids);
PFNglCreateQueriesPROC createQueries = null;
alias PFNglCreateRenderbuffersPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglCreateRenderbuffersPROC createRenderbuffers = null;
alias PFNglCreateSamplersPROC = fn void(GLsizei n, GLuint* samplers);
PFNglCreateSamplersPROC createSamplers = null;
alias PFNglCreateSemaphoresNVPROC = fn void(GLsizei n, GLuint* semaphores);
PFNglCreateSemaphoresNVPROC createSemaphoresNV = null;
alias PFNglCreateShaderPROC = fn GLuint(GLenum type);
PFNglCreateShaderPROC createShader = null;
alias PFNglCreateShaderObjectARBPROC = fn GLhandleARB(GLenum shaderType);
PFNglCreateShaderObjectARBPROC createShaderObjectARB = null;
alias PFNglCreateShaderProgramEXTPROC = fn GLuint(GLenum type, GLchar* string);
PFNglCreateShaderProgramEXTPROC createShaderProgramEXT = null;
alias PFNglCreateShaderProgramvPROC = fn GLuint(GLenum type, GLsizei count, GLchar** strings);
PFNglCreateShaderProgramvPROC createShaderProgramv = null;
alias PFNglCreateShaderProgramvEXTPROC = fn GLuint(GLenum type, GLsizei count, GLchar** strings);
PFNglCreateShaderProgramvEXTPROC createShaderProgramvEXT = null;
alias PFNglCreateStatesNVPROC = fn void(GLsizei n, GLuint* states);
PFNglCreateStatesNVPROC createStatesNV = null;
alias PFNglCreateSyncFromCLeventARBPROC = fn GLsync(Ext_cl_context* context, Ext_cl_event* event, GLbitfield flags);
PFNglCreateSyncFromCLeventARBPROC createSyncFromCLeventARB = null;
alias PFNglCreateTexturesPROC = fn void(GLenum target, GLsizei n, GLuint* textures);
PFNglCreateTexturesPROC createTextures = null;
alias PFNglCreateTransformFeedbacksPROC = fn void(GLsizei n, GLuint* ids);
PFNglCreateTransformFeedbacksPROC createTransformFeedbacks = null;
alias PFNglCreateVertexArraysPROC = fn void(GLsizei n, GLuint* arrays);
PFNglCreateVertexArraysPROC createVertexArrays = null;
alias PFNglCullFacePROC = fn void(GLenum mode);
PFNglCullFacePROC cullFace = null;
alias PFNglCullParameterdvEXTPROC = fn void(GLenum pname, GLdouble* params);
PFNglCullParameterdvEXTPROC cullParameterdvEXT = null;
alias PFNglCullParameterfvEXTPROC = fn void(GLenum pname, GLfloat* params);
PFNglCullParameterfvEXTPROC cullParameterfvEXT = null;
alias PFNglCurrentPaletteMatrixARBPROC = fn void(GLint index);
PFNglCurrentPaletteMatrixARBPROC currentPaletteMatrixARB = null;
alias PFNglCurrentPaletteMatrixOESPROC = fn void(GLuint matrixpaletteindex);
PFNglCurrentPaletteMatrixOESPROC currentPaletteMatrixOES = null;
alias PFNglDebugMessageCallbackPROC = fn void(Ext_GLDEBUGPROC callback, void* userParam);
PFNglDebugMessageCallbackPROC debugMessageCallback = null;
alias PFNglDebugMessageCallbackAMDPROC = fn void(Ext_GLDEBUGPROCAMD callback, void* userParam);
PFNglDebugMessageCallbackAMDPROC debugMessageCallbackAMD = null;
alias PFNglDebugMessageCallbackARBPROC = fn void(Ext_GLDEBUGPROCARB callback, void* userParam);
PFNglDebugMessageCallbackARBPROC debugMessageCallbackARB = null;
alias PFNglDebugMessageCallbackKHRPROC = fn void(Ext_GLDEBUGPROCKHR callback, void* userParam);
PFNglDebugMessageCallbackKHRPROC debugMessageCallbackKHR = null;
alias PFNglDebugMessageControlPROC = fn void(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
PFNglDebugMessageControlPROC debugMessageControl = null;
alias PFNglDebugMessageControlARBPROC = fn void(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
PFNglDebugMessageControlARBPROC debugMessageControlARB = null;
alias PFNglDebugMessageControlKHRPROC = fn void(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
PFNglDebugMessageControlKHRPROC debugMessageControlKHR = null;
alias PFNglDebugMessageEnableAMDPROC = fn void(GLenum category, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
PFNglDebugMessageEnableAMDPROC debugMessageEnableAMD = null;
alias PFNglDebugMessageInsertPROC = fn void(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
PFNglDebugMessageInsertPROC debugMessageInsert = null;
alias PFNglDebugMessageInsertAMDPROC = fn void(GLenum category, GLenum severity, GLuint id, GLsizei length, GLchar* buf);
PFNglDebugMessageInsertAMDPROC debugMessageInsertAMD = null;
alias PFNglDebugMessageInsertARBPROC = fn void(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
PFNglDebugMessageInsertARBPROC debugMessageInsertARB = null;
alias PFNglDebugMessageInsertKHRPROC = fn void(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
PFNglDebugMessageInsertKHRPROC debugMessageInsertKHR = null;
alias PFNglDeformSGIXPROC = fn void(GLbitfield mask);
PFNglDeformSGIXPROC deformSGIX = null;
alias PFNglDeformationMap3dSGIXPROC = fn void(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble* points);
PFNglDeformationMap3dSGIXPROC deformationMap3dSGIX = null;
alias PFNglDeformationMap3fSGIXPROC = fn void(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat* points);
PFNglDeformationMap3fSGIXPROC deformationMap3fSGIX = null;
alias PFNglDeleteAsyncMarkersSGIXPROC = fn void(GLuint marker, GLsizei range);
PFNglDeleteAsyncMarkersSGIXPROC deleteAsyncMarkersSGIX = null;
alias PFNglDeleteBuffersPROC = fn void(GLsizei n, GLuint* buffers);
PFNglDeleteBuffersPROC deleteBuffers = null;
alias PFNglDeleteBuffersARBPROC = fn void(GLsizei n, GLuint* buffers);
PFNglDeleteBuffersARBPROC deleteBuffersARB = null;
alias PFNglDeleteCommandListsNVPROC = fn void(GLsizei n, GLuint* lists);
PFNglDeleteCommandListsNVPROC deleteCommandListsNV = null;
alias PFNglDeleteFencesAPPLEPROC = fn void(GLsizei n, GLuint* fences);
PFNglDeleteFencesAPPLEPROC deleteFencesAPPLE = null;
alias PFNglDeleteFencesNVPROC = fn void(GLsizei n, GLuint* fences);
PFNglDeleteFencesNVPROC deleteFencesNV = null;
alias PFNglDeleteFragmentShaderATIPROC = fn void(GLuint id);
PFNglDeleteFragmentShaderATIPROC deleteFragmentShaderATI = null;
alias PFNglDeleteFramebuffersPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglDeleteFramebuffersPROC deleteFramebuffers = null;
alias PFNglDeleteFramebuffersEXTPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglDeleteFramebuffersEXTPROC deleteFramebuffersEXT = null;
alias PFNglDeleteFramebuffersOESPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglDeleteFramebuffersOESPROC deleteFramebuffersOES = null;
alias PFNglDeleteListsPROC = fn void(GLuint list, GLsizei range);
PFNglDeleteListsPROC deleteLists = null;
alias PFNglDeleteMemoryObjectsEXTPROC = fn void(GLsizei n, GLuint* memoryObjects);
PFNglDeleteMemoryObjectsEXTPROC deleteMemoryObjectsEXT = null;
alias PFNglDeleteNamedStringARBPROC = fn void(GLint namelen, GLchar* name);
PFNglDeleteNamedStringARBPROC deleteNamedStringARB = null;
alias PFNglDeleteNamesAMDPROC = fn void(GLenum identifier, GLuint num, GLuint* names);
PFNglDeleteNamesAMDPROC deleteNamesAMD = null;
alias PFNglDeleteObjectARBPROC = fn void(GLhandleARB obj);
PFNglDeleteObjectARBPROC deleteObjectARB = null;
alias PFNglDeleteOcclusionQueriesNVPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteOcclusionQueriesNVPROC deleteOcclusionQueriesNV = null;
alias PFNglDeletePathsNVPROC = fn void(GLuint path, GLsizei range);
PFNglDeletePathsNVPROC deletePathsNV = null;
alias PFNglDeletePerfMonitorsAMDPROC = fn void(GLsizei n, GLuint* monitors);
PFNglDeletePerfMonitorsAMDPROC deletePerfMonitorsAMD = null;
alias PFNglDeletePerfQueryINTELPROC = fn void(GLuint queryHandle);
PFNglDeletePerfQueryINTELPROC deletePerfQueryINTEL = null;
alias PFNglDeleteProgramPROC = fn void(GLuint program);
PFNglDeleteProgramPROC deleteProgram = null;
alias PFNglDeleteProgramPipelinesPROC = fn void(GLsizei n, GLuint* pipelines);
PFNglDeleteProgramPipelinesPROC deleteProgramPipelines = null;
alias PFNglDeleteProgramPipelinesEXTPROC = fn void(GLsizei n, GLuint* pipelines);
PFNglDeleteProgramPipelinesEXTPROC deleteProgramPipelinesEXT = null;
alias PFNglDeleteProgramsARBPROC = fn void(GLsizei n, GLuint* programs);
PFNglDeleteProgramsARBPROC deleteProgramsARB = null;
alias PFNglDeleteProgramsNVPROC = fn void(GLsizei n, GLuint* programs);
PFNglDeleteProgramsNVPROC deleteProgramsNV = null;
alias PFNglDeleteQueriesPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteQueriesPROC deleteQueries = null;
alias PFNglDeleteQueriesARBPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteQueriesARBPROC deleteQueriesARB = null;
alias PFNglDeleteQueriesEXTPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteQueriesEXTPROC deleteQueriesEXT = null;
alias PFNglDeleteQueryResourceTagNVPROC = fn void(GLsizei n, GLint* tagIds);
PFNglDeleteQueryResourceTagNVPROC deleteQueryResourceTagNV = null;
alias PFNglDeleteRenderbuffersPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglDeleteRenderbuffersPROC deleteRenderbuffers = null;
alias PFNglDeleteRenderbuffersEXTPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglDeleteRenderbuffersEXTPROC deleteRenderbuffersEXT = null;
alias PFNglDeleteRenderbuffersOESPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglDeleteRenderbuffersOESPROC deleteRenderbuffersOES = null;
alias PFNglDeleteSamplersPROC = fn void(GLsizei count, GLuint* samplers);
PFNglDeleteSamplersPROC deleteSamplers = null;
alias PFNglDeleteSemaphoresEXTPROC = fn void(GLsizei n, GLuint* semaphores);
PFNglDeleteSemaphoresEXTPROC deleteSemaphoresEXT = null;
alias PFNglDeleteShaderPROC = fn void(GLuint shader);
PFNglDeleteShaderPROC deleteShader = null;
alias PFNglDeleteStatesNVPROC = fn void(GLsizei n, GLuint* states);
PFNglDeleteStatesNVPROC deleteStatesNV = null;
alias PFNglDeleteSyncPROC = fn void(GLsync sync);
PFNglDeleteSyncPROC deleteSync = null;
alias PFNglDeleteSyncAPPLEPROC = fn void(GLsync sync);
PFNglDeleteSyncAPPLEPROC deleteSyncAPPLE = null;
alias PFNglDeleteTexturesPROC = fn void(GLsizei n, GLuint* textures);
PFNglDeleteTexturesPROC deleteTextures = null;
alias PFNglDeleteTexturesEXTPROC = fn void(GLsizei n, GLuint* textures);
PFNglDeleteTexturesEXTPROC deleteTexturesEXT = null;
alias PFNglDeleteTransformFeedbacksPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteTransformFeedbacksPROC deleteTransformFeedbacks = null;
alias PFNglDeleteTransformFeedbacksNVPROC = fn void(GLsizei n, GLuint* ids);
PFNglDeleteTransformFeedbacksNVPROC deleteTransformFeedbacksNV = null;
alias PFNglDeleteVertexArraysPROC = fn void(GLsizei n, GLuint* arrays);
PFNglDeleteVertexArraysPROC deleteVertexArrays = null;
alias PFNglDeleteVertexArraysAPPLEPROC = fn void(GLsizei n, GLuint* arrays);
PFNglDeleteVertexArraysAPPLEPROC deleteVertexArraysAPPLE = null;
alias PFNglDeleteVertexArraysOESPROC = fn void(GLsizei n, GLuint* arrays);
PFNglDeleteVertexArraysOESPROC deleteVertexArraysOES = null;
alias PFNglDeleteVertexShaderEXTPROC = fn void(GLuint id);
PFNglDeleteVertexShaderEXTPROC deleteVertexShaderEXT = null;
alias PFNglDepthBoundsEXTPROC = fn void(GLclampd zmin, GLclampd zmax);
PFNglDepthBoundsEXTPROC depthBoundsEXT = null;
alias PFNglDepthBoundsdNVPROC = fn void(GLdouble zmin, GLdouble zmax);
PFNglDepthBoundsdNVPROC depthBoundsdNV = null;
alias PFNglDepthFuncPROC = fn void(GLenum func);
PFNglDepthFuncPROC depthFunc = null;
alias PFNglDepthMaskPROC = fn void(GLboolean flag);
PFNglDepthMaskPROC depthMask = null;
alias PFNglDepthRangePROC = fn void(GLdouble n, GLdouble f);
PFNglDepthRangePROC depthRange = null;
alias PFNglDepthRangeArraydvNVPROC = fn void(GLuint first, GLsizei count, GLdouble* v);
PFNglDepthRangeArraydvNVPROC depthRangeArraydvNV = null;
alias PFNglDepthRangeArrayfvNVPROC = fn void(GLuint first, GLsizei count, GLfloat* v);
PFNglDepthRangeArrayfvNVPROC depthRangeArrayfvNV = null;
alias PFNglDepthRangeArrayfvOESPROC = fn void(GLuint first, GLsizei count, GLfloat* v);
PFNglDepthRangeArrayfvOESPROC depthRangeArrayfvOES = null;
alias PFNglDepthRangeArrayvPROC = fn void(GLuint first, GLsizei count, GLdouble* v);
PFNglDepthRangeArrayvPROC depthRangeArrayv = null;
alias PFNglDepthRangeIndexedPROC = fn void(GLuint index, GLdouble n, GLdouble f);
PFNglDepthRangeIndexedPROC depthRangeIndexed = null;
alias PFNglDepthRangeIndexeddNVPROC = fn void(GLuint index, GLdouble n, GLdouble f);
PFNglDepthRangeIndexeddNVPROC depthRangeIndexeddNV = null;
alias PFNglDepthRangeIndexedfNVPROC = fn void(GLuint index, GLfloat n, GLfloat f);
PFNglDepthRangeIndexedfNVPROC depthRangeIndexedfNV = null;
alias PFNglDepthRangeIndexedfOESPROC = fn void(GLuint index, GLfloat n, GLfloat f);
PFNglDepthRangeIndexedfOESPROC depthRangeIndexedfOES = null;
alias PFNglDepthRangedNVPROC = fn void(GLdouble zNear, GLdouble zFar);
PFNglDepthRangedNVPROC depthRangedNV = null;
alias PFNglDepthRangefPROC = fn void(GLfloat n, GLfloat f);
PFNglDepthRangefPROC depthRangef = null;
alias PFNglDepthRangefOESPROC = fn void(GLclampf n, GLclampf f);
PFNglDepthRangefOESPROC depthRangefOES = null;
alias PFNglDepthRangexPROC = fn void(GLfixed n, GLfixed f);
PFNglDepthRangexPROC depthRangex = null;
alias PFNglDepthRangexOESPROC = fn void(GLfixed n, GLfixed f);
PFNglDepthRangexOESPROC depthRangexOES = null;
alias PFNglDetachObjectARBPROC = fn void(GLhandleARB containerObj, GLhandleARB attachedObj);
PFNglDetachObjectARBPROC detachObjectARB = null;
alias PFNglDetachShaderPROC = fn void(GLuint program, GLuint shader);
PFNglDetachShaderPROC detachShader = null;
alias PFNglDetailTexFuncSGISPROC = fn void(GLenum target, GLsizei n, GLfloat* points);
PFNglDetailTexFuncSGISPROC detailTexFuncSGIS = null;
alias PFNglDisablePROC = fn void(GLenum cap);
PFNglDisablePROC disable = null;
alias PFNglDisableClientStatePROC = fn void(GLenum array);
PFNglDisableClientStatePROC disableClientState = null;
alias PFNglDisableClientStateIndexedEXTPROC = fn void(GLenum array, GLuint index);
PFNglDisableClientStateIndexedEXTPROC disableClientStateIndexedEXT = null;
alias PFNglDisableClientStateiEXTPROC = fn void(GLenum array, GLuint index);
PFNglDisableClientStateiEXTPROC disableClientStateiEXT = null;
alias PFNglDisableDriverControlQCOMPROC = fn void(GLuint driverControl);
PFNglDisableDriverControlQCOMPROC disableDriverControlQCOM = null;
alias PFNglDisableIndexedEXTPROC = fn void(GLenum target, GLuint index);
PFNglDisableIndexedEXTPROC disableIndexedEXT = null;
alias PFNglDisableVariantClientStateEXTPROC = fn void(GLuint id);
PFNglDisableVariantClientStateEXTPROC disableVariantClientStateEXT = null;
alias PFNglDisableVertexArrayAttribPROC = fn void(GLuint vaobj, GLuint index);
PFNglDisableVertexArrayAttribPROC disableVertexArrayAttrib = null;
alias PFNglDisableVertexArrayAttribEXTPROC = fn void(GLuint vaobj, GLuint index);
PFNglDisableVertexArrayAttribEXTPROC disableVertexArrayAttribEXT = null;
alias PFNglDisableVertexArrayEXTPROC = fn void(GLuint vaobj, GLenum array);
PFNglDisableVertexArrayEXTPROC disableVertexArrayEXT = null;
alias PFNglDisableVertexAttribAPPLEPROC = fn void(GLuint index, GLenum pname);
PFNglDisableVertexAttribAPPLEPROC disableVertexAttribAPPLE = null;
alias PFNglDisableVertexAttribArrayPROC = fn void(GLuint index);
PFNglDisableVertexAttribArrayPROC disableVertexAttribArray = null;
alias PFNglDisableVertexAttribArrayARBPROC = fn void(GLuint index);
PFNglDisableVertexAttribArrayARBPROC disableVertexAttribArrayARB = null;
alias PFNglDisableiPROC = fn void(GLenum target, GLuint index);
PFNglDisableiPROC disablei = null;
alias PFNglDisableiEXTPROC = fn void(GLenum target, GLuint index);
PFNglDisableiEXTPROC disableiEXT = null;
alias PFNglDisableiNVPROC = fn void(GLenum target, GLuint index);
PFNglDisableiNVPROC disableiNV = null;
alias PFNglDisableiOESPROC = fn void(GLenum target, GLuint index);
PFNglDisableiOESPROC disableiOES = null;
alias PFNglDiscardFramebufferEXTPROC = fn void(GLenum target, GLsizei numAttachments, GLenum* attachments);
PFNglDiscardFramebufferEXTPROC discardFramebufferEXT = null;
alias PFNglDispatchComputePROC = fn void(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
PFNglDispatchComputePROC dispatchCompute = null;
alias PFNglDispatchComputeGroupSizeARBPROC = fn void(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
PFNglDispatchComputeGroupSizeARBPROC dispatchComputeGroupSizeARB = null;
alias PFNglDispatchComputeIndirectPROC = fn void(GLintptr indirect);
PFNglDispatchComputeIndirectPROC dispatchComputeIndirect = null;
alias PFNglDrawArraysPROC = fn void(GLenum mode, GLint first, GLsizei count);
PFNglDrawArraysPROC drawArrays = null;
alias PFNglDrawArraysEXTPROC = fn void(GLenum mode, GLint first, GLsizei count);
PFNglDrawArraysEXTPROC drawArraysEXT = null;
alias PFNglDrawArraysIndirectPROC = fn void(GLenum mode, void* indirect);
PFNglDrawArraysIndirectPROC drawArraysIndirect = null;
alias PFNglDrawArraysInstancedPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
PFNglDrawArraysInstancedPROC drawArraysInstanced = null;
alias PFNglDrawArraysInstancedANGLEPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
PFNglDrawArraysInstancedANGLEPROC drawArraysInstancedANGLE = null;
alias PFNglDrawArraysInstancedARBPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
PFNglDrawArraysInstancedARBPROC drawArraysInstancedARB = null;
alias PFNglDrawArraysInstancedBaseInstancePROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
PFNglDrawArraysInstancedBaseInstancePROC drawArraysInstancedBaseInstance = null;
alias PFNglDrawArraysInstancedBaseInstanceEXTPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
PFNglDrawArraysInstancedBaseInstanceEXTPROC drawArraysInstancedBaseInstanceEXT = null;
alias PFNglDrawArraysInstancedEXTPROC = fn void(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
PFNglDrawArraysInstancedEXTPROC drawArraysInstancedEXT = null;
alias PFNglDrawArraysInstancedNVPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
PFNglDrawArraysInstancedNVPROC drawArraysInstancedNV = null;
alias PFNglDrawBufferPROC = fn void(GLenum buf);
PFNglDrawBufferPROC drawBuffer = null;
alias PFNglDrawBuffersPROC = fn void(GLsizei n, GLenum* bufs);
PFNglDrawBuffersPROC drawBuffers = null;
alias PFNglDrawBuffersARBPROC = fn void(GLsizei n, GLenum* bufs);
PFNglDrawBuffersARBPROC drawBuffersARB = null;
alias PFNglDrawBuffersATIPROC = fn void(GLsizei n, GLenum* bufs);
PFNglDrawBuffersATIPROC drawBuffersATI = null;
alias PFNglDrawBuffersEXTPROC = fn void(GLsizei n, GLenum* bufs);
PFNglDrawBuffersEXTPROC drawBuffersEXT = null;
alias PFNglDrawBuffersIndexedEXTPROC = fn void(GLint n, GLenum* location, GLint* indices);
PFNglDrawBuffersIndexedEXTPROC drawBuffersIndexedEXT = null;
alias PFNglDrawBuffersNVPROC = fn void(GLsizei n, GLenum* bufs);
PFNglDrawBuffersNVPROC drawBuffersNV = null;
alias PFNglDrawCommandsAddressNVPROC = fn void(GLenum primitiveMode, GLuint64* indirects, GLsizei* sizes, GLuint count);
PFNglDrawCommandsAddressNVPROC drawCommandsAddressNV = null;
alias PFNglDrawCommandsNVPROC = fn void(GLenum primitiveMode, GLuint buffer, GLintptr* indirects, GLsizei* sizes, GLuint count);
PFNglDrawCommandsNVPROC drawCommandsNV = null;
alias PFNglDrawCommandsStatesAddressNVPROC = fn void(GLuint64* indirects, GLsizei* sizes, GLuint* states, GLuint* fbos, GLuint count);
PFNglDrawCommandsStatesAddressNVPROC drawCommandsStatesAddressNV = null;
alias PFNglDrawCommandsStatesNVPROC = fn void(GLuint buffer, GLintptr* indirects, GLsizei* sizes, GLuint* states, GLuint* fbos, GLuint count);
PFNglDrawCommandsStatesNVPROC drawCommandsStatesNV = null;
alias PFNglDrawElementArrayAPPLEPROC = fn void(GLenum mode, GLint first, GLsizei count);
PFNglDrawElementArrayAPPLEPROC drawElementArrayAPPLE = null;
alias PFNglDrawElementArrayATIPROC = fn void(GLenum mode, GLsizei count);
PFNglDrawElementArrayATIPROC drawElementArrayATI = null;
alias PFNglDrawElementsPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices);
PFNglDrawElementsPROC drawElements = null;
alias PFNglDrawElementsBaseVertexPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawElementsBaseVertexPROC drawElementsBaseVertex = null;
alias PFNglDrawElementsBaseVertexEXTPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawElementsBaseVertexEXTPROC drawElementsBaseVertexEXT = null;
alias PFNglDrawElementsBaseVertexOESPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawElementsBaseVertexOESPROC drawElementsBaseVertexOES = null;
alias PFNglDrawElementsIndirectPROC = fn void(GLenum mode, GLenum type, void* indirect);
PFNglDrawElementsIndirectPROC drawElementsIndirect = null;
alias PFNglDrawElementsInstancedPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount);
PFNglDrawElementsInstancedPROC drawElementsInstanced = null;
alias PFNglDrawElementsInstancedANGLEPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei primcount);
PFNglDrawElementsInstancedANGLEPROC drawElementsInstancedANGLE = null;
alias PFNglDrawElementsInstancedARBPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei primcount);
PFNglDrawElementsInstancedARBPROC drawElementsInstancedARB = null;
alias PFNglDrawElementsInstancedBaseInstancePROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLuint baseinstance);
PFNglDrawElementsInstancedBaseInstancePROC drawElementsInstancedBaseInstance = null;
alias PFNglDrawElementsInstancedBaseInstanceEXTPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLuint baseinstance);
PFNglDrawElementsInstancedBaseInstanceEXTPROC drawElementsInstancedBaseInstanceEXT = null;
alias PFNglDrawElementsInstancedBaseVertexPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex);
PFNglDrawElementsInstancedBaseVertexPROC drawElementsInstancedBaseVertex = null;
alias PFNglDrawElementsInstancedBaseVertexBaseInstancePROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
PFNglDrawElementsInstancedBaseVertexBaseInstancePROC drawElementsInstancedBaseVertexBaseInstance = null;
alias PFNglDrawElementsInstancedBaseVertexBaseInstanceEXTPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
PFNglDrawElementsInstancedBaseVertexBaseInstanceEXTPROC drawElementsInstancedBaseVertexBaseInstanceEXT = null;
alias PFNglDrawElementsInstancedBaseVertexEXTPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex);
PFNglDrawElementsInstancedBaseVertexEXTPROC drawElementsInstancedBaseVertexEXT = null;
alias PFNglDrawElementsInstancedBaseVertexOESPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex);
PFNglDrawElementsInstancedBaseVertexOESPROC drawElementsInstancedBaseVertexOES = null;
alias PFNglDrawElementsInstancedEXTPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei primcount);
PFNglDrawElementsInstancedEXTPROC drawElementsInstancedEXT = null;
alias PFNglDrawElementsInstancedNVPROC = fn void(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei primcount);
PFNglDrawElementsInstancedNVPROC drawElementsInstancedNV = null;
alias PFNglDrawMeshArraysSUNPROC = fn void(GLenum mode, GLint first, GLsizei count, GLsizei width);
PFNglDrawMeshArraysSUNPROC drawMeshArraysSUN = null;
alias PFNglDrawMeshTasksNVPROC = fn void(GLuint first, GLuint count);
PFNglDrawMeshTasksNVPROC drawMeshTasksNV = null;
alias PFNglDrawMeshTasksIndirectNVPROC = fn void(GLintptr indirect);
PFNglDrawMeshTasksIndirectNVPROC drawMeshTasksIndirectNV = null;
alias PFNglDrawPixelsPROC = fn void(GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglDrawPixelsPROC drawPixels = null;
alias PFNglDrawRangeElementArrayAPPLEPROC = fn void(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
PFNglDrawRangeElementArrayAPPLEPROC drawRangeElementArrayAPPLE = null;
alias PFNglDrawRangeElementArrayATIPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count);
PFNglDrawRangeElementArrayATIPROC drawRangeElementArrayATI = null;
alias PFNglDrawRangeElementsPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices);
PFNglDrawRangeElementsPROC drawRangeElements = null;
alias PFNglDrawRangeElementsBaseVertexPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawRangeElementsBaseVertexPROC drawRangeElementsBaseVertex = null;
alias PFNglDrawRangeElementsBaseVertexEXTPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawRangeElementsBaseVertexEXTPROC drawRangeElementsBaseVertexEXT = null;
alias PFNglDrawRangeElementsBaseVertexOESPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices, GLint basevertex);
PFNglDrawRangeElementsBaseVertexOESPROC drawRangeElementsBaseVertexOES = null;
alias PFNglDrawRangeElementsEXTPROC = fn void(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices);
PFNglDrawRangeElementsEXTPROC drawRangeElementsEXT = null;
alias PFNglDrawTexfOESPROC = fn void(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
PFNglDrawTexfOESPROC drawTexfOES = null;
alias PFNglDrawTexfvOESPROC = fn void(GLfloat* coords);
PFNglDrawTexfvOESPROC drawTexfvOES = null;
alias PFNglDrawTexiOESPROC = fn void(GLint x, GLint y, GLint z, GLint width, GLint height);
PFNglDrawTexiOESPROC drawTexiOES = null;
alias PFNglDrawTexivOESPROC = fn void(GLint* coords);
PFNglDrawTexivOESPROC drawTexivOES = null;
alias PFNglDrawTexsOESPROC = fn void(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
PFNglDrawTexsOESPROC drawTexsOES = null;
alias PFNglDrawTexsvOESPROC = fn void(GLshort* coords);
PFNglDrawTexsvOESPROC drawTexsvOES = null;
alias PFNglDrawTextureNVPROC = fn void(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
PFNglDrawTextureNVPROC drawTextureNV = null;
alias PFNglDrawTexxOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
PFNglDrawTexxOESPROC drawTexxOES = null;
alias PFNglDrawTexxvOESPROC = fn void(GLfixed* coords);
PFNglDrawTexxvOESPROC drawTexxvOES = null;
alias PFNglDrawTransformFeedbackPROC = fn void(GLenum mode, GLuint id);
PFNglDrawTransformFeedbackPROC drawTransformFeedback = null;
alias PFNglDrawTransformFeedbackEXTPROC = fn void(GLenum mode, GLuint id);
PFNglDrawTransformFeedbackEXTPROC drawTransformFeedbackEXT = null;
alias PFNglDrawTransformFeedbackInstancedPROC = fn void(GLenum mode, GLuint id, GLsizei instancecount);
PFNglDrawTransformFeedbackInstancedPROC drawTransformFeedbackInstanced = null;
alias PFNglDrawTransformFeedbackInstancedEXTPROC = fn void(GLenum mode, GLuint id, GLsizei instancecount);
PFNglDrawTransformFeedbackInstancedEXTPROC drawTransformFeedbackInstancedEXT = null;
alias PFNglDrawTransformFeedbackNVPROC = fn void(GLenum mode, GLuint id);
PFNglDrawTransformFeedbackNVPROC drawTransformFeedbackNV = null;
alias PFNglDrawTransformFeedbackStreamPROC = fn void(GLenum mode, GLuint id, GLuint stream);
PFNglDrawTransformFeedbackStreamPROC drawTransformFeedbackStream = null;
alias PFNglDrawTransformFeedbackStreamInstancedPROC = fn void(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
PFNglDrawTransformFeedbackStreamInstancedPROC drawTransformFeedbackStreamInstanced = null;
alias PFNglEGLImageTargetRenderbufferStorageOESPROC = fn void(GLenum target, GLeglImageOES image);
PFNglEGLImageTargetRenderbufferStorageOESPROC eGLImageTargetRenderbufferStorageOES = null;
alias PFNglEGLImageTargetTexStorageEXTPROC = fn void(GLenum target, GLeglImageOES image, GLint* attrib_list);
PFNglEGLImageTargetTexStorageEXTPROC eGLImageTargetTexStorageEXT = null;
alias PFNglEGLImageTargetTexture2DOESPROC = fn void(GLenum target, GLeglImageOES image);
PFNglEGLImageTargetTexture2DOESPROC eGLImageTargetTexture2DOES = null;
alias PFNglEGLImageTargetTextureStorageEXTPROC = fn void(GLuint texture, GLeglImageOES image, GLint* attrib_list);
PFNglEGLImageTargetTextureStorageEXTPROC eGLImageTargetTextureStorageEXT = null;
alias PFNglEdgeFlagPROC = fn void(GLboolean flag);
PFNglEdgeFlagPROC edgeFlag = null;
alias PFNglEdgeFlagFormatNVPROC = fn void(GLsizei stride);
PFNglEdgeFlagFormatNVPROC edgeFlagFormatNV = null;
alias PFNglEdgeFlagPointerPROC = fn void(GLsizei stride, void* pointer);
PFNglEdgeFlagPointerPROC edgeFlagPointer = null;
alias PFNglEdgeFlagPointerEXTPROC = fn void(GLsizei stride, GLsizei count, GLboolean* pointer);
PFNglEdgeFlagPointerEXTPROC edgeFlagPointerEXT = null;
alias PFNglEdgeFlagPointerListIBMPROC = fn void(GLint stride, GLboolean** pointer, GLint ptrstride);
PFNglEdgeFlagPointerListIBMPROC edgeFlagPointerListIBM = null;
alias PFNglEdgeFlagvPROC = fn void(GLboolean* flag);
PFNglEdgeFlagvPROC edgeFlagv = null;
alias PFNglElementPointerAPPLEPROC = fn void(GLenum type, void* pointer);
PFNglElementPointerAPPLEPROC elementPointerAPPLE = null;
alias PFNglElementPointerATIPROC = fn void(GLenum type, void* pointer);
PFNglElementPointerATIPROC elementPointerATI = null;
alias PFNglEnablePROC = fn void(GLenum cap);
PFNglEnablePROC enable = null;
alias PFNglEnableClientStatePROC = fn void(GLenum array);
PFNglEnableClientStatePROC enableClientState = null;
alias PFNglEnableClientStateIndexedEXTPROC = fn void(GLenum array, GLuint index);
PFNglEnableClientStateIndexedEXTPROC enableClientStateIndexedEXT = null;
alias PFNglEnableClientStateiEXTPROC = fn void(GLenum array, GLuint index);
PFNglEnableClientStateiEXTPROC enableClientStateiEXT = null;
alias PFNglEnableDriverControlQCOMPROC = fn void(GLuint driverControl);
PFNglEnableDriverControlQCOMPROC enableDriverControlQCOM = null;
alias PFNglEnableIndexedEXTPROC = fn void(GLenum target, GLuint index);
PFNglEnableIndexedEXTPROC enableIndexedEXT = null;
alias PFNglEnableVariantClientStateEXTPROC = fn void(GLuint id);
PFNglEnableVariantClientStateEXTPROC enableVariantClientStateEXT = null;
alias PFNglEnableVertexArrayAttribPROC = fn void(GLuint vaobj, GLuint index);
PFNglEnableVertexArrayAttribPROC enableVertexArrayAttrib = null;
alias PFNglEnableVertexArrayAttribEXTPROC = fn void(GLuint vaobj, GLuint index);
PFNglEnableVertexArrayAttribEXTPROC enableVertexArrayAttribEXT = null;
alias PFNglEnableVertexArrayEXTPROC = fn void(GLuint vaobj, GLenum array);
PFNglEnableVertexArrayEXTPROC enableVertexArrayEXT = null;
alias PFNglEnableVertexAttribAPPLEPROC = fn void(GLuint index, GLenum pname);
PFNglEnableVertexAttribAPPLEPROC enableVertexAttribAPPLE = null;
alias PFNglEnableVertexAttribArrayPROC = fn void(GLuint index);
PFNglEnableVertexAttribArrayPROC enableVertexAttribArray = null;
alias PFNglEnableVertexAttribArrayARBPROC = fn void(GLuint index);
PFNglEnableVertexAttribArrayARBPROC enableVertexAttribArrayARB = null;
alias PFNglEnableiPROC = fn void(GLenum target, GLuint index);
PFNglEnableiPROC enablei = null;
alias PFNglEnableiEXTPROC = fn void(GLenum target, GLuint index);
PFNglEnableiEXTPROC enableiEXT = null;
alias PFNglEnableiNVPROC = fn void(GLenum target, GLuint index);
PFNglEnableiNVPROC enableiNV = null;
alias PFNglEnableiOESPROC = fn void(GLenum target, GLuint index);
PFNglEnableiOESPROC enableiOES = null;
alias PFNglEndPROC = fn void();
PFNglEndPROC end = null;
alias PFNglEndConditionalRenderPROC = fn void();
PFNglEndConditionalRenderPROC endConditionalRender = null;
alias PFNglEndConditionalRenderNVPROC = fn void();
PFNglEndConditionalRenderNVPROC endConditionalRenderNV = null;
alias PFNglEndConditionalRenderNVXPROC = fn void();
PFNglEndConditionalRenderNVXPROC endConditionalRenderNVX = null;
alias PFNglEndFragmentShaderATIPROC = fn void();
PFNglEndFragmentShaderATIPROC endFragmentShaderATI = null;
alias PFNglEndListPROC = fn void();
PFNglEndListPROC endList = null;
alias PFNglEndOcclusionQueryNVPROC = fn void();
PFNglEndOcclusionQueryNVPROC endOcclusionQueryNV = null;
alias PFNglEndPerfMonitorAMDPROC = fn void(GLuint monitor);
PFNglEndPerfMonitorAMDPROC endPerfMonitorAMD = null;
alias PFNglEndPerfQueryINTELPROC = fn void(GLuint queryHandle);
PFNglEndPerfQueryINTELPROC endPerfQueryINTEL = null;
alias PFNglEndQueryPROC = fn void(GLenum target);
PFNglEndQueryPROC endQuery = null;
alias PFNglEndQueryARBPROC = fn void(GLenum target);
PFNglEndQueryARBPROC endQueryARB = null;
alias PFNglEndQueryEXTPROC = fn void(GLenum target);
PFNglEndQueryEXTPROC endQueryEXT = null;
alias PFNglEndQueryIndexedPROC = fn void(GLenum target, GLuint index);
PFNglEndQueryIndexedPROC endQueryIndexed = null;
alias PFNglEndTilingQCOMPROC = fn void(GLbitfield preserveMask);
PFNglEndTilingQCOMPROC endTilingQCOM = null;
alias PFNglEndTransformFeedbackPROC = fn void();
PFNglEndTransformFeedbackPROC endTransformFeedback = null;
alias PFNglEndTransformFeedbackEXTPROC = fn void();
PFNglEndTransformFeedbackEXTPROC endTransformFeedbackEXT = null;
alias PFNglEndTransformFeedbackNVPROC = fn void();
PFNglEndTransformFeedbackNVPROC endTransformFeedbackNV = null;
alias PFNglEndVertexShaderEXTPROC = fn void();
PFNglEndVertexShaderEXTPROC endVertexShaderEXT = null;
alias PFNglEndVideoCaptureNVPROC = fn void(GLuint video_capture_slot);
PFNglEndVideoCaptureNVPROC endVideoCaptureNV = null;
alias PFNglEvalCoord1dPROC = fn void(GLdouble u);
PFNglEvalCoord1dPROC evalCoord1d = null;
alias PFNglEvalCoord1dvPROC = fn void(GLdouble* u);
PFNglEvalCoord1dvPROC evalCoord1dv = null;
alias PFNglEvalCoord1fPROC = fn void(GLfloat u);
PFNglEvalCoord1fPROC evalCoord1f = null;
alias PFNglEvalCoord1fvPROC = fn void(GLfloat* u);
PFNglEvalCoord1fvPROC evalCoord1fv = null;
alias PFNglEvalCoord1xOESPROC = fn void(GLfixed u);
PFNglEvalCoord1xOESPROC evalCoord1xOES = null;
alias PFNglEvalCoord1xvOESPROC = fn void(GLfixed* coords);
PFNglEvalCoord1xvOESPROC evalCoord1xvOES = null;
alias PFNglEvalCoord2dPROC = fn void(GLdouble u, GLdouble v);
PFNglEvalCoord2dPROC evalCoord2d = null;
alias PFNglEvalCoord2dvPROC = fn void(GLdouble* u);
PFNglEvalCoord2dvPROC evalCoord2dv = null;
alias PFNglEvalCoord2fPROC = fn void(GLfloat u, GLfloat v);
PFNglEvalCoord2fPROC evalCoord2f = null;
alias PFNglEvalCoord2fvPROC = fn void(GLfloat* u);
PFNglEvalCoord2fvPROC evalCoord2fv = null;
alias PFNglEvalCoord2xOESPROC = fn void(GLfixed u, GLfixed v);
PFNglEvalCoord2xOESPROC evalCoord2xOES = null;
alias PFNglEvalCoord2xvOESPROC = fn void(GLfixed* coords);
PFNglEvalCoord2xvOESPROC evalCoord2xvOES = null;
alias PFNglEvalMapsNVPROC = fn void(GLenum target, GLenum mode);
PFNglEvalMapsNVPROC evalMapsNV = null;
alias PFNglEvalMesh1PROC = fn void(GLenum mode, GLint i1, GLint i2);
PFNglEvalMesh1PROC evalMesh1 = null;
alias PFNglEvalMesh2PROC = fn void(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
PFNglEvalMesh2PROC evalMesh2 = null;
alias PFNglEvalPoint1PROC = fn void(GLint i);
PFNglEvalPoint1PROC evalPoint1 = null;
alias PFNglEvalPoint2PROC = fn void(GLint i, GLint j);
PFNglEvalPoint2PROC evalPoint2 = null;
alias PFNglEvaluateDepthValuesARBPROC = fn void();
PFNglEvaluateDepthValuesARBPROC evaluateDepthValuesARB = null;
alias PFNglExecuteProgramNVPROC = fn void(GLenum target, GLuint id, GLfloat* params);
PFNglExecuteProgramNVPROC executeProgramNV = null;
alias PFNglExtGetBufferPointervQCOMPROC = fn void(GLenum target, void** params);
PFNglExtGetBufferPointervQCOMPROC extGetBufferPointervQCOM = null;
alias PFNglExtGetBuffersQCOMPROC = fn void(GLuint* buffers, GLint maxBuffers, GLint* numBuffers);
PFNglExtGetBuffersQCOMPROC extGetBuffersQCOM = null;
alias PFNglExtGetFramebuffersQCOMPROC = fn void(GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers);
PFNglExtGetFramebuffersQCOMPROC extGetFramebuffersQCOM = null;
alias PFNglExtGetProgramBinarySourceQCOMPROC = fn void(GLuint program, GLenum shadertype, GLchar* source, GLint* length);
PFNglExtGetProgramBinarySourceQCOMPROC extGetProgramBinarySourceQCOM = null;
alias PFNglExtGetProgramsQCOMPROC = fn void(GLuint* programs, GLint maxPrograms, GLint* numPrograms);
PFNglExtGetProgramsQCOMPROC extGetProgramsQCOM = null;
alias PFNglExtGetRenderbuffersQCOMPROC = fn void(GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers);
PFNglExtGetRenderbuffersQCOMPROC extGetRenderbuffersQCOM = null;
alias PFNglExtGetShadersQCOMPROC = fn void(GLuint* shaders, GLint maxShaders, GLint* numShaders);
PFNglExtGetShadersQCOMPROC extGetShadersQCOM = null;
alias PFNglExtGetTexLevelParameterivQCOMPROC = fn void(GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params);
PFNglExtGetTexLevelParameterivQCOMPROC extGetTexLevelParameterivQCOM = null;
alias PFNglExtGetTexSubImageQCOMPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* texels);
PFNglExtGetTexSubImageQCOMPROC extGetTexSubImageQCOM = null;
alias PFNglExtGetTexturesQCOMPROC = fn void(GLuint* textures, GLint maxTextures, GLint* numTextures);
PFNglExtGetTexturesQCOMPROC extGetTexturesQCOM = null;
alias PFNglExtIsProgramBinaryQCOMPROC = fn GLboolean(GLuint program);
PFNglExtIsProgramBinaryQCOMPROC extIsProgramBinaryQCOM = null;
alias PFNglExtTexObjectStateOverrideiQCOMPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglExtTexObjectStateOverrideiQCOMPROC extTexObjectStateOverrideiQCOM = null;
alias PFNglExtractComponentEXTPROC = fn void(GLuint res, GLuint src, GLuint num);
PFNglExtractComponentEXTPROC extractComponentEXT = null;
alias PFNglFeedbackBufferPROC = fn void(GLsizei size, GLenum type, GLfloat* buffer);
PFNglFeedbackBufferPROC feedbackBuffer = null;
alias PFNglFeedbackBufferxOESPROC = fn void(GLsizei n, GLenum type, GLfixed* buffer);
PFNglFeedbackBufferxOESPROC feedbackBufferxOES = null;
alias PFNglFenceSyncPROC = fn GLsync(GLenum condition, GLbitfield flags);
PFNglFenceSyncPROC fenceSync = null;
alias PFNglFenceSyncAPPLEPROC = fn GLsync(GLenum condition, GLbitfield flags);
PFNglFenceSyncAPPLEPROC fenceSyncAPPLE = null;
alias PFNglFinalCombinerInputNVPROC = fn void(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
PFNglFinalCombinerInputNVPROC finalCombinerInputNV = null;
alias PFNglFinishPROC = fn void();
PFNglFinishPROC finish = null;
alias PFNglFinishAsyncSGIXPROC = fn GLint(GLuint* markerp);
PFNglFinishAsyncSGIXPROC finishAsyncSGIX = null;
alias PFNglFinishFenceAPPLEPROC = fn void(GLuint fence);
PFNglFinishFenceAPPLEPROC finishFenceAPPLE = null;
alias PFNglFinishFenceNVPROC = fn void(GLuint fence);
PFNglFinishFenceNVPROC finishFenceNV = null;
alias PFNglFinishObjectAPPLEPROC = fn void(GLenum object, GLint name);
PFNglFinishObjectAPPLEPROC finishObjectAPPLE = null;
alias PFNglFinishTextureSUNXPROC = fn void();
PFNglFinishTextureSUNXPROC finishTextureSUNX = null;
alias PFNglFlushPROC = fn void();
PFNglFlushPROC flush = null;
alias PFNglFlushMappedBufferRangePROC = fn void(GLenum target, GLintptr offset, GLsizeiptr length);
PFNglFlushMappedBufferRangePROC flushMappedBufferRange = null;
alias PFNglFlushMappedBufferRangeAPPLEPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size);
PFNglFlushMappedBufferRangeAPPLEPROC flushMappedBufferRangeAPPLE = null;
alias PFNglFlushMappedBufferRangeEXTPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr length);
PFNglFlushMappedBufferRangeEXTPROC flushMappedBufferRangeEXT = null;
alias PFNglFlushMappedNamedBufferRangePROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr length);
PFNglFlushMappedNamedBufferRangePROC flushMappedNamedBufferRange = null;
alias PFNglFlushMappedNamedBufferRangeEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr length);
PFNglFlushMappedNamedBufferRangeEXTPROC flushMappedNamedBufferRangeEXT = null;
alias PFNglFlushPixelDataRangeNVPROC = fn void(GLenum target);
PFNglFlushPixelDataRangeNVPROC flushPixelDataRangeNV = null;
alias PFNglFlushRasterSGIXPROC = fn void();
PFNglFlushRasterSGIXPROC flushRasterSGIX = null;
alias PFNglFlushStaticDataIBMPROC = fn void(GLenum target);
PFNglFlushStaticDataIBMPROC flushStaticDataIBM = null;
alias PFNglFlushVertexArrayRangeAPPLEPROC = fn void(GLsizei length, void* pointer);
PFNglFlushVertexArrayRangeAPPLEPROC flushVertexArrayRangeAPPLE = null;
alias PFNglFlushVertexArrayRangeNVPROC = fn void();
PFNglFlushVertexArrayRangeNVPROC flushVertexArrayRangeNV = null;
alias PFNglFogCoordFormatNVPROC = fn void(GLenum type, GLsizei stride);
PFNglFogCoordFormatNVPROC fogCoordFormatNV = null;
alias PFNglFogCoordPointerPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglFogCoordPointerPROC fogCoordPointer = null;
alias PFNglFogCoordPointerEXTPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglFogCoordPointerEXTPROC fogCoordPointerEXT = null;
alias PFNglFogCoordPointerListIBMPROC = fn void(GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglFogCoordPointerListIBMPROC fogCoordPointerListIBM = null;
alias PFNglFogCoorddPROC = fn void(GLdouble coord);
PFNglFogCoorddPROC fogCoordd = null;
alias PFNglFogCoorddEXTPROC = fn void(GLdouble coord);
PFNglFogCoorddEXTPROC fogCoorddEXT = null;
alias PFNglFogCoorddvPROC = fn void(GLdouble* coord);
PFNglFogCoorddvPROC fogCoorddv = null;
alias PFNglFogCoorddvEXTPROC = fn void(GLdouble* coord);
PFNglFogCoorddvEXTPROC fogCoorddvEXT = null;
alias PFNglFogCoordfPROC = fn void(GLfloat coord);
PFNglFogCoordfPROC fogCoordf = null;
alias PFNglFogCoordfEXTPROC = fn void(GLfloat coord);
PFNglFogCoordfEXTPROC fogCoordfEXT = null;
alias PFNglFogCoordfvPROC = fn void(GLfloat* coord);
PFNglFogCoordfvPROC fogCoordfv = null;
alias PFNglFogCoordfvEXTPROC = fn void(GLfloat* coord);
PFNglFogCoordfvEXTPROC fogCoordfvEXT = null;
alias PFNglFogCoordhNVPROC = fn void(GLhalfNV fog);
PFNglFogCoordhNVPROC fogCoordhNV = null;
alias PFNglFogCoordhvNVPROC = fn void(GLhalfNV* fog);
PFNglFogCoordhvNVPROC fogCoordhvNV = null;
alias PFNglFogFuncSGISPROC = fn void(GLsizei n, GLfloat* points);
PFNglFogFuncSGISPROC fogFuncSGIS = null;
alias PFNglFogfPROC = fn void(GLenum pname, GLfloat param);
PFNglFogfPROC fogf = null;
alias PFNglFogfvPROC = fn void(GLenum pname, GLfloat* params);
PFNglFogfvPROC fogfv = null;
alias PFNglFogiPROC = fn void(GLenum pname, GLint param);
PFNglFogiPROC fogi = null;
alias PFNglFogivPROC = fn void(GLenum pname, GLint* params);
PFNglFogivPROC fogiv = null;
alias PFNglFogxPROC = fn void(GLenum pname, GLfixed param);
PFNglFogxPROC fogx = null;
alias PFNglFogxOESPROC = fn void(GLenum pname, GLfixed param);
PFNglFogxOESPROC fogxOES = null;
alias PFNglFogxvPROC = fn void(GLenum pname, GLfixed* param);
PFNglFogxvPROC fogxv = null;
alias PFNglFogxvOESPROC = fn void(GLenum pname, GLfixed* param);
PFNglFogxvOESPROC fogxvOES = null;
alias PFNglFragmentColorMaterialSGIXPROC = fn void(GLenum face, GLenum mode);
PFNglFragmentColorMaterialSGIXPROC fragmentColorMaterialSGIX = null;
alias PFNglFragmentCoverageColorNVPROC = fn void(GLuint color);
PFNglFragmentCoverageColorNVPROC fragmentCoverageColorNV = null;
alias PFNglFragmentLightModelfSGIXPROC = fn void(GLenum pname, GLfloat param);
PFNglFragmentLightModelfSGIXPROC fragmentLightModelfSGIX = null;
alias PFNglFragmentLightModelfvSGIXPROC = fn void(GLenum pname, GLfloat* params);
PFNglFragmentLightModelfvSGIXPROC fragmentLightModelfvSGIX = null;
alias PFNglFragmentLightModeliSGIXPROC = fn void(GLenum pname, GLint param);
PFNglFragmentLightModeliSGIXPROC fragmentLightModeliSGIX = null;
alias PFNglFragmentLightModelivSGIXPROC = fn void(GLenum pname, GLint* params);
PFNglFragmentLightModelivSGIXPROC fragmentLightModelivSGIX = null;
alias PFNglFragmentLightfSGIXPROC = fn void(GLenum light, GLenum pname, GLfloat param);
PFNglFragmentLightfSGIXPROC fragmentLightfSGIX = null;
alias PFNglFragmentLightfvSGIXPROC = fn void(GLenum light, GLenum pname, GLfloat* params);
PFNglFragmentLightfvSGIXPROC fragmentLightfvSGIX = null;
alias PFNglFragmentLightiSGIXPROC = fn void(GLenum light, GLenum pname, GLint param);
PFNglFragmentLightiSGIXPROC fragmentLightiSGIX = null;
alias PFNglFragmentLightivSGIXPROC = fn void(GLenum light, GLenum pname, GLint* params);
PFNglFragmentLightivSGIXPROC fragmentLightivSGIX = null;
alias PFNglFragmentMaterialfSGIXPROC = fn void(GLenum face, GLenum pname, GLfloat param);
PFNglFragmentMaterialfSGIXPROC fragmentMaterialfSGIX = null;
alias PFNglFragmentMaterialfvSGIXPROC = fn void(GLenum face, GLenum pname, GLfloat* params);
PFNglFragmentMaterialfvSGIXPROC fragmentMaterialfvSGIX = null;
alias PFNglFragmentMaterialiSGIXPROC = fn void(GLenum face, GLenum pname, GLint param);
PFNglFragmentMaterialiSGIXPROC fragmentMaterialiSGIX = null;
alias PFNglFragmentMaterialivSGIXPROC = fn void(GLenum face, GLenum pname, GLint* params);
PFNglFragmentMaterialivSGIXPROC fragmentMaterialivSGIX = null;
alias PFNglFrameTerminatorGREMEDYPROC = fn void();
PFNglFrameTerminatorGREMEDYPROC frameTerminatorGREMEDY = null;
alias PFNglFrameZoomSGIXPROC = fn void(GLint factor);
PFNglFrameZoomSGIXPROC frameZoomSGIX = null;
alias PFNglFramebufferDrawBufferEXTPROC = fn void(GLuint framebuffer, GLenum mode);
PFNglFramebufferDrawBufferEXTPROC framebufferDrawBufferEXT = null;
alias PFNglFramebufferDrawBuffersEXTPROC = fn void(GLuint framebuffer, GLsizei n, GLenum* bufs);
PFNglFramebufferDrawBuffersEXTPROC framebufferDrawBuffersEXT = null;
alias PFNglFramebufferFetchBarrierEXTPROC = fn void();
PFNglFramebufferFetchBarrierEXTPROC framebufferFetchBarrierEXT = null;
alias PFNglFramebufferFetchBarrierQCOMPROC = fn void();
PFNglFramebufferFetchBarrierQCOMPROC framebufferFetchBarrierQCOM = null;
alias PFNglFramebufferFoveationConfigQCOMPROC = fn void(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint* providedFeatures);
PFNglFramebufferFoveationConfigQCOMPROC framebufferFoveationConfigQCOM = null;
alias PFNglFramebufferFoveationParametersQCOMPROC = fn void(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
PFNglFramebufferFoveationParametersQCOMPROC framebufferFoveationParametersQCOM = null;
alias PFNglFramebufferParameteriPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglFramebufferParameteriPROC framebufferParameteri = null;
alias PFNglFramebufferPixelLocalStorageSizeEXTPROC = fn void(GLuint target, GLsizei size);
PFNglFramebufferPixelLocalStorageSizeEXTPROC framebufferPixelLocalStorageSizeEXT = null;
alias PFNglFramebufferReadBufferEXTPROC = fn void(GLuint framebuffer, GLenum mode);
PFNglFramebufferReadBufferEXTPROC framebufferReadBufferEXT = null;
alias PFNglFramebufferRenderbufferPROC = fn void(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
PFNglFramebufferRenderbufferPROC framebufferRenderbuffer = null;
alias PFNglFramebufferRenderbufferEXTPROC = fn void(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
PFNglFramebufferRenderbufferEXTPROC framebufferRenderbufferEXT = null;
alias PFNglFramebufferRenderbufferOESPROC = fn void(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
PFNglFramebufferRenderbufferOESPROC framebufferRenderbufferOES = null;
alias PFNglFramebufferSampleLocationsfvARBPROC = fn void(GLenum target, GLuint start, GLsizei count, GLfloat* v);
PFNglFramebufferSampleLocationsfvARBPROC framebufferSampleLocationsfvARB = null;
alias PFNglFramebufferSampleLocationsfvNVPROC = fn void(GLenum target, GLuint start, GLsizei count, GLfloat* v);
PFNglFramebufferSampleLocationsfvNVPROC framebufferSampleLocationsfvNV = null;
alias PFNglFramebufferSamplePositionsfvAMDPROC = fn void(GLenum target, GLuint numsamples, GLuint pixelindex, GLfloat* values);
PFNglFramebufferSamplePositionsfvAMDPROC framebufferSamplePositionsfvAMD = null;
alias PFNglFramebufferShadingRateEXTPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint baseLayer, GLsizei numLayers, GLsizei texelWidth, GLsizei texelHeight);
PFNglFramebufferShadingRateEXTPROC framebufferShadingRateEXT = null;
alias PFNglFramebufferTexturePROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level);
PFNglFramebufferTexturePROC framebufferTexture = null;
alias PFNglFramebufferTexture1DPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglFramebufferTexture1DPROC framebufferTexture1D = null;
alias PFNglFramebufferTexture1DEXTPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglFramebufferTexture1DEXTPROC framebufferTexture1DEXT = null;
alias PFNglFramebufferTexture2DPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglFramebufferTexture2DPROC framebufferTexture2D = null;
alias PFNglFramebufferTexture2DEXTPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglFramebufferTexture2DEXTPROC framebufferTexture2DEXT = null;
alias PFNglFramebufferTexture2DDownsampleIMGPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale);
PFNglFramebufferTexture2DDownsampleIMGPROC framebufferTexture2DDownsampleIMG = null;
alias PFNglFramebufferTexture2DMultisampleEXTPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
PFNglFramebufferTexture2DMultisampleEXTPROC framebufferTexture2DMultisampleEXT = null;
alias PFNglFramebufferTexture2DMultisampleIMGPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
PFNglFramebufferTexture2DMultisampleIMGPROC framebufferTexture2DMultisampleIMG = null;
alias PFNglFramebufferTexture2DOESPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglFramebufferTexture2DOESPROC framebufferTexture2DOES = null;
alias PFNglFramebufferTexture3DPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
PFNglFramebufferTexture3DPROC framebufferTexture3D = null;
alias PFNglFramebufferTexture3DEXTPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
PFNglFramebufferTexture3DEXTPROC framebufferTexture3DEXT = null;
alias PFNglFramebufferTexture3DOESPROC = fn void(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
PFNglFramebufferTexture3DOESPROC framebufferTexture3DOES = null;
alias PFNglFramebufferTextureARBPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level);
PFNglFramebufferTextureARBPROC framebufferTextureARB = null;
alias PFNglFramebufferTextureEXTPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level);
PFNglFramebufferTextureEXTPROC framebufferTextureEXT = null;
alias PFNglFramebufferTextureFaceARBPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
PFNglFramebufferTextureFaceARBPROC framebufferTextureFaceARB = null;
alias PFNglFramebufferTextureFaceEXTPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
PFNglFramebufferTextureFaceEXTPROC framebufferTextureFaceEXT = null;
alias PFNglFramebufferTextureLayerPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
PFNglFramebufferTextureLayerPROC framebufferTextureLayer = null;
alias PFNglFramebufferTextureLayerARBPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
PFNglFramebufferTextureLayerARBPROC framebufferTextureLayerARB = null;
alias PFNglFramebufferTextureLayerEXTPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
PFNglFramebufferTextureLayerEXTPROC framebufferTextureLayerEXT = null;
alias PFNglFramebufferTextureLayerDownsampleIMGPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale);
PFNglFramebufferTextureLayerDownsampleIMGPROC framebufferTextureLayerDownsampleIMG = null;
alias PFNglFramebufferTextureMultisampleMultiviewOVRPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews);
PFNglFramebufferTextureMultisampleMultiviewOVRPROC framebufferTextureMultisampleMultiviewOVR = null;
alias PFNglFramebufferTextureMultiviewOVRPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
PFNglFramebufferTextureMultiviewOVRPROC framebufferTextureMultiviewOVR = null;
alias PFNglFramebufferTextureOESPROC = fn void(GLenum target, GLenum attachment, GLuint texture, GLint level);
PFNglFramebufferTextureOESPROC framebufferTextureOES = null;
alias PFNglFreeObjectBufferATIPROC = fn void(GLuint buffer);
PFNglFreeObjectBufferATIPROC freeObjectBufferATI = null;
alias PFNglFrontFacePROC = fn void(GLenum mode);
PFNglFrontFacePROC frontFace = null;
alias PFNglFrustumPROC = fn void(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
PFNglFrustumPROC frustum = null;
alias PFNglFrustumfPROC = fn void(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
PFNglFrustumfPROC frustumf = null;
alias PFNglFrustumfOESPROC = fn void(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
PFNglFrustumfOESPROC frustumfOES = null;
alias PFNglFrustumxPROC = fn void(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
PFNglFrustumxPROC frustumx = null;
alias PFNglFrustumxOESPROC = fn void(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
PFNglFrustumxOESPROC frustumxOES = null;
alias PFNglGenAsyncMarkersSGIXPROC = fn GLuint(GLsizei range);
PFNglGenAsyncMarkersSGIXPROC genAsyncMarkersSGIX = null;
alias PFNglGenBuffersPROC = fn void(GLsizei n, GLuint* buffers);
PFNglGenBuffersPROC genBuffers = null;
alias PFNglGenBuffersARBPROC = fn void(GLsizei n, GLuint* buffers);
PFNglGenBuffersARBPROC genBuffersARB = null;
alias PFNglGenFencesAPPLEPROC = fn void(GLsizei n, GLuint* fences);
PFNglGenFencesAPPLEPROC genFencesAPPLE = null;
alias PFNglGenFencesNVPROC = fn void(GLsizei n, GLuint* fences);
PFNglGenFencesNVPROC genFencesNV = null;
alias PFNglGenFragmentShadersATIPROC = fn GLuint(GLuint range);
PFNglGenFragmentShadersATIPROC genFragmentShadersATI = null;
alias PFNglGenFramebuffersPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglGenFramebuffersPROC genFramebuffers = null;
alias PFNglGenFramebuffersEXTPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglGenFramebuffersEXTPROC genFramebuffersEXT = null;
alias PFNglGenFramebuffersOESPROC = fn void(GLsizei n, GLuint* framebuffers);
PFNglGenFramebuffersOESPROC genFramebuffersOES = null;
alias PFNglGenListsPROC = fn GLuint(GLsizei range);
PFNglGenListsPROC genLists = null;
alias PFNglGenNamesAMDPROC = fn void(GLenum identifier, GLuint num, GLuint* names);
PFNglGenNamesAMDPROC genNamesAMD = null;
alias PFNglGenOcclusionQueriesNVPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenOcclusionQueriesNVPROC genOcclusionQueriesNV = null;
alias PFNglGenPathsNVPROC = fn GLuint(GLsizei range);
PFNglGenPathsNVPROC genPathsNV = null;
alias PFNglGenPerfMonitorsAMDPROC = fn void(GLsizei n, GLuint* monitors);
PFNglGenPerfMonitorsAMDPROC genPerfMonitorsAMD = null;
alias PFNglGenProgramPipelinesPROC = fn void(GLsizei n, GLuint* pipelines);
PFNglGenProgramPipelinesPROC genProgramPipelines = null;
alias PFNglGenProgramPipelinesEXTPROC = fn void(GLsizei n, GLuint* pipelines);
PFNglGenProgramPipelinesEXTPROC genProgramPipelinesEXT = null;
alias PFNglGenProgramsARBPROC = fn void(GLsizei n, GLuint* programs);
PFNglGenProgramsARBPROC genProgramsARB = null;
alias PFNglGenProgramsNVPROC = fn void(GLsizei n, GLuint* programs);
PFNglGenProgramsNVPROC genProgramsNV = null;
alias PFNglGenQueriesPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenQueriesPROC genQueries = null;
alias PFNglGenQueriesARBPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenQueriesARBPROC genQueriesARB = null;
alias PFNglGenQueriesEXTPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenQueriesEXTPROC genQueriesEXT = null;
alias PFNglGenQueryResourceTagNVPROC = fn void(GLsizei n, GLint* tagIds);
PFNglGenQueryResourceTagNVPROC genQueryResourceTagNV = null;
alias PFNglGenRenderbuffersPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglGenRenderbuffersPROC genRenderbuffers = null;
alias PFNglGenRenderbuffersEXTPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglGenRenderbuffersEXTPROC genRenderbuffersEXT = null;
alias PFNglGenRenderbuffersOESPROC = fn void(GLsizei n, GLuint* renderbuffers);
PFNglGenRenderbuffersOESPROC genRenderbuffersOES = null;
alias PFNglGenSamplersPROC = fn void(GLsizei count, GLuint* samplers);
PFNglGenSamplersPROC genSamplers = null;
alias PFNglGenSemaphoresEXTPROC = fn void(GLsizei n, GLuint* semaphores);
PFNglGenSemaphoresEXTPROC genSemaphoresEXT = null;
alias PFNglGenSymbolsEXTPROC = fn GLuint(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
PFNglGenSymbolsEXTPROC genSymbolsEXT = null;
alias PFNglGenTexturesPROC = fn void(GLsizei n, GLuint* textures);
PFNglGenTexturesPROC genTextures = null;
alias PFNglGenTexturesEXTPROC = fn void(GLsizei n, GLuint* textures);
PFNglGenTexturesEXTPROC genTexturesEXT = null;
alias PFNglGenTransformFeedbacksPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenTransformFeedbacksPROC genTransformFeedbacks = null;
alias PFNglGenTransformFeedbacksNVPROC = fn void(GLsizei n, GLuint* ids);
PFNglGenTransformFeedbacksNVPROC genTransformFeedbacksNV = null;
alias PFNglGenVertexArraysPROC = fn void(GLsizei n, GLuint* arrays);
PFNglGenVertexArraysPROC genVertexArrays = null;
alias PFNglGenVertexArraysAPPLEPROC = fn void(GLsizei n, GLuint* arrays);
PFNglGenVertexArraysAPPLEPROC genVertexArraysAPPLE = null;
alias PFNglGenVertexArraysOESPROC = fn void(GLsizei n, GLuint* arrays);
PFNglGenVertexArraysOESPROC genVertexArraysOES = null;
alias PFNglGenVertexShadersEXTPROC = fn GLuint(GLuint range);
PFNglGenVertexShadersEXTPROC genVertexShadersEXT = null;
alias PFNglGenerateMipmapPROC = fn void(GLenum target);
PFNglGenerateMipmapPROC generateMipmap = null;
alias PFNglGenerateMipmapEXTPROC = fn void(GLenum target);
PFNglGenerateMipmapEXTPROC generateMipmapEXT = null;
alias PFNglGenerateMipmapOESPROC = fn void(GLenum target);
PFNglGenerateMipmapOESPROC generateMipmapOES = null;
alias PFNglGenerateMultiTexMipmapEXTPROC = fn void(GLenum texunit, GLenum target);
PFNglGenerateMultiTexMipmapEXTPROC generateMultiTexMipmapEXT = null;
alias PFNglGenerateTextureMipmapPROC = fn void(GLuint texture);
PFNglGenerateTextureMipmapPROC generateTextureMipmap = null;
alias PFNglGenerateTextureMipmapEXTPROC = fn void(GLuint texture, GLenum target);
PFNglGenerateTextureMipmapEXTPROC generateTextureMipmapEXT = null;
alias PFNglGetActiveAtomicCounterBufferivPROC = fn void(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
PFNglGetActiveAtomicCounterBufferivPROC getActiveAtomicCounterBufferiv = null;
alias PFNglGetActiveAttribPROC = fn void(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
PFNglGetActiveAttribPROC getActiveAttrib = null;
alias PFNglGetActiveAttribARBPROC = fn void(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
PFNglGetActiveAttribARBPROC getActiveAttribARB = null;
alias PFNglGetActiveSubroutineNamePROC = fn void(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
PFNglGetActiveSubroutineNamePROC getActiveSubroutineName = null;
alias PFNglGetActiveSubroutineUniformNamePROC = fn void(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
PFNglGetActiveSubroutineUniformNamePROC getActiveSubroutineUniformName = null;
alias PFNglGetActiveSubroutineUniformivPROC = fn void(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
PFNglGetActiveSubroutineUniformivPROC getActiveSubroutineUniformiv = null;
alias PFNglGetActiveUniformPROC = fn void(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
PFNglGetActiveUniformPROC getActiveUniform = null;
alias PFNglGetActiveUniformARBPROC = fn void(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
PFNglGetActiveUniformARBPROC getActiveUniformARB = null;
alias PFNglGetActiveUniformBlockNamePROC = fn void(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
PFNglGetActiveUniformBlockNamePROC getActiveUniformBlockName = null;
alias PFNglGetActiveUniformBlockivPROC = fn void(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
PFNglGetActiveUniformBlockivPROC getActiveUniformBlockiv = null;
alias PFNglGetActiveUniformNamePROC = fn void(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
PFNglGetActiveUniformNamePROC getActiveUniformName = null;
alias PFNglGetActiveUniformsivPROC = fn void(GLuint program, GLsizei uniformCount, GLuint* uniformIndices, GLenum pname, GLint* params);
PFNglGetActiveUniformsivPROC getActiveUniformsiv = null;
alias PFNglGetActiveVaryingNVPROC = fn void(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
PFNglGetActiveVaryingNVPROC getActiveVaryingNV = null;
alias PFNglGetArrayObjectfvATIPROC = fn void(GLenum array, GLenum pname, GLfloat* params);
PFNglGetArrayObjectfvATIPROC getArrayObjectfvATI = null;
alias PFNglGetArrayObjectivATIPROC = fn void(GLenum array, GLenum pname, GLint* params);
PFNglGetArrayObjectivATIPROC getArrayObjectivATI = null;
alias PFNglGetAttachedObjectsARBPROC = fn void(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj);
PFNglGetAttachedObjectsARBPROC getAttachedObjectsARB = null;
alias PFNglGetAttachedShadersPROC = fn void(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
PFNglGetAttachedShadersPROC getAttachedShaders = null;
alias PFNglGetAttribLocationPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetAttribLocationPROC getAttribLocation = null;
alias PFNglGetAttribLocationARBPROC = fn GLint(GLhandleARB programObj, GLcharARB* name);
PFNglGetAttribLocationARBPROC getAttribLocationARB = null;
alias PFNglGetBooleanIndexedvEXTPROC = fn void(GLenum target, GLuint index, GLboolean* data);
PFNglGetBooleanIndexedvEXTPROC getBooleanIndexedvEXT = null;
alias PFNglGetBooleani_vPROC = fn void(GLenum target, GLuint index, GLboolean* data);
PFNglGetBooleani_vPROC getBooleani_v = null;
alias PFNglGetBooleanvPROC = fn void(GLenum pname, GLboolean* data);
PFNglGetBooleanvPROC getBooleanv = null;
alias PFNglGetBufferParameteri64vPROC = fn void(GLenum target, GLenum pname, GLint64* params);
PFNglGetBufferParameteri64vPROC getBufferParameteri64v = null;
alias PFNglGetBufferParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetBufferParameterivPROC getBufferParameteriv = null;
alias PFNglGetBufferParameterivARBPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetBufferParameterivARBPROC getBufferParameterivARB = null;
alias PFNglGetBufferParameterui64vNVPROC = fn void(GLenum target, GLenum pname, GLuint64EXT* params);
PFNglGetBufferParameterui64vNVPROC getBufferParameterui64vNV = null;
alias PFNglGetBufferPointervPROC = fn void(GLenum target, GLenum pname, void** params);
PFNglGetBufferPointervPROC getBufferPointerv = null;
alias PFNglGetBufferPointervARBPROC = fn void(GLenum target, GLenum pname, void** params);
PFNglGetBufferPointervARBPROC getBufferPointervARB = null;
alias PFNglGetBufferPointervOESPROC = fn void(GLenum target, GLenum pname, void** params);
PFNglGetBufferPointervOESPROC getBufferPointervOES = null;
alias PFNglGetBufferSubDataPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
PFNglGetBufferSubDataPROC getBufferSubData = null;
alias PFNglGetBufferSubDataARBPROC = fn void(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data);
PFNglGetBufferSubDataARBPROC getBufferSubDataARB = null;
alias PFNglGetClipPlanePROC = fn void(GLenum plane, GLdouble* equation);
PFNglGetClipPlanePROC getClipPlane = null;
alias PFNglGetClipPlanefPROC = fn void(GLenum plane, GLfloat* equation);
PFNglGetClipPlanefPROC getClipPlanef = null;
alias PFNglGetClipPlanefOESPROC = fn void(GLenum plane, GLfloat* equation);
PFNglGetClipPlanefOESPROC getClipPlanefOES = null;
alias PFNglGetClipPlanexPROC = fn void(GLenum plane, GLfixed* equation);
PFNglGetClipPlanexPROC getClipPlanex = null;
alias PFNglGetClipPlanexOESPROC = fn void(GLenum plane, GLfixed* equation);
PFNglGetClipPlanexOESPROC getClipPlanexOES = null;
alias PFNglGetColorTablePROC = fn void(GLenum target, GLenum format, GLenum type, void* table);
PFNglGetColorTablePROC getColorTable = null;
alias PFNglGetColorTableEXTPROC = fn void(GLenum target, GLenum format, GLenum type, void* data);
PFNglGetColorTableEXTPROC getColorTableEXT = null;
alias PFNglGetColorTableParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetColorTableParameterfvPROC getColorTableParameterfv = null;
alias PFNglGetColorTableParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetColorTableParameterfvEXTPROC getColorTableParameterfvEXT = null;
alias PFNglGetColorTableParameterfvSGIPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetColorTableParameterfvSGIPROC getColorTableParameterfvSGI = null;
alias PFNglGetColorTableParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetColorTableParameterivPROC getColorTableParameteriv = null;
alias PFNglGetColorTableParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetColorTableParameterivEXTPROC getColorTableParameterivEXT = null;
alias PFNglGetColorTableParameterivSGIPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetColorTableParameterivSGIPROC getColorTableParameterivSGI = null;
alias PFNglGetColorTableSGIPROC = fn void(GLenum target, GLenum format, GLenum type, void* table);
PFNglGetColorTableSGIPROC getColorTableSGI = null;
alias PFNglGetCombinerInputParameterfvNVPROC = fn void(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
PFNglGetCombinerInputParameterfvNVPROC getCombinerInputParameterfvNV = null;
alias PFNglGetCombinerInputParameterivNVPROC = fn void(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
PFNglGetCombinerInputParameterivNVPROC getCombinerInputParameterivNV = null;
alias PFNglGetCombinerOutputParameterfvNVPROC = fn void(GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
PFNglGetCombinerOutputParameterfvNVPROC getCombinerOutputParameterfvNV = null;
alias PFNglGetCombinerOutputParameterivNVPROC = fn void(GLenum stage, GLenum portion, GLenum pname, GLint* params);
PFNglGetCombinerOutputParameterivNVPROC getCombinerOutputParameterivNV = null;
alias PFNglGetCombinerStageParameterfvNVPROC = fn void(GLenum stage, GLenum pname, GLfloat* params);
PFNglGetCombinerStageParameterfvNVPROC getCombinerStageParameterfvNV = null;
alias PFNglGetCommandHeaderNVPROC = fn GLuint(GLenum tokenID, GLuint size);
PFNglGetCommandHeaderNVPROC getCommandHeaderNV = null;
alias PFNglGetCompressedMultiTexImageEXTPROC = fn void(GLenum texunit, GLenum target, GLint lod, void* img);
PFNglGetCompressedMultiTexImageEXTPROC getCompressedMultiTexImageEXT = null;
alias PFNglGetCompressedTexImagePROC = fn void(GLenum target, GLint level, void* img);
PFNglGetCompressedTexImagePROC getCompressedTexImage = null;
alias PFNglGetCompressedTexImageARBPROC = fn void(GLenum target, GLint level, void* img);
PFNglGetCompressedTexImageARBPROC getCompressedTexImageARB = null;
alias PFNglGetCompressedTextureImagePROC = fn void(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
PFNglGetCompressedTextureImagePROC getCompressedTextureImage = null;
alias PFNglGetCompressedTextureImageEXTPROC = fn void(GLuint texture, GLenum target, GLint lod, void* img);
PFNglGetCompressedTextureImageEXTPROC getCompressedTextureImageEXT = null;
alias PFNglGetCompressedTextureSubImagePROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
PFNglGetCompressedTextureSubImagePROC getCompressedTextureSubImage = null;
alias PFNglGetConvolutionFilterPROC = fn void(GLenum target, GLenum format, GLenum type, void* image);
PFNglGetConvolutionFilterPROC getConvolutionFilter = null;
alias PFNglGetConvolutionFilterEXTPROC = fn void(GLenum target, GLenum format, GLenum type, void* image);
PFNglGetConvolutionFilterEXTPROC getConvolutionFilterEXT = null;
alias PFNglGetConvolutionParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetConvolutionParameterfvPROC getConvolutionParameterfv = null;
alias PFNglGetConvolutionParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetConvolutionParameterfvEXTPROC getConvolutionParameterfvEXT = null;
alias PFNglGetConvolutionParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetConvolutionParameterivPROC getConvolutionParameteriv = null;
alias PFNglGetConvolutionParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetConvolutionParameterivEXTPROC getConvolutionParameterivEXT = null;
alias PFNglGetConvolutionParameterxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetConvolutionParameterxvOESPROC getConvolutionParameterxvOES = null;
alias PFNglGetCoverageModulationTableNVPROC = fn void(GLsizei bufSize, GLfloat* v);
PFNglGetCoverageModulationTableNVPROC getCoverageModulationTableNV = null;
alias PFNglGetDebugMessageLogPROC = fn GLuint(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
PFNglGetDebugMessageLogPROC getDebugMessageLog = null;
alias PFNglGetDebugMessageLogAMDPROC = fn GLuint(GLuint count, GLsizei bufSize, GLenum* categories, GLenum* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
PFNglGetDebugMessageLogAMDPROC getDebugMessageLogAMD = null;
alias PFNglGetDebugMessageLogARBPROC = fn GLuint(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
PFNglGetDebugMessageLogARBPROC getDebugMessageLogARB = null;
alias PFNglGetDebugMessageLogKHRPROC = fn GLuint(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
PFNglGetDebugMessageLogKHRPROC getDebugMessageLogKHR = null;
alias PFNglGetDetailTexFuncSGISPROC = fn void(GLenum target, GLfloat* points);
PFNglGetDetailTexFuncSGISPROC getDetailTexFuncSGIS = null;
alias PFNglGetDoubleIndexedvEXTPROC = fn void(GLenum target, GLuint index, GLdouble* data);
PFNglGetDoubleIndexedvEXTPROC getDoubleIndexedvEXT = null;
alias PFNglGetDoublei_vPROC = fn void(GLenum target, GLuint index, GLdouble* data);
PFNglGetDoublei_vPROC getDoublei_v = null;
alias PFNglGetDoublei_vEXTPROC = fn void(GLenum pname, GLuint index, GLdouble* params);
PFNglGetDoublei_vEXTPROC getDoublei_vEXT = null;
alias PFNglGetDoublevPROC = fn void(GLenum pname, GLdouble* data);
PFNglGetDoublevPROC getDoublev = null;
alias PFNglGetDriverControlStringQCOMPROC = fn void(GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar* driverControlString);
PFNglGetDriverControlStringQCOMPROC getDriverControlStringQCOM = null;
alias PFNglGetDriverControlsQCOMPROC = fn void(GLint* num, GLsizei size, GLuint* driverControls);
PFNglGetDriverControlsQCOMPROC getDriverControlsQCOM = null;
alias PFNglGetErrorPROC = fn GLenum();
PFNglGetErrorPROC getError = null;
alias PFNglGetFenceivNVPROC = fn void(GLuint fence, GLenum pname, GLint* params);
PFNglGetFenceivNVPROC getFenceivNV = null;
alias PFNglGetFinalCombinerInputParameterfvNVPROC = fn void(GLenum variable, GLenum pname, GLfloat* params);
PFNglGetFinalCombinerInputParameterfvNVPROC getFinalCombinerInputParameterfvNV = null;
alias PFNglGetFinalCombinerInputParameterivNVPROC = fn void(GLenum variable, GLenum pname, GLint* params);
PFNglGetFinalCombinerInputParameterivNVPROC getFinalCombinerInputParameterivNV = null;
alias PFNglGetFirstPerfQueryIdINTELPROC = fn void(GLuint* queryId);
PFNglGetFirstPerfQueryIdINTELPROC getFirstPerfQueryIdINTEL = null;
alias PFNglGetFixedvPROC = fn void(GLenum pname, GLfixed* params);
PFNglGetFixedvPROC getFixedv = null;
alias PFNglGetFixedvOESPROC = fn void(GLenum pname, GLfixed* params);
PFNglGetFixedvOESPROC getFixedvOES = null;
alias PFNglGetFloatIndexedvEXTPROC = fn void(GLenum target, GLuint index, GLfloat* data);
PFNglGetFloatIndexedvEXTPROC getFloatIndexedvEXT = null;
alias PFNglGetFloati_vPROC = fn void(GLenum target, GLuint index, GLfloat* data);
PFNglGetFloati_vPROC getFloati_v = null;
alias PFNglGetFloati_vEXTPROC = fn void(GLenum pname, GLuint index, GLfloat* params);
PFNglGetFloati_vEXTPROC getFloati_vEXT = null;
alias PFNglGetFloati_vNVPROC = fn void(GLenum target, GLuint index, GLfloat* data);
PFNglGetFloati_vNVPROC getFloati_vNV = null;
alias PFNglGetFloati_vOESPROC = fn void(GLenum target, GLuint index, GLfloat* data);
PFNglGetFloati_vOESPROC getFloati_vOES = null;
alias PFNglGetFloatvPROC = fn void(GLenum pname, GLfloat* data);
PFNglGetFloatvPROC getFloatv = null;
alias PFNglGetFogFuncSGISPROC = fn void(GLfloat* points);
PFNglGetFogFuncSGISPROC getFogFuncSGIS = null;
alias PFNglGetFragDataIndexPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetFragDataIndexPROC getFragDataIndex = null;
alias PFNglGetFragDataIndexEXTPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetFragDataIndexEXTPROC getFragDataIndexEXT = null;
alias PFNglGetFragDataLocationPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetFragDataLocationPROC getFragDataLocation = null;
alias PFNglGetFragDataLocationEXTPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetFragDataLocationEXTPROC getFragDataLocationEXT = null;
alias PFNglGetFragmentLightfvSGIXPROC = fn void(GLenum light, GLenum pname, GLfloat* params);
PFNglGetFragmentLightfvSGIXPROC getFragmentLightfvSGIX = null;
alias PFNglGetFragmentLightivSGIXPROC = fn void(GLenum light, GLenum pname, GLint* params);
PFNglGetFragmentLightivSGIXPROC getFragmentLightivSGIX = null;
alias PFNglGetFragmentMaterialfvSGIXPROC = fn void(GLenum face, GLenum pname, GLfloat* params);
PFNglGetFragmentMaterialfvSGIXPROC getFragmentMaterialfvSGIX = null;
alias PFNglGetFragmentMaterialivSGIXPROC = fn void(GLenum face, GLenum pname, GLint* params);
PFNglGetFragmentMaterialivSGIXPROC getFragmentMaterialivSGIX = null;
alias PFNglGetFragmentShadingRatesEXTPROC = fn void(GLsizei samples, GLsizei maxCount, GLsizei* count, GLenum* shadingRates);
PFNglGetFragmentShadingRatesEXTPROC getFragmentShadingRatesEXT = null;
alias PFNglGetFramebufferAttachmentParameterivPROC = fn void(GLenum target, GLenum attachment, GLenum pname, GLint* params);
PFNglGetFramebufferAttachmentParameterivPROC getFramebufferAttachmentParameteriv = null;
alias PFNglGetFramebufferAttachmentParameterivEXTPROC = fn void(GLenum target, GLenum attachment, GLenum pname, GLint* params);
PFNglGetFramebufferAttachmentParameterivEXTPROC getFramebufferAttachmentParameterivEXT = null;
alias PFNglGetFramebufferAttachmentParameterivOESPROC = fn void(GLenum target, GLenum attachment, GLenum pname, GLint* params);
PFNglGetFramebufferAttachmentParameterivOESPROC getFramebufferAttachmentParameterivOES = null;
alias PFNglGetFramebufferParameterfvAMDPROC = fn void(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values);
PFNglGetFramebufferParameterfvAMDPROC getFramebufferParameterfvAMD = null;
alias PFNglGetFramebufferParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetFramebufferParameterivPROC getFramebufferParameteriv = null;
alias PFNglGetFramebufferParameterivEXTPROC = fn void(GLuint framebuffer, GLenum pname, GLint* params);
PFNglGetFramebufferParameterivEXTPROC getFramebufferParameterivEXT = null;
alias PFNglGetFramebufferPixelLocalStorageSizeEXTPROC = fn GLsizei(GLuint target);
PFNglGetFramebufferPixelLocalStorageSizeEXTPROC getFramebufferPixelLocalStorageSizeEXT = null;
alias PFNglGetGraphicsResetStatusPROC = fn GLenum();
PFNglGetGraphicsResetStatusPROC getGraphicsResetStatus = null;
alias PFNglGetGraphicsResetStatusARBPROC = fn GLenum();
PFNglGetGraphicsResetStatusARBPROC getGraphicsResetStatusARB = null;
alias PFNglGetGraphicsResetStatusEXTPROC = fn GLenum();
PFNglGetGraphicsResetStatusEXTPROC getGraphicsResetStatusEXT = null;
alias PFNglGetGraphicsResetStatusKHRPROC = fn GLenum();
PFNglGetGraphicsResetStatusKHRPROC getGraphicsResetStatusKHR = null;
alias PFNglGetHandleARBPROC = fn GLhandleARB(GLenum pname);
PFNglGetHandleARBPROC getHandleARB = null;
alias PFNglGetHistogramPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
PFNglGetHistogramPROC getHistogram = null;
alias PFNglGetHistogramEXTPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
PFNglGetHistogramEXTPROC getHistogramEXT = null;
alias PFNglGetHistogramParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetHistogramParameterfvPROC getHistogramParameterfv = null;
alias PFNglGetHistogramParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetHistogramParameterfvEXTPROC getHistogramParameterfvEXT = null;
alias PFNglGetHistogramParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetHistogramParameterivPROC getHistogramParameteriv = null;
alias PFNglGetHistogramParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetHistogramParameterivEXTPROC getHistogramParameterivEXT = null;
alias PFNglGetHistogramParameterxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetHistogramParameterxvOESPROC getHistogramParameterxvOES = null;
alias PFNglGetImageHandleARBPROC = fn GLuint64(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
PFNglGetImageHandleARBPROC getImageHandleARB = null;
alias PFNglGetImageHandleNVPROC = fn GLuint64(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
PFNglGetImageHandleNVPROC getImageHandleNV = null;
alias PFNglGetImageTransformParameterfvHPPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetImageTransformParameterfvHPPROC getImageTransformParameterfvHP = null;
alias PFNglGetImageTransformParameterivHPPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetImageTransformParameterivHPPROC getImageTransformParameterivHP = null;
alias PFNglGetInfoLogARBPROC = fn void(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog);
PFNglGetInfoLogARBPROC getInfoLogARB = null;
alias PFNglGetInstrumentsSGIXPROC = fn GLint();
PFNglGetInstrumentsSGIXPROC getInstrumentsSGIX = null;
alias PFNglGetInteger64i_vPROC = fn void(GLenum target, GLuint index, GLint64* data);
PFNglGetInteger64i_vPROC getInteger64i_v = null;
alias PFNglGetInteger64vPROC = fn void(GLenum pname, GLint64* data);
PFNglGetInteger64vPROC getInteger64v = null;
alias PFNglGetInteger64vAPPLEPROC = fn void(GLenum pname, GLint64* params);
PFNglGetInteger64vAPPLEPROC getInteger64vAPPLE = null;
alias PFNglGetInteger64vEXTPROC = fn void(GLenum pname, GLint64* data);
PFNglGetInteger64vEXTPROC getInteger64vEXT = null;
alias PFNglGetIntegerIndexedvEXTPROC = fn void(GLenum target, GLuint index, GLint* data);
PFNglGetIntegerIndexedvEXTPROC getIntegerIndexedvEXT = null;
alias PFNglGetIntegeri_vPROC = fn void(GLenum target, GLuint index, GLint* data);
PFNglGetIntegeri_vPROC getIntegeri_v = null;
alias PFNglGetIntegeri_vEXTPROC = fn void(GLenum target, GLuint index, GLint* data);
PFNglGetIntegeri_vEXTPROC getIntegeri_vEXT = null;
alias PFNglGetIntegerui64i_vNVPROC = fn void(GLenum value, GLuint index, GLuint64EXT* result);
PFNglGetIntegerui64i_vNVPROC getIntegerui64i_vNV = null;
alias PFNglGetIntegerui64vNVPROC = fn void(GLenum value, GLuint64EXT* result);
PFNglGetIntegerui64vNVPROC getIntegerui64vNV = null;
alias PFNglGetIntegervPROC = fn void(GLenum pname, GLint* data);
PFNglGetIntegervPROC getIntegerv = null;
alias PFNglGetInternalformatSampleivNVPROC = fn void(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint* params);
PFNglGetInternalformatSampleivNVPROC getInternalformatSampleivNV = null;
alias PFNglGetInternalformati64vPROC = fn void(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
PFNglGetInternalformati64vPROC getInternalformati64v = null;
alias PFNglGetInternalformativPROC = fn void(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint* params);
PFNglGetInternalformativPROC getInternalformativ = null;
alias PFNglGetInvariantBooleanvEXTPROC = fn void(GLuint id, GLenum value, GLboolean* data);
PFNglGetInvariantBooleanvEXTPROC getInvariantBooleanvEXT = null;
alias PFNglGetInvariantFloatvEXTPROC = fn void(GLuint id, GLenum value, GLfloat* data);
PFNglGetInvariantFloatvEXTPROC getInvariantFloatvEXT = null;
alias PFNglGetInvariantIntegervEXTPROC = fn void(GLuint id, GLenum value, GLint* data);
PFNglGetInvariantIntegervEXTPROC getInvariantIntegervEXT = null;
alias PFNglGetLightfvPROC = fn void(GLenum light, GLenum pname, GLfloat* params);
PFNglGetLightfvPROC getLightfv = null;
alias PFNglGetLightivPROC = fn void(GLenum light, GLenum pname, GLint* params);
PFNglGetLightivPROC getLightiv = null;
alias PFNglGetLightxOESPROC = fn void(GLenum light, GLenum pname, GLfixed* params);
PFNglGetLightxOESPROC getLightxOES = null;
alias PFNglGetLightxvPROC = fn void(GLenum light, GLenum pname, GLfixed* params);
PFNglGetLightxvPROC getLightxv = null;
alias PFNglGetLightxvOESPROC = fn void(GLenum light, GLenum pname, GLfixed* params);
PFNglGetLightxvOESPROC getLightxvOES = null;
alias PFNglGetListParameterfvSGIXPROC = fn void(GLuint list, GLenum pname, GLfloat* params);
PFNglGetListParameterfvSGIXPROC getListParameterfvSGIX = null;
alias PFNglGetListParameterivSGIXPROC = fn void(GLuint list, GLenum pname, GLint* params);
PFNglGetListParameterivSGIXPROC getListParameterivSGIX = null;
alias PFNglGetLocalConstantBooleanvEXTPROC = fn void(GLuint id, GLenum value, GLboolean* data);
PFNglGetLocalConstantBooleanvEXTPROC getLocalConstantBooleanvEXT = null;
alias PFNglGetLocalConstantFloatvEXTPROC = fn void(GLuint id, GLenum value, GLfloat* data);
PFNglGetLocalConstantFloatvEXTPROC getLocalConstantFloatvEXT = null;
alias PFNglGetLocalConstantIntegervEXTPROC = fn void(GLuint id, GLenum value, GLint* data);
PFNglGetLocalConstantIntegervEXTPROC getLocalConstantIntegervEXT = null;
alias PFNglGetMapAttribParameterfvNVPROC = fn void(GLenum target, GLuint index, GLenum pname, GLfloat* params);
PFNglGetMapAttribParameterfvNVPROC getMapAttribParameterfvNV = null;
alias PFNglGetMapAttribParameterivNVPROC = fn void(GLenum target, GLuint index, GLenum pname, GLint* params);
PFNglGetMapAttribParameterivNVPROC getMapAttribParameterivNV = null;
alias PFNglGetMapControlPointsNVPROC = fn void(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
PFNglGetMapControlPointsNVPROC getMapControlPointsNV = null;
alias PFNglGetMapParameterfvNVPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetMapParameterfvNVPROC getMapParameterfvNV = null;
alias PFNglGetMapParameterivNVPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetMapParameterivNVPROC getMapParameterivNV = null;
alias PFNglGetMapdvPROC = fn void(GLenum target, GLenum query, GLdouble* v);
PFNglGetMapdvPROC getMapdv = null;
alias PFNglGetMapfvPROC = fn void(GLenum target, GLenum query, GLfloat* v);
PFNglGetMapfvPROC getMapfv = null;
alias PFNglGetMapivPROC = fn void(GLenum target, GLenum query, GLint* v);
PFNglGetMapivPROC getMapiv = null;
alias PFNglGetMapxvOESPROC = fn void(GLenum target, GLenum query, GLfixed* v);
PFNglGetMapxvOESPROC getMapxvOES = null;
alias PFNglGetMaterialfvPROC = fn void(GLenum face, GLenum pname, GLfloat* params);
PFNglGetMaterialfvPROC getMaterialfv = null;
alias PFNglGetMaterialivPROC = fn void(GLenum face, GLenum pname, GLint* params);
PFNglGetMaterialivPROC getMaterialiv = null;
alias PFNglGetMaterialxOESPROC = fn void(GLenum face, GLenum pname, GLfixed param);
PFNglGetMaterialxOESPROC getMaterialxOES = null;
alias PFNglGetMaterialxvPROC = fn void(GLenum face, GLenum pname, GLfixed* params);
PFNglGetMaterialxvPROC getMaterialxv = null;
alias PFNglGetMaterialxvOESPROC = fn void(GLenum face, GLenum pname, GLfixed* params);
PFNglGetMaterialxvOESPROC getMaterialxvOES = null;
alias PFNglGetMemoryObjectDetachedResourcesuivNVPROC = fn void(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint* params);
PFNglGetMemoryObjectDetachedResourcesuivNVPROC getMemoryObjectDetachedResourcesuivNV = null;
alias PFNglGetMemoryObjectParameterivEXTPROC = fn void(GLuint memoryObject, GLenum pname, GLint* params);
PFNglGetMemoryObjectParameterivEXTPROC getMemoryObjectParameterivEXT = null;
alias PFNglGetMinmaxPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
PFNglGetMinmaxPROC getMinmax = null;
alias PFNglGetMinmaxEXTPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
PFNglGetMinmaxEXTPROC getMinmaxEXT = null;
alias PFNglGetMinmaxParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetMinmaxParameterfvPROC getMinmaxParameterfv = null;
alias PFNglGetMinmaxParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetMinmaxParameterfvEXTPROC getMinmaxParameterfvEXT = null;
alias PFNglGetMinmaxParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetMinmaxParameterivPROC getMinmaxParameteriv = null;
alias PFNglGetMinmaxParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetMinmaxParameterivEXTPROC getMinmaxParameterivEXT = null;
alias PFNglGetMultiTexEnvfvEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
PFNglGetMultiTexEnvfvEXTPROC getMultiTexEnvfvEXT = null;
alias PFNglGetMultiTexEnvivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglGetMultiTexEnvivEXTPROC getMultiTexEnvivEXT = null;
alias PFNglGetMultiTexGendvEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
PFNglGetMultiTexGendvEXTPROC getMultiTexGendvEXT = null;
alias PFNglGetMultiTexGenfvEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
PFNglGetMultiTexGenfvEXTPROC getMultiTexGenfvEXT = null;
alias PFNglGetMultiTexGenivEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
PFNglGetMultiTexGenivEXTPROC getMultiTexGenivEXT = null;
alias PFNglGetMultiTexImageEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
PFNglGetMultiTexImageEXTPROC getMultiTexImageEXT = null;
alias PFNglGetMultiTexLevelParameterfvEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
PFNglGetMultiTexLevelParameterfvEXTPROC getMultiTexLevelParameterfvEXT = null;
alias PFNglGetMultiTexLevelParameterivEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
PFNglGetMultiTexLevelParameterivEXTPROC getMultiTexLevelParameterivEXT = null;
alias PFNglGetMultiTexParameterIivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglGetMultiTexParameterIivEXTPROC getMultiTexParameterIivEXT = null;
alias PFNglGetMultiTexParameterIuivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
PFNglGetMultiTexParameterIuivEXTPROC getMultiTexParameterIuivEXT = null;
alias PFNglGetMultiTexParameterfvEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
PFNglGetMultiTexParameterfvEXTPROC getMultiTexParameterfvEXT = null;
alias PFNglGetMultiTexParameterivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglGetMultiTexParameterivEXTPROC getMultiTexParameterivEXT = null;
alias PFNglGetMultisamplefvPROC = fn void(GLenum pname, GLuint index, GLfloat* val);
PFNglGetMultisamplefvPROC getMultisamplefv = null;
alias PFNglGetMultisamplefvNVPROC = fn void(GLenum pname, GLuint index, GLfloat* val);
PFNglGetMultisamplefvNVPROC getMultisamplefvNV = null;
alias PFNglGetNamedBufferParameteri64vPROC = fn void(GLuint buffer, GLenum pname, GLint64* params);
PFNglGetNamedBufferParameteri64vPROC getNamedBufferParameteri64v = null;
alias PFNglGetNamedBufferParameterivPROC = fn void(GLuint buffer, GLenum pname, GLint* params);
PFNglGetNamedBufferParameterivPROC getNamedBufferParameteriv = null;
alias PFNglGetNamedBufferParameterivEXTPROC = fn void(GLuint buffer, GLenum pname, GLint* params);
PFNglGetNamedBufferParameterivEXTPROC getNamedBufferParameterivEXT = null;
alias PFNglGetNamedBufferParameterui64vNVPROC = fn void(GLuint buffer, GLenum pname, GLuint64EXT* params);
PFNglGetNamedBufferParameterui64vNVPROC getNamedBufferParameterui64vNV = null;
alias PFNglGetNamedBufferPointervPROC = fn void(GLuint buffer, GLenum pname, void** params);
PFNglGetNamedBufferPointervPROC getNamedBufferPointerv = null;
alias PFNglGetNamedBufferPointervEXTPROC = fn void(GLuint buffer, GLenum pname, void** params);
PFNglGetNamedBufferPointervEXTPROC getNamedBufferPointervEXT = null;
alias PFNglGetNamedBufferSubDataPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglGetNamedBufferSubDataPROC getNamedBufferSubData = null;
alias PFNglGetNamedBufferSubDataEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglGetNamedBufferSubDataEXTPROC getNamedBufferSubDataEXT = null;
alias PFNglGetNamedFramebufferParameterfvAMDPROC = fn void(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values);
PFNglGetNamedFramebufferParameterfvAMDPROC getNamedFramebufferParameterfvAMD = null;
alias PFNglGetNamedFramebufferAttachmentParameterivPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
PFNglGetNamedFramebufferAttachmentParameterivPROC getNamedFramebufferAttachmentParameteriv = null;
alias PFNglGetNamedFramebufferAttachmentParameterivEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
PFNglGetNamedFramebufferAttachmentParameterivEXTPROC getNamedFramebufferAttachmentParameterivEXT = null;
alias PFNglGetNamedFramebufferParameterivPROC = fn void(GLuint framebuffer, GLenum pname, GLint* param);
PFNglGetNamedFramebufferParameterivPROC getNamedFramebufferParameteriv = null;
alias PFNglGetNamedFramebufferParameterivEXTPROC = fn void(GLuint framebuffer, GLenum pname, GLint* params);
PFNglGetNamedFramebufferParameterivEXTPROC getNamedFramebufferParameterivEXT = null;
alias PFNglGetNamedProgramLocalParameterIivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLint* params);
PFNglGetNamedProgramLocalParameterIivEXTPROC getNamedProgramLocalParameterIivEXT = null;
alias PFNglGetNamedProgramLocalParameterIuivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLuint* params);
PFNglGetNamedProgramLocalParameterIuivEXTPROC getNamedProgramLocalParameterIuivEXT = null;
alias PFNglGetNamedProgramLocalParameterdvEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLdouble* params);
PFNglGetNamedProgramLocalParameterdvEXTPROC getNamedProgramLocalParameterdvEXT = null;
alias PFNglGetNamedProgramLocalParameterfvEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLfloat* params);
PFNglGetNamedProgramLocalParameterfvEXTPROC getNamedProgramLocalParameterfvEXT = null;
alias PFNglGetNamedProgramStringEXTPROC = fn void(GLuint program, GLenum target, GLenum pname, void* string);
PFNglGetNamedProgramStringEXTPROC getNamedProgramStringEXT = null;
alias PFNglGetNamedProgramivEXTPROC = fn void(GLuint program, GLenum target, GLenum pname, GLint* params);
PFNglGetNamedProgramivEXTPROC getNamedProgramivEXT = null;
alias PFNglGetNamedRenderbufferParameterivPROC = fn void(GLuint renderbuffer, GLenum pname, GLint* params);
PFNglGetNamedRenderbufferParameterivPROC getNamedRenderbufferParameteriv = null;
alias PFNglGetNamedRenderbufferParameterivEXTPROC = fn void(GLuint renderbuffer, GLenum pname, GLint* params);
PFNglGetNamedRenderbufferParameterivEXTPROC getNamedRenderbufferParameterivEXT = null;
alias PFNglGetNamedStringARBPROC = fn void(GLint namelen, GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string);
PFNglGetNamedStringARBPROC getNamedStringARB = null;
alias PFNglGetNamedStringivARBPROC = fn void(GLint namelen, GLchar* name, GLenum pname, GLint* params);
PFNglGetNamedStringivARBPROC getNamedStringivARB = null;
alias PFNglGetNextPerfQueryIdINTELPROC = fn void(GLuint queryId, GLuint* nextQueryId);
PFNglGetNextPerfQueryIdINTELPROC getNextPerfQueryIdINTEL = null;
alias PFNglGetObjectBufferfvATIPROC = fn void(GLuint buffer, GLenum pname, GLfloat* params);
PFNglGetObjectBufferfvATIPROC getObjectBufferfvATI = null;
alias PFNglGetObjectBufferivATIPROC = fn void(GLuint buffer, GLenum pname, GLint* params);
PFNglGetObjectBufferivATIPROC getObjectBufferivATI = null;
alias PFNglGetObjectLabelPROC = fn void(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
PFNglGetObjectLabelPROC getObjectLabel = null;
alias PFNglGetObjectLabelEXTPROC = fn void(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label);
PFNglGetObjectLabelEXTPROC getObjectLabelEXT = null;
alias PFNglGetObjectLabelKHRPROC = fn void(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
PFNglGetObjectLabelKHRPROC getObjectLabelKHR = null;
alias PFNglGetObjectParameterfvARBPROC = fn void(GLhandleARB obj, GLenum pname, GLfloat* params);
PFNglGetObjectParameterfvARBPROC getObjectParameterfvARB = null;
alias PFNglGetObjectParameterivAPPLEPROC = fn void(GLenum objectType, GLuint name, GLenum pname, GLint* params);
PFNglGetObjectParameterivAPPLEPROC getObjectParameterivAPPLE = null;
alias PFNglGetObjectParameterivARBPROC = fn void(GLhandleARB obj, GLenum pname, GLint* params);
PFNglGetObjectParameterivARBPROC getObjectParameterivARB = null;
alias PFNglGetObjectPtrLabelPROC = fn void(void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
PFNglGetObjectPtrLabelPROC getObjectPtrLabel = null;
alias PFNglGetObjectPtrLabelKHRPROC = fn void(void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
PFNglGetObjectPtrLabelKHRPROC getObjectPtrLabelKHR = null;
alias PFNglGetOcclusionQueryivNVPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetOcclusionQueryivNVPROC getOcclusionQueryivNV = null;
alias PFNglGetOcclusionQueryuivNVPROC = fn void(GLuint id, GLenum pname, GLuint* params);
PFNglGetOcclusionQueryuivNVPROC getOcclusionQueryuivNV = null;
alias PFNglGetPathColorGenfvNVPROC = fn void(GLenum color, GLenum pname, GLfloat* value);
PFNglGetPathColorGenfvNVPROC getPathColorGenfvNV = null;
alias PFNglGetPathColorGenivNVPROC = fn void(GLenum color, GLenum pname, GLint* value);
PFNglGetPathColorGenivNVPROC getPathColorGenivNV = null;
alias PFNglGetPathCommandsNVPROC = fn void(GLuint path, GLubyte* commands);
PFNglGetPathCommandsNVPROC getPathCommandsNV = null;
alias PFNglGetPathCoordsNVPROC = fn void(GLuint path, GLfloat* coords);
PFNglGetPathCoordsNVPROC getPathCoordsNV = null;
alias PFNglGetPathDashArrayNVPROC = fn void(GLuint path, GLfloat* dashArray);
PFNglGetPathDashArrayNVPROC getPathDashArrayNV = null;
alias PFNglGetPathLengthNVPROC = fn GLfloat(GLuint path, GLsizei startSegment, GLsizei numSegments);
PFNglGetPathLengthNVPROC getPathLengthNV = null;
alias PFNglGetPathMetricRangeNVPROC = fn void(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
PFNglGetPathMetricRangeNVPROC getPathMetricRangeNV = null;
alias PFNglGetPathMetricsNVPROC = fn void(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics);
PFNglGetPathMetricsNVPROC getPathMetricsNV = null;
alias PFNglGetPathParameterfvNVPROC = fn void(GLuint path, GLenum pname, GLfloat* value);
PFNglGetPathParameterfvNVPROC getPathParameterfvNV = null;
alias PFNglGetPathParameterivNVPROC = fn void(GLuint path, GLenum pname, GLint* value);
PFNglGetPathParameterivNVPROC getPathParameterivNV = null;
alias PFNglGetPathSpacingNVPROC = fn void(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing);
PFNglGetPathSpacingNVPROC getPathSpacingNV = null;
alias PFNglGetPathTexGenfvNVPROC = fn void(GLenum texCoordSet, GLenum pname, GLfloat* value);
PFNglGetPathTexGenfvNVPROC getPathTexGenfvNV = null;
alias PFNglGetPathTexGenivNVPROC = fn void(GLenum texCoordSet, GLenum pname, GLint* value);
PFNglGetPathTexGenivNVPROC getPathTexGenivNV = null;
alias PFNglGetPerfCounterInfoINTELPROC = fn void(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue);
PFNglGetPerfCounterInfoINTELPROC getPerfCounterInfoINTEL = null;
alias PFNglGetPerfMonitorCounterDataAMDPROC = fn void(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten);
PFNglGetPerfMonitorCounterDataAMDPROC getPerfMonitorCounterDataAMD = null;
alias PFNglGetPerfMonitorCounterInfoAMDPROC = fn void(GLuint group, GLuint counter, GLenum pname, void* data);
PFNglGetPerfMonitorCounterInfoAMDPROC getPerfMonitorCounterInfoAMD = null;
alias PFNglGetPerfMonitorCounterStringAMDPROC = fn void(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString);
PFNglGetPerfMonitorCounterStringAMDPROC getPerfMonitorCounterStringAMD = null;
alias PFNglGetPerfMonitorCountersAMDPROC = fn void(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters);
PFNglGetPerfMonitorCountersAMDPROC getPerfMonitorCountersAMD = null;
alias PFNglGetPerfMonitorGroupStringAMDPROC = fn void(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString);
PFNglGetPerfMonitorGroupStringAMDPROC getPerfMonitorGroupStringAMD = null;
alias PFNglGetPerfMonitorGroupsAMDPROC = fn void(GLint* numGroups, GLsizei groupsSize, GLuint* groups);
PFNglGetPerfMonitorGroupsAMDPROC getPerfMonitorGroupsAMD = null;
alias PFNglGetPerfQueryDataINTELPROC = fn void(GLuint queryHandle, GLuint flags, GLsizei dataSize, void* data, GLuint* bytesWritten);
PFNglGetPerfQueryDataINTELPROC getPerfQueryDataINTEL = null;
alias PFNglGetPerfQueryIdByNameINTELPROC = fn void(GLchar* queryName, GLuint* queryId);
PFNglGetPerfQueryIdByNameINTELPROC getPerfQueryIdByNameINTEL = null;
alias PFNglGetPerfQueryInfoINTELPROC = fn void(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask);
PFNglGetPerfQueryInfoINTELPROC getPerfQueryInfoINTEL = null;
alias PFNglGetPixelMapfvPROC = fn void(GLenum map, GLfloat* values);
PFNglGetPixelMapfvPROC getPixelMapfv = null;
alias PFNglGetPixelMapuivPROC = fn void(GLenum map, GLuint* values);
PFNglGetPixelMapuivPROC getPixelMapuiv = null;
alias PFNglGetPixelMapusvPROC = fn void(GLenum map, GLushort* values);
PFNglGetPixelMapusvPROC getPixelMapusv = null;
alias PFNglGetPixelMapxvPROC = fn void(GLenum map, GLint size, GLfixed* values);
PFNglGetPixelMapxvPROC getPixelMapxv = null;
alias PFNglGetPixelTexGenParameterfvSGISPROC = fn void(GLenum pname, GLfloat* params);
PFNglGetPixelTexGenParameterfvSGISPROC getPixelTexGenParameterfvSGIS = null;
alias PFNglGetPixelTexGenParameterivSGISPROC = fn void(GLenum pname, GLint* params);
PFNglGetPixelTexGenParameterivSGISPROC getPixelTexGenParameterivSGIS = null;
alias PFNglGetPixelTransformParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetPixelTransformParameterfvEXTPROC getPixelTransformParameterfvEXT = null;
alias PFNglGetPixelTransformParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetPixelTransformParameterivEXTPROC getPixelTransformParameterivEXT = null;
alias PFNglGetPointerIndexedvEXTPROC = fn void(GLenum target, GLuint index, void** data);
PFNglGetPointerIndexedvEXTPROC getPointerIndexedvEXT = null;
alias PFNglGetPointeri_vEXTPROC = fn void(GLenum pname, GLuint index, void** params);
PFNglGetPointeri_vEXTPROC getPointeri_vEXT = null;
alias PFNglGetPointervPROC = fn void(GLenum pname, void** params);
PFNglGetPointervPROC getPointerv = null;
alias PFNglGetPointervEXTPROC = fn void(GLenum pname, void** params);
PFNglGetPointervEXTPROC getPointervEXT = null;
alias PFNglGetPointervKHRPROC = fn void(GLenum pname, void** params);
PFNglGetPointervKHRPROC getPointervKHR = null;
alias PFNglGetPolygonStipplePROC = fn void(GLubyte* mask);
PFNglGetPolygonStipplePROC getPolygonStipple = null;
alias PFNglGetProgramBinaryPROC = fn void(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
PFNglGetProgramBinaryPROC getProgramBinary = null;
alias PFNglGetProgramBinaryOESPROC = fn void(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
PFNglGetProgramBinaryOESPROC getProgramBinaryOES = null;
alias PFNglGetProgramEnvParameterIivNVPROC = fn void(GLenum target, GLuint index, GLint* params);
PFNglGetProgramEnvParameterIivNVPROC getProgramEnvParameterIivNV = null;
alias PFNglGetProgramEnvParameterIuivNVPROC = fn void(GLenum target, GLuint index, GLuint* params);
PFNglGetProgramEnvParameterIuivNVPROC getProgramEnvParameterIuivNV = null;
alias PFNglGetProgramEnvParameterdvARBPROC = fn void(GLenum target, GLuint index, GLdouble* params);
PFNglGetProgramEnvParameterdvARBPROC getProgramEnvParameterdvARB = null;
alias PFNglGetProgramEnvParameterfvARBPROC = fn void(GLenum target, GLuint index, GLfloat* params);
PFNglGetProgramEnvParameterfvARBPROC getProgramEnvParameterfvARB = null;
alias PFNglGetProgramInfoLogPROC = fn void(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
PFNglGetProgramInfoLogPROC getProgramInfoLog = null;
alias PFNglGetProgramInterfaceivPROC = fn void(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
PFNglGetProgramInterfaceivPROC getProgramInterfaceiv = null;
alias PFNglGetProgramLocalParameterIivNVPROC = fn void(GLenum target, GLuint index, GLint* params);
PFNglGetProgramLocalParameterIivNVPROC getProgramLocalParameterIivNV = null;
alias PFNglGetProgramLocalParameterIuivNVPROC = fn void(GLenum target, GLuint index, GLuint* params);
PFNglGetProgramLocalParameterIuivNVPROC getProgramLocalParameterIuivNV = null;
alias PFNglGetProgramLocalParameterdvARBPROC = fn void(GLenum target, GLuint index, GLdouble* params);
PFNglGetProgramLocalParameterdvARBPROC getProgramLocalParameterdvARB = null;
alias PFNglGetProgramLocalParameterfvARBPROC = fn void(GLenum target, GLuint index, GLfloat* params);
PFNglGetProgramLocalParameterfvARBPROC getProgramLocalParameterfvARB = null;
alias PFNglGetProgramNamedParameterdvNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLdouble* params);
PFNglGetProgramNamedParameterdvNVPROC getProgramNamedParameterdvNV = null;
alias PFNglGetProgramNamedParameterfvNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLfloat* params);
PFNglGetProgramNamedParameterfvNVPROC getProgramNamedParameterfvNV = null;
alias PFNglGetProgramParameterdvNVPROC = fn void(GLenum target, GLuint index, GLenum pname, GLdouble* params);
PFNglGetProgramParameterdvNVPROC getProgramParameterdvNV = null;
alias PFNglGetProgramParameterfvNVPROC = fn void(GLenum target, GLuint index, GLenum pname, GLfloat* params);
PFNglGetProgramParameterfvNVPROC getProgramParameterfvNV = null;
alias PFNglGetProgramPipelineInfoLogPROC = fn void(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
PFNglGetProgramPipelineInfoLogPROC getProgramPipelineInfoLog = null;
alias PFNglGetProgramPipelineInfoLogEXTPROC = fn void(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
PFNglGetProgramPipelineInfoLogEXTPROC getProgramPipelineInfoLogEXT = null;
alias PFNglGetProgramPipelineivPROC = fn void(GLuint pipeline, GLenum pname, GLint* params);
PFNglGetProgramPipelineivPROC getProgramPipelineiv = null;
alias PFNglGetProgramPipelineivEXTPROC = fn void(GLuint pipeline, GLenum pname, GLint* params);
PFNglGetProgramPipelineivEXTPROC getProgramPipelineivEXT = null;
alias PFNglGetProgramResourceIndexPROC = fn GLuint(GLuint program, GLenum programInterface, GLchar* name);
PFNglGetProgramResourceIndexPROC getProgramResourceIndex = null;
alias PFNglGetProgramResourceLocationPROC = fn GLint(GLuint program, GLenum programInterface, GLchar* name);
PFNglGetProgramResourceLocationPROC getProgramResourceLocation = null;
alias PFNglGetProgramResourceLocationIndexPROC = fn GLint(GLuint program, GLenum programInterface, GLchar* name);
PFNglGetProgramResourceLocationIndexPROC getProgramResourceLocationIndex = null;
alias PFNglGetProgramResourceLocationIndexEXTPROC = fn GLint(GLuint program, GLenum programInterface, GLchar* name);
PFNglGetProgramResourceLocationIndexEXTPROC getProgramResourceLocationIndexEXT = null;
alias PFNglGetProgramResourceNamePROC = fn void(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
PFNglGetProgramResourceNamePROC getProgramResourceName = null;
alias PFNglGetProgramResourcefvNVPROC = fn void(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, GLenum* props, GLsizei count, GLsizei* length, GLfloat* params);
PFNglGetProgramResourcefvNVPROC getProgramResourcefvNV = null;
alias PFNglGetProgramResourceivPROC = fn void(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, GLenum* props, GLsizei count, GLsizei* length, GLint* params);
PFNglGetProgramResourceivPROC getProgramResourceiv = null;
alias PFNglGetProgramStageivPROC = fn void(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
PFNglGetProgramStageivPROC getProgramStageiv = null;
alias PFNglGetProgramStringARBPROC = fn void(GLenum target, GLenum pname, void* string);
PFNglGetProgramStringARBPROC getProgramStringARB = null;
alias PFNglGetProgramStringNVPROC = fn void(GLuint id, GLenum pname, GLubyte* program);
PFNglGetProgramStringNVPROC getProgramStringNV = null;
alias PFNglGetProgramSubroutineParameteruivNVPROC = fn void(GLenum target, GLuint index, GLuint* param);
PFNglGetProgramSubroutineParameteruivNVPROC getProgramSubroutineParameteruivNV = null;
alias PFNglGetProgramivPROC = fn void(GLuint program, GLenum pname, GLint* params);
PFNglGetProgramivPROC getProgramiv = null;
alias PFNglGetProgramivARBPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetProgramivARBPROC getProgramivARB = null;
alias PFNglGetProgramivNVPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetProgramivNVPROC getProgramivNV = null;
alias PFNglGetQueryBufferObjecti64vPROC = fn void(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
PFNglGetQueryBufferObjecti64vPROC getQueryBufferObjecti64v = null;
alias PFNglGetQueryBufferObjectivPROC = fn void(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
PFNglGetQueryBufferObjectivPROC getQueryBufferObjectiv = null;
alias PFNglGetQueryBufferObjectui64vPROC = fn void(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
PFNglGetQueryBufferObjectui64vPROC getQueryBufferObjectui64v = null;
alias PFNglGetQueryBufferObjectuivPROC = fn void(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
PFNglGetQueryBufferObjectuivPROC getQueryBufferObjectuiv = null;
alias PFNglGetQueryIndexedivPROC = fn void(GLenum target, GLuint index, GLenum pname, GLint* params);
PFNglGetQueryIndexedivPROC getQueryIndexediv = null;
alias PFNglGetQueryObjecti64vPROC = fn void(GLuint id, GLenum pname, GLint64* params);
PFNglGetQueryObjecti64vPROC getQueryObjecti64v = null;
alias PFNglGetQueryObjecti64vEXTPROC = fn void(GLuint id, GLenum pname, GLint64* params);
PFNglGetQueryObjecti64vEXTPROC getQueryObjecti64vEXT = null;
alias PFNglGetQueryObjectivPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetQueryObjectivPROC getQueryObjectiv = null;
alias PFNglGetQueryObjectivARBPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetQueryObjectivARBPROC getQueryObjectivARB = null;
alias PFNglGetQueryObjectivEXTPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetQueryObjectivEXTPROC getQueryObjectivEXT = null;
alias PFNglGetQueryObjectui64vPROC = fn void(GLuint id, GLenum pname, GLuint64* params);
PFNglGetQueryObjectui64vPROC getQueryObjectui64v = null;
alias PFNglGetQueryObjectui64vEXTPROC = fn void(GLuint id, GLenum pname, GLuint64* params);
PFNglGetQueryObjectui64vEXTPROC getQueryObjectui64vEXT = null;
alias PFNglGetQueryObjectuivPROC = fn void(GLuint id, GLenum pname, GLuint* params);
PFNglGetQueryObjectuivPROC getQueryObjectuiv = null;
alias PFNglGetQueryObjectuivARBPROC = fn void(GLuint id, GLenum pname, GLuint* params);
PFNglGetQueryObjectuivARBPROC getQueryObjectuivARB = null;
alias PFNglGetQueryObjectuivEXTPROC = fn void(GLuint id, GLenum pname, GLuint* params);
PFNglGetQueryObjectuivEXTPROC getQueryObjectuivEXT = null;
alias PFNglGetQueryivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetQueryivPROC getQueryiv = null;
alias PFNglGetQueryivARBPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetQueryivARBPROC getQueryivARB = null;
alias PFNglGetQueryivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetQueryivEXTPROC getQueryivEXT = null;
alias PFNglGetRenderbufferParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetRenderbufferParameterivPROC getRenderbufferParameteriv = null;
alias PFNglGetRenderbufferParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetRenderbufferParameterivEXTPROC getRenderbufferParameterivEXT = null;
alias PFNglGetRenderbufferParameterivOESPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetRenderbufferParameterivOESPROC getRenderbufferParameterivOES = null;
alias PFNglGetSamplerParameterIivPROC = fn void(GLuint sampler, GLenum pname, GLint* params);
PFNglGetSamplerParameterIivPROC getSamplerParameterIiv = null;
alias PFNglGetSamplerParameterIivEXTPROC = fn void(GLuint sampler, GLenum pname, GLint* params);
PFNglGetSamplerParameterIivEXTPROC getSamplerParameterIivEXT = null;
alias PFNglGetSamplerParameterIivOESPROC = fn void(GLuint sampler, GLenum pname, GLint* params);
PFNglGetSamplerParameterIivOESPROC getSamplerParameterIivOES = null;
alias PFNglGetSamplerParameterIuivPROC = fn void(GLuint sampler, GLenum pname, GLuint* params);
PFNglGetSamplerParameterIuivPROC getSamplerParameterIuiv = null;
alias PFNglGetSamplerParameterIuivEXTPROC = fn void(GLuint sampler, GLenum pname, GLuint* params);
PFNglGetSamplerParameterIuivEXTPROC getSamplerParameterIuivEXT = null;
alias PFNglGetSamplerParameterIuivOESPROC = fn void(GLuint sampler, GLenum pname, GLuint* params);
PFNglGetSamplerParameterIuivOESPROC getSamplerParameterIuivOES = null;
alias PFNglGetSamplerParameterfvPROC = fn void(GLuint sampler, GLenum pname, GLfloat* params);
PFNglGetSamplerParameterfvPROC getSamplerParameterfv = null;
alias PFNglGetSamplerParameterivPROC = fn void(GLuint sampler, GLenum pname, GLint* params);
PFNglGetSamplerParameterivPROC getSamplerParameteriv = null;
alias PFNglGetSemaphoreParameterivNVPROC = fn void(GLuint semaphore, GLenum pname, GLint* params);
PFNglGetSemaphoreParameterivNVPROC getSemaphoreParameterivNV = null;
alias PFNglGetSemaphoreParameterui64vEXTPROC = fn void(GLuint semaphore, GLenum pname, GLuint64* params);
PFNglGetSemaphoreParameterui64vEXTPROC getSemaphoreParameterui64vEXT = null;
alias PFNglGetSeparableFilterPROC = fn void(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
PFNglGetSeparableFilterPROC getSeparableFilter = null;
alias PFNglGetSeparableFilterEXTPROC = fn void(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
PFNglGetSeparableFilterEXTPROC getSeparableFilterEXT = null;
alias PFNglGetShaderInfoLogPROC = fn void(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
PFNglGetShaderInfoLogPROC getShaderInfoLog = null;
alias PFNglGetShaderPrecisionFormatPROC = fn void(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
PFNglGetShaderPrecisionFormatPROC getShaderPrecisionFormat = null;
alias PFNglGetShaderSourcePROC = fn void(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
PFNglGetShaderSourcePROC getShaderSource = null;
alias PFNglGetShaderSourceARBPROC = fn void(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source);
PFNglGetShaderSourceARBPROC getShaderSourceARB = null;
alias PFNglGetShaderivPROC = fn void(GLuint shader, GLenum pname, GLint* params);
PFNglGetShaderivPROC getShaderiv = null;
alias PFNglGetShadingRateImagePaletteNVPROC = fn void(GLuint viewport, GLuint entry, GLenum* rate);
PFNglGetShadingRateImagePaletteNVPROC getShadingRateImagePaletteNV = null;
alias PFNglGetShadingRateSampleLocationivNVPROC = fn void(GLenum rate, GLuint samples, GLuint index, GLint* location);
PFNglGetShadingRateSampleLocationivNVPROC getShadingRateSampleLocationivNV = null;
alias PFNglGetSharpenTexFuncSGISPROC = fn void(GLenum target, GLfloat* points);
PFNglGetSharpenTexFuncSGISPROC getSharpenTexFuncSGIS = null;
alias PFNglGetStageIndexNVPROC = fn GLushort(GLenum shadertype);
PFNglGetStageIndexNVPROC getStageIndexNV = null;
alias PFNglGetStringPROC = fn GLubyte*(GLenum name);
PFNglGetStringPROC getString = null;
alias PFNglGetStringiPROC = fn GLubyte*(GLenum name, GLuint index);
PFNglGetStringiPROC getStringi = null;
alias PFNglGetSubroutineIndexPROC = fn GLuint(GLuint program, GLenum shadertype, GLchar* name);
PFNglGetSubroutineIndexPROC getSubroutineIndex = null;
alias PFNglGetSubroutineUniformLocationPROC = fn GLint(GLuint program, GLenum shadertype, GLchar* name);
PFNglGetSubroutineUniformLocationPROC getSubroutineUniformLocation = null;
alias PFNglGetSyncivPROC = fn void(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
PFNglGetSyncivPROC getSynciv = null;
alias PFNglGetSyncivAPPLEPROC = fn void(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
PFNglGetSyncivAPPLEPROC getSyncivAPPLE = null;
alias PFNglGetTexBumpParameterfvATIPROC = fn void(GLenum pname, GLfloat* param);
PFNglGetTexBumpParameterfvATIPROC getTexBumpParameterfvATI = null;
alias PFNglGetTexBumpParameterivATIPROC = fn void(GLenum pname, GLint* param);
PFNglGetTexBumpParameterivATIPROC getTexBumpParameterivATI = null;
alias PFNglGetTexEnvfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetTexEnvfvPROC getTexEnvfv = null;
alias PFNglGetTexEnvivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetTexEnvivPROC getTexEnviv = null;
alias PFNglGetTexEnvxvPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetTexEnvxvPROC getTexEnvxv = null;
alias PFNglGetTexEnvxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetTexEnvxvOESPROC getTexEnvxvOES = null;
alias PFNglGetTexFilterFuncSGISPROC = fn void(GLenum target, GLenum filter, GLfloat* weights);
PFNglGetTexFilterFuncSGISPROC getTexFilterFuncSGIS = null;
alias PFNglGetTexGendvPROC = fn void(GLenum coord, GLenum pname, GLdouble* params);
PFNglGetTexGendvPROC getTexGendv = null;
alias PFNglGetTexGenfvPROC = fn void(GLenum coord, GLenum pname, GLfloat* params);
PFNglGetTexGenfvPROC getTexGenfv = null;
alias PFNglGetTexGenfvOESPROC = fn void(GLenum coord, GLenum pname, GLfloat* params);
PFNglGetTexGenfvOESPROC getTexGenfvOES = null;
alias PFNglGetTexGenivPROC = fn void(GLenum coord, GLenum pname, GLint* params);
PFNglGetTexGenivPROC getTexGeniv = null;
alias PFNglGetTexGenivOESPROC = fn void(GLenum coord, GLenum pname, GLint* params);
PFNglGetTexGenivOESPROC getTexGenivOES = null;
alias PFNglGetTexGenxvOESPROC = fn void(GLenum coord, GLenum pname, GLfixed* params);
PFNglGetTexGenxvOESPROC getTexGenxvOES = null;
alias PFNglGetTexImagePROC = fn void(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
PFNglGetTexImagePROC getTexImage = null;
alias PFNglGetTexLevelParameterfvPROC = fn void(GLenum target, GLint level, GLenum pname, GLfloat* params);
PFNglGetTexLevelParameterfvPROC getTexLevelParameterfv = null;
alias PFNglGetTexLevelParameterivPROC = fn void(GLenum target, GLint level, GLenum pname, GLint* params);
PFNglGetTexLevelParameterivPROC getTexLevelParameteriv = null;
alias PFNglGetTexLevelParameterxvOESPROC = fn void(GLenum target, GLint level, GLenum pname, GLfixed* params);
PFNglGetTexLevelParameterxvOESPROC getTexLevelParameterxvOES = null;
alias PFNglGetTexParameterIivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetTexParameterIivPROC getTexParameterIiv = null;
alias PFNglGetTexParameterIivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetTexParameterIivEXTPROC getTexParameterIivEXT = null;
alias PFNglGetTexParameterIivOESPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetTexParameterIivOESPROC getTexParameterIivOES = null;
alias PFNglGetTexParameterIuivPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglGetTexParameterIuivPROC getTexParameterIuiv = null;
alias PFNglGetTexParameterIuivEXTPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglGetTexParameterIuivEXTPROC getTexParameterIuivEXT = null;
alias PFNglGetTexParameterIuivOESPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglGetTexParameterIuivOESPROC getTexParameterIuivOES = null;
alias PFNglGetTexParameterPointervAPPLEPROC = fn void(GLenum target, GLenum pname, void** params);
PFNglGetTexParameterPointervAPPLEPROC getTexParameterPointervAPPLE = null;
alias PFNglGetTexParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglGetTexParameterfvPROC getTexParameterfv = null;
alias PFNglGetTexParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetTexParameterivPROC getTexParameteriv = null;
alias PFNglGetTexParameterxvPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetTexParameterxvPROC getTexParameterxv = null;
alias PFNglGetTexParameterxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglGetTexParameterxvOESPROC getTexParameterxvOES = null;
alias PFNglGetTextureHandleARBPROC = fn GLuint64(GLuint texture);
PFNglGetTextureHandleARBPROC getTextureHandleARB = null;
alias PFNglGetTextureHandleIMGPROC = fn GLuint64(GLuint texture);
PFNglGetTextureHandleIMGPROC getTextureHandleIMG = null;
alias PFNglGetTextureHandleNVPROC = fn GLuint64(GLuint texture);
PFNglGetTextureHandleNVPROC getTextureHandleNV = null;
alias PFNglGetTextureImagePROC = fn void(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
PFNglGetTextureImagePROC getTextureImage = null;
alias PFNglGetTextureImageEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
PFNglGetTextureImageEXTPROC getTextureImageEXT = null;
alias PFNglGetTextureLevelParameterfvPROC = fn void(GLuint texture, GLint level, GLenum pname, GLfloat* params);
PFNglGetTextureLevelParameterfvPROC getTextureLevelParameterfv = null;
alias PFNglGetTextureLevelParameterfvEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
PFNglGetTextureLevelParameterfvEXTPROC getTextureLevelParameterfvEXT = null;
alias PFNglGetTextureLevelParameterivPROC = fn void(GLuint texture, GLint level, GLenum pname, GLint* params);
PFNglGetTextureLevelParameterivPROC getTextureLevelParameteriv = null;
alias PFNglGetTextureLevelParameterivEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
PFNglGetTextureLevelParameterivEXTPROC getTextureLevelParameterivEXT = null;
alias PFNglGetTextureParameterIivPROC = fn void(GLuint texture, GLenum pname, GLint* params);
PFNglGetTextureParameterIivPROC getTextureParameterIiv = null;
alias PFNglGetTextureParameterIivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLint* params);
PFNglGetTextureParameterIivEXTPROC getTextureParameterIivEXT = null;
alias PFNglGetTextureParameterIuivPROC = fn void(GLuint texture, GLenum pname, GLuint* params);
PFNglGetTextureParameterIuivPROC getTextureParameterIuiv = null;
alias PFNglGetTextureParameterIuivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLuint* params);
PFNglGetTextureParameterIuivEXTPROC getTextureParameterIuivEXT = null;
alias PFNglGetTextureParameterfvPROC = fn void(GLuint texture, GLenum pname, GLfloat* params);
PFNglGetTextureParameterfvPROC getTextureParameterfv = null;
alias PFNglGetTextureParameterfvEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
PFNglGetTextureParameterfvEXTPROC getTextureParameterfvEXT = null;
alias PFNglGetTextureParameterivPROC = fn void(GLuint texture, GLenum pname, GLint* params);
PFNglGetTextureParameterivPROC getTextureParameteriv = null;
alias PFNglGetTextureParameterivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLint* params);
PFNglGetTextureParameterivEXTPROC getTextureParameterivEXT = null;
alias PFNglGetTextureSamplerHandleARBPROC = fn GLuint64(GLuint texture, GLuint sampler);
PFNglGetTextureSamplerHandleARBPROC getTextureSamplerHandleARB = null;
alias PFNglGetTextureSamplerHandleIMGPROC = fn GLuint64(GLuint texture, GLuint sampler);
PFNglGetTextureSamplerHandleIMGPROC getTextureSamplerHandleIMG = null;
alias PFNglGetTextureSamplerHandleNVPROC = fn GLuint64(GLuint texture, GLuint sampler);
PFNglGetTextureSamplerHandleNVPROC getTextureSamplerHandleNV = null;
alias PFNglGetTextureSubImagePROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
PFNglGetTextureSubImagePROC getTextureSubImage = null;
alias PFNglGetTrackMatrixivNVPROC = fn void(GLenum target, GLuint address, GLenum pname, GLint* params);
PFNglGetTrackMatrixivNVPROC getTrackMatrixivNV = null;
alias PFNglGetTransformFeedbackVaryingPROC = fn void(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
PFNglGetTransformFeedbackVaryingPROC getTransformFeedbackVarying = null;
alias PFNglGetTransformFeedbackVaryingEXTPROC = fn void(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
PFNglGetTransformFeedbackVaryingEXTPROC getTransformFeedbackVaryingEXT = null;
alias PFNglGetTransformFeedbackVaryingNVPROC = fn void(GLuint program, GLuint index, GLint* location);
PFNglGetTransformFeedbackVaryingNVPROC getTransformFeedbackVaryingNV = null;
alias PFNglGetTransformFeedbacki64_vPROC = fn void(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
PFNglGetTransformFeedbacki64_vPROC getTransformFeedbacki64_v = null;
alias PFNglGetTransformFeedbacki_vPROC = fn void(GLuint xfb, GLenum pname, GLuint index, GLint* param);
PFNglGetTransformFeedbacki_vPROC getTransformFeedbacki_v = null;
alias PFNglGetTransformFeedbackivPROC = fn void(GLuint xfb, GLenum pname, GLint* param);
PFNglGetTransformFeedbackivPROC getTransformFeedbackiv = null;
alias PFNglGetTranslatedShaderSourceANGLEPROC = fn void(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
PFNglGetTranslatedShaderSourceANGLEPROC getTranslatedShaderSourceANGLE = null;
alias PFNglGetUniformBlockIndexPROC = fn GLuint(GLuint program, GLchar* uniformBlockName);
PFNglGetUniformBlockIndexPROC getUniformBlockIndex = null;
alias PFNglGetUniformBufferSizeEXTPROC = fn GLint(GLuint program, GLint location);
PFNglGetUniformBufferSizeEXTPROC getUniformBufferSizeEXT = null;
alias PFNglGetUniformIndicesPROC = fn void(GLuint program, GLsizei uniformCount, GLchar** uniformNames, GLuint* uniformIndices);
PFNglGetUniformIndicesPROC getUniformIndices = null;
alias PFNglGetUniformLocationPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetUniformLocationPROC getUniformLocation = null;
alias PFNglGetUniformLocationARBPROC = fn GLint(GLhandleARB programObj, GLcharARB* name);
PFNglGetUniformLocationARBPROC getUniformLocationARB = null;
alias PFNglGetUniformOffsetEXTPROC = fn GLintptr(GLuint program, GLint location);
PFNglGetUniformOffsetEXTPROC getUniformOffsetEXT = null;
alias PFNglGetUniformSubroutineuivPROC = fn void(GLenum shadertype, GLint location, GLuint* params);
PFNglGetUniformSubroutineuivPROC getUniformSubroutineuiv = null;
alias PFNglGetUniformdvPROC = fn void(GLuint program, GLint location, GLdouble* params);
PFNglGetUniformdvPROC getUniformdv = null;
alias PFNglGetUniformfvPROC = fn void(GLuint program, GLint location, GLfloat* params);
PFNglGetUniformfvPROC getUniformfv = null;
alias PFNglGetUniformfvARBPROC = fn void(GLhandleARB programObj, GLint location, GLfloat* params);
PFNglGetUniformfvARBPROC getUniformfvARB = null;
alias PFNglGetUniformi64vARBPROC = fn void(GLuint program, GLint location, GLint64* params);
PFNglGetUniformi64vARBPROC getUniformi64vARB = null;
alias PFNglGetUniformi64vNVPROC = fn void(GLuint program, GLint location, GLint64EXT* params);
PFNglGetUniformi64vNVPROC getUniformi64vNV = null;
alias PFNglGetUniformivPROC = fn void(GLuint program, GLint location, GLint* params);
PFNglGetUniformivPROC getUniformiv = null;
alias PFNglGetUniformivARBPROC = fn void(GLhandleARB programObj, GLint location, GLint* params);
PFNglGetUniformivARBPROC getUniformivARB = null;
alias PFNglGetUniformui64vARBPROC = fn void(GLuint program, GLint location, GLuint64* params);
PFNglGetUniformui64vARBPROC getUniformui64vARB = null;
alias PFNglGetUniformui64vNVPROC = fn void(GLuint program, GLint location, GLuint64EXT* params);
PFNglGetUniformui64vNVPROC getUniformui64vNV = null;
alias PFNglGetUniformuivPROC = fn void(GLuint program, GLint location, GLuint* params);
PFNglGetUniformuivPROC getUniformuiv = null;
alias PFNglGetUniformuivEXTPROC = fn void(GLuint program, GLint location, GLuint* params);
PFNglGetUniformuivEXTPROC getUniformuivEXT = null;
alias PFNglGetUnsignedBytevEXTPROC = fn void(GLenum pname, GLubyte* data);
PFNglGetUnsignedBytevEXTPROC getUnsignedBytevEXT = null;
alias PFNglGetUnsignedBytei_vEXTPROC = fn void(GLenum target, GLuint index, GLubyte* data);
PFNglGetUnsignedBytei_vEXTPROC getUnsignedBytei_vEXT = null;
alias PFNglGetVariantArrayObjectfvATIPROC = fn void(GLuint id, GLenum pname, GLfloat* params);
PFNglGetVariantArrayObjectfvATIPROC getVariantArrayObjectfvATI = null;
alias PFNglGetVariantArrayObjectivATIPROC = fn void(GLuint id, GLenum pname, GLint* params);
PFNglGetVariantArrayObjectivATIPROC getVariantArrayObjectivATI = null;
alias PFNglGetVariantBooleanvEXTPROC = fn void(GLuint id, GLenum value, GLboolean* data);
PFNglGetVariantBooleanvEXTPROC getVariantBooleanvEXT = null;
alias PFNglGetVariantFloatvEXTPROC = fn void(GLuint id, GLenum value, GLfloat* data);
PFNglGetVariantFloatvEXTPROC getVariantFloatvEXT = null;
alias PFNglGetVariantIntegervEXTPROC = fn void(GLuint id, GLenum value, GLint* data);
PFNglGetVariantIntegervEXTPROC getVariantIntegervEXT = null;
alias PFNglGetVariantPointervEXTPROC = fn void(GLuint id, GLenum value, void** data);
PFNglGetVariantPointervEXTPROC getVariantPointervEXT = null;
alias PFNglGetVaryingLocationNVPROC = fn GLint(GLuint program, GLchar* name);
PFNglGetVaryingLocationNVPROC getVaryingLocationNV = null;
alias PFNglGetVertexArrayIndexed64ivPROC = fn void(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
PFNglGetVertexArrayIndexed64ivPROC getVertexArrayIndexed64iv = null;
alias PFNglGetVertexArrayIndexedivPROC = fn void(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
PFNglGetVertexArrayIndexedivPROC getVertexArrayIndexediv = null;
alias PFNglGetVertexArrayIntegeri_vEXTPROC = fn void(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
PFNglGetVertexArrayIntegeri_vEXTPROC getVertexArrayIntegeri_vEXT = null;
alias PFNglGetVertexArrayIntegervEXTPROC = fn void(GLuint vaobj, GLenum pname, GLint* param);
PFNglGetVertexArrayIntegervEXTPROC getVertexArrayIntegervEXT = null;
alias PFNglGetVertexArrayPointeri_vEXTPROC = fn void(GLuint vaobj, GLuint index, GLenum pname, void** param);
PFNglGetVertexArrayPointeri_vEXTPROC getVertexArrayPointeri_vEXT = null;
alias PFNglGetVertexArrayPointervEXTPROC = fn void(GLuint vaobj, GLenum pname, void** param);
PFNglGetVertexArrayPointervEXTPROC getVertexArrayPointervEXT = null;
alias PFNglGetVertexArrayivPROC = fn void(GLuint vaobj, GLenum pname, GLint* param);
PFNglGetVertexArrayivPROC getVertexArrayiv = null;
alias PFNglGetVertexAttribArrayObjectfvATIPROC = fn void(GLuint index, GLenum pname, GLfloat* params);
PFNglGetVertexAttribArrayObjectfvATIPROC getVertexAttribArrayObjectfvATI = null;
alias PFNglGetVertexAttribArrayObjectivATIPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribArrayObjectivATIPROC getVertexAttribArrayObjectivATI = null;
alias PFNglGetVertexAttribIivPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribIivPROC getVertexAttribIiv = null;
alias PFNglGetVertexAttribIivEXTPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribIivEXTPROC getVertexAttribIivEXT = null;
alias PFNglGetVertexAttribIuivPROC = fn void(GLuint index, GLenum pname, GLuint* params);
PFNglGetVertexAttribIuivPROC getVertexAttribIuiv = null;
alias PFNglGetVertexAttribIuivEXTPROC = fn void(GLuint index, GLenum pname, GLuint* params);
PFNglGetVertexAttribIuivEXTPROC getVertexAttribIuivEXT = null;
alias PFNglGetVertexAttribLdvPROC = fn void(GLuint index, GLenum pname, GLdouble* params);
PFNglGetVertexAttribLdvPROC getVertexAttribLdv = null;
alias PFNglGetVertexAttribLdvEXTPROC = fn void(GLuint index, GLenum pname, GLdouble* params);
PFNglGetVertexAttribLdvEXTPROC getVertexAttribLdvEXT = null;
alias PFNglGetVertexAttribLi64vNVPROC = fn void(GLuint index, GLenum pname, GLint64EXT* params);
PFNglGetVertexAttribLi64vNVPROC getVertexAttribLi64vNV = null;
alias PFNglGetVertexAttribLui64vARBPROC = fn void(GLuint index, GLenum pname, GLuint64EXT* params);
PFNglGetVertexAttribLui64vARBPROC getVertexAttribLui64vARB = null;
alias PFNglGetVertexAttribLui64vNVPROC = fn void(GLuint index, GLenum pname, GLuint64EXT* params);
PFNglGetVertexAttribLui64vNVPROC getVertexAttribLui64vNV = null;
alias PFNglGetVertexAttribPointervPROC = fn void(GLuint index, GLenum pname, void** pointer);
PFNglGetVertexAttribPointervPROC getVertexAttribPointerv = null;
alias PFNglGetVertexAttribPointervARBPROC = fn void(GLuint index, GLenum pname, void** pointer);
PFNglGetVertexAttribPointervARBPROC getVertexAttribPointervARB = null;
alias PFNglGetVertexAttribPointervNVPROC = fn void(GLuint index, GLenum pname, void** pointer);
PFNglGetVertexAttribPointervNVPROC getVertexAttribPointervNV = null;
alias PFNglGetVertexAttribdvPROC = fn void(GLuint index, GLenum pname, GLdouble* params);
PFNglGetVertexAttribdvPROC getVertexAttribdv = null;
alias PFNglGetVertexAttribdvARBPROC = fn void(GLuint index, GLenum pname, GLdouble* params);
PFNglGetVertexAttribdvARBPROC getVertexAttribdvARB = null;
alias PFNglGetVertexAttribdvNVPROC = fn void(GLuint index, GLenum pname, GLdouble* params);
PFNglGetVertexAttribdvNVPROC getVertexAttribdvNV = null;
alias PFNglGetVertexAttribfvPROC = fn void(GLuint index, GLenum pname, GLfloat* params);
PFNglGetVertexAttribfvPROC getVertexAttribfv = null;
alias PFNglGetVertexAttribfvARBPROC = fn void(GLuint index, GLenum pname, GLfloat* params);
PFNglGetVertexAttribfvARBPROC getVertexAttribfvARB = null;
alias PFNglGetVertexAttribfvNVPROC = fn void(GLuint index, GLenum pname, GLfloat* params);
PFNglGetVertexAttribfvNVPROC getVertexAttribfvNV = null;
alias PFNglGetVertexAttribivPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribivPROC getVertexAttribiv = null;
alias PFNglGetVertexAttribivARBPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribivARBPROC getVertexAttribivARB = null;
alias PFNglGetVertexAttribivNVPROC = fn void(GLuint index, GLenum pname, GLint* params);
PFNglGetVertexAttribivNVPROC getVertexAttribivNV = null;
alias PFNglGetVideoCaptureStreamdvNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
PFNglGetVideoCaptureStreamdvNVPROC getVideoCaptureStreamdvNV = null;
alias PFNglGetVideoCaptureStreamfvNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
PFNglGetVideoCaptureStreamfvNVPROC getVideoCaptureStreamfvNV = null;
alias PFNglGetVideoCaptureStreamivNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
PFNglGetVideoCaptureStreamivNVPROC getVideoCaptureStreamivNV = null;
alias PFNglGetVideoCaptureivNVPROC = fn void(GLuint video_capture_slot, GLenum pname, GLint* params);
PFNglGetVideoCaptureivNVPROC getVideoCaptureivNV = null;
alias PFNglGetVideoi64vNVPROC = fn void(GLuint video_slot, GLenum pname, GLint64EXT* params);
PFNglGetVideoi64vNVPROC getVideoi64vNV = null;
alias PFNglGetVideoivNVPROC = fn void(GLuint video_slot, GLenum pname, GLint* params);
PFNglGetVideoivNVPROC getVideoivNV = null;
alias PFNglGetVideoui64vNVPROC = fn void(GLuint video_slot, GLenum pname, GLuint64EXT* params);
PFNglGetVideoui64vNVPROC getVideoui64vNV = null;
alias PFNglGetVideouivNVPROC = fn void(GLuint video_slot, GLenum pname, GLuint* params);
PFNglGetVideouivNVPROC getVideouivNV = null;
alias PFNglGetnColorTablePROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
PFNglGetnColorTablePROC getnColorTable = null;
alias PFNglGetnColorTableARBPROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
PFNglGetnColorTableARBPROC getnColorTableARB = null;
alias PFNglGetnCompressedTexImagePROC = fn void(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
PFNglGetnCompressedTexImagePROC getnCompressedTexImage = null;
alias PFNglGetnCompressedTexImageARBPROC = fn void(GLenum target, GLint lod, GLsizei bufSize, void* img);
PFNglGetnCompressedTexImageARBPROC getnCompressedTexImageARB = null;
alias PFNglGetnConvolutionFilterPROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
PFNglGetnConvolutionFilterPROC getnConvolutionFilter = null;
alias PFNglGetnConvolutionFilterARBPROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
PFNglGetnConvolutionFilterARBPROC getnConvolutionFilterARB = null;
alias PFNglGetnHistogramPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
PFNglGetnHistogramPROC getnHistogram = null;
alias PFNglGetnHistogramARBPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
PFNglGetnHistogramARBPROC getnHistogramARB = null;
alias PFNglGetnMapdvPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
PFNglGetnMapdvPROC getnMapdv = null;
alias PFNglGetnMapdvARBPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
PFNglGetnMapdvARBPROC getnMapdvARB = null;
alias PFNglGetnMapfvPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
PFNglGetnMapfvPROC getnMapfv = null;
alias PFNglGetnMapfvARBPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
PFNglGetnMapfvARBPROC getnMapfvARB = null;
alias PFNglGetnMapivPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
PFNglGetnMapivPROC getnMapiv = null;
alias PFNglGetnMapivARBPROC = fn void(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
PFNglGetnMapivARBPROC getnMapivARB = null;
alias PFNglGetnMinmaxPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
PFNglGetnMinmaxPROC getnMinmax = null;
alias PFNglGetnMinmaxARBPROC = fn void(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
PFNglGetnMinmaxARBPROC getnMinmaxARB = null;
alias PFNglGetnPixelMapfvPROC = fn void(GLenum map, GLsizei bufSize, GLfloat* values);
PFNglGetnPixelMapfvPROC getnPixelMapfv = null;
alias PFNglGetnPixelMapfvARBPROC = fn void(GLenum map, GLsizei bufSize, GLfloat* values);
PFNglGetnPixelMapfvARBPROC getnPixelMapfvARB = null;
alias PFNglGetnPixelMapuivPROC = fn void(GLenum map, GLsizei bufSize, GLuint* values);
PFNglGetnPixelMapuivPROC getnPixelMapuiv = null;
alias PFNglGetnPixelMapuivARBPROC = fn void(GLenum map, GLsizei bufSize, GLuint* values);
PFNglGetnPixelMapuivARBPROC getnPixelMapuivARB = null;
alias PFNglGetnPixelMapusvPROC = fn void(GLenum map, GLsizei bufSize, GLushort* values);
PFNglGetnPixelMapusvPROC getnPixelMapusv = null;
alias PFNglGetnPixelMapusvARBPROC = fn void(GLenum map, GLsizei bufSize, GLushort* values);
PFNglGetnPixelMapusvARBPROC getnPixelMapusvARB = null;
alias PFNglGetnPolygonStipplePROC = fn void(GLsizei bufSize, GLubyte* pattern);
PFNglGetnPolygonStipplePROC getnPolygonStipple = null;
alias PFNglGetnPolygonStippleARBPROC = fn void(GLsizei bufSize, GLubyte* pattern);
PFNglGetnPolygonStippleARBPROC getnPolygonStippleARB = null;
alias PFNglGetnSeparableFilterPROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
PFNglGetnSeparableFilterPROC getnSeparableFilter = null;
alias PFNglGetnSeparableFilterARBPROC = fn void(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
PFNglGetnSeparableFilterARBPROC getnSeparableFilterARB = null;
alias PFNglGetnTexImagePROC = fn void(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
PFNglGetnTexImagePROC getnTexImage = null;
alias PFNglGetnTexImageARBPROC = fn void(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
PFNglGetnTexImageARBPROC getnTexImageARB = null;
alias PFNglGetnUniformdvPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
PFNglGetnUniformdvPROC getnUniformdv = null;
alias PFNglGetnUniformdvARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
PFNglGetnUniformdvARBPROC getnUniformdvARB = null;
alias PFNglGetnUniformfvPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
PFNglGetnUniformfvPROC getnUniformfv = null;
alias PFNglGetnUniformfvARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
PFNglGetnUniformfvARBPROC getnUniformfvARB = null;
alias PFNglGetnUniformfvEXTPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
PFNglGetnUniformfvEXTPROC getnUniformfvEXT = null;
alias PFNglGetnUniformfvKHRPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
PFNglGetnUniformfvKHRPROC getnUniformfvKHR = null;
alias PFNglGetnUniformi64vARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLint64* params);
PFNglGetnUniformi64vARBPROC getnUniformi64vARB = null;
alias PFNglGetnUniformivPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLint* params);
PFNglGetnUniformivPROC getnUniformiv = null;
alias PFNglGetnUniformivARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLint* params);
PFNglGetnUniformivARBPROC getnUniformivARB = null;
alias PFNglGetnUniformivEXTPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLint* params);
PFNglGetnUniformivEXTPROC getnUniformivEXT = null;
alias PFNglGetnUniformivKHRPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLint* params);
PFNglGetnUniformivKHRPROC getnUniformivKHR = null;
alias PFNglGetnUniformui64vARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLuint64* params);
PFNglGetnUniformui64vARBPROC getnUniformui64vARB = null;
alias PFNglGetnUniformuivPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
PFNglGetnUniformuivPROC getnUniformuiv = null;
alias PFNglGetnUniformuivARBPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
PFNglGetnUniformuivARBPROC getnUniformuivARB = null;
alias PFNglGetnUniformuivKHRPROC = fn void(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
PFNglGetnUniformuivKHRPROC getnUniformuivKHR = null;
alias PFNglGlobalAlphaFactorbSUNPROC = fn void(GLbyte factor);
PFNglGlobalAlphaFactorbSUNPROC globalAlphaFactorbSUN = null;
alias PFNglGlobalAlphaFactordSUNPROC = fn void(GLdouble factor);
PFNglGlobalAlphaFactordSUNPROC globalAlphaFactordSUN = null;
alias PFNglGlobalAlphaFactorfSUNPROC = fn void(GLfloat factor);
PFNglGlobalAlphaFactorfSUNPROC globalAlphaFactorfSUN = null;
alias PFNglGlobalAlphaFactoriSUNPROC = fn void(GLint factor);
PFNglGlobalAlphaFactoriSUNPROC globalAlphaFactoriSUN = null;
alias PFNglGlobalAlphaFactorsSUNPROC = fn void(GLshort factor);
PFNglGlobalAlphaFactorsSUNPROC globalAlphaFactorsSUN = null;
alias PFNglGlobalAlphaFactorubSUNPROC = fn void(GLubyte factor);
PFNglGlobalAlphaFactorubSUNPROC globalAlphaFactorubSUN = null;
alias PFNglGlobalAlphaFactoruiSUNPROC = fn void(GLuint factor);
PFNglGlobalAlphaFactoruiSUNPROC globalAlphaFactoruiSUN = null;
alias PFNglGlobalAlphaFactorusSUNPROC = fn void(GLushort factor);
PFNglGlobalAlphaFactorusSUNPROC globalAlphaFactorusSUN = null;
alias PFNglHintPROC = fn void(GLenum target, GLenum mode);
PFNglHintPROC hint = null;
alias PFNglHintPGIPROC = fn void(GLenum target, GLint mode);
PFNglHintPGIPROC hintPGI = null;
alias PFNglHistogramPROC = fn void(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
PFNglHistogramPROC histogram = null;
alias PFNglHistogramEXTPROC = fn void(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
PFNglHistogramEXTPROC histogramEXT = null;
alias PFNglIglooInterfaceSGIXPROC = fn void(GLenum pname, void* params);
PFNglIglooInterfaceSGIXPROC iglooInterfaceSGIX = null;
alias PFNglImageTransformParameterfHPPROC = fn void(GLenum target, GLenum pname, GLfloat param);
PFNglImageTransformParameterfHPPROC imageTransformParameterfHP = null;
alias PFNglImageTransformParameterfvHPPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglImageTransformParameterfvHPPROC imageTransformParameterfvHP = null;
alias PFNglImageTransformParameteriHPPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglImageTransformParameteriHPPROC imageTransformParameteriHP = null;
alias PFNglImageTransformParameterivHPPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglImageTransformParameterivHPPROC imageTransformParameterivHP = null;
alias PFNglImportMemoryFdEXTPROC = fn void(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
PFNglImportMemoryFdEXTPROC importMemoryFdEXT = null;
alias PFNglImportMemoryWin32HandleEXTPROC = fn void(GLuint memory, GLuint64 size, GLenum handleType, void* handle);
PFNglImportMemoryWin32HandleEXTPROC importMemoryWin32HandleEXT = null;
alias PFNglImportMemoryWin32NameEXTPROC = fn void(GLuint memory, GLuint64 size, GLenum handleType, void* name);
PFNglImportMemoryWin32NameEXTPROC importMemoryWin32NameEXT = null;
alias PFNglImportSemaphoreFdEXTPROC = fn void(GLuint semaphore, GLenum handleType, GLint fd);
PFNglImportSemaphoreFdEXTPROC importSemaphoreFdEXT = null;
alias PFNglImportSemaphoreWin32HandleEXTPROC = fn void(GLuint semaphore, GLenum handleType, void* handle);
PFNglImportSemaphoreWin32HandleEXTPROC importSemaphoreWin32HandleEXT = null;
alias PFNglImportSemaphoreWin32NameEXTPROC = fn void(GLuint semaphore, GLenum handleType, void* name);
PFNglImportSemaphoreWin32NameEXTPROC importSemaphoreWin32NameEXT = null;
alias PFNglImportSyncEXTPROC = fn GLsync(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
PFNglImportSyncEXTPROC importSyncEXT = null;
alias PFNglIndexFormatNVPROC = fn void(GLenum type, GLsizei stride);
PFNglIndexFormatNVPROC indexFormatNV = null;
alias PFNglIndexFuncEXTPROC = fn void(GLenum func, GLclampf ref);
PFNglIndexFuncEXTPROC indexFuncEXT = null;
alias PFNglIndexMaskPROC = fn void(GLuint mask);
PFNglIndexMaskPROC indexMask = null;
alias PFNglIndexMaterialEXTPROC = fn void(GLenum face, GLenum mode);
PFNglIndexMaterialEXTPROC indexMaterialEXT = null;
alias PFNglIndexPointerPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglIndexPointerPROC indexPointer = null;
alias PFNglIndexPointerEXTPROC = fn void(GLenum type, GLsizei stride, GLsizei count, void* pointer);
PFNglIndexPointerEXTPROC indexPointerEXT = null;
alias PFNglIndexPointerListIBMPROC = fn void(GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglIndexPointerListIBMPROC indexPointerListIBM = null;
alias PFNglIndexdPROC = fn void(GLdouble c);
PFNglIndexdPROC indexd = null;
alias PFNglIndexdvPROC = fn void(GLdouble* c);
PFNglIndexdvPROC indexdv = null;
alias PFNglIndexfPROC = fn void(GLfloat c);
PFNglIndexfPROC indexf = null;
alias PFNglIndexfvPROC = fn void(GLfloat* c);
PFNglIndexfvPROC indexfv = null;
alias PFNglIndexiPROC = fn void(GLint c);
PFNglIndexiPROC indexi = null;
alias PFNglIndexivPROC = fn void(GLint* c);
PFNglIndexivPROC indexiv = null;
alias PFNglIndexsPROC = fn void(GLshort c);
PFNglIndexsPROC indexs = null;
alias PFNglIndexsvPROC = fn void(GLshort* c);
PFNglIndexsvPROC indexsv = null;
alias PFNglIndexubPROC = fn void(GLubyte c);
PFNglIndexubPROC indexub = null;
alias PFNglIndexubvPROC = fn void(GLubyte* c);
PFNglIndexubvPROC indexubv = null;
alias PFNglIndexxOESPROC = fn void(GLfixed component);
PFNglIndexxOESPROC indexxOES = null;
alias PFNglIndexxvOESPROC = fn void(GLfixed* component);
PFNglIndexxvOESPROC indexxvOES = null;
alias PFNglInitNamesPROC = fn void();
PFNglInitNamesPROC initNames = null;
alias PFNglInsertComponentEXTPROC = fn void(GLuint res, GLuint src, GLuint num);
PFNglInsertComponentEXTPROC insertComponentEXT = null;
alias PFNglInsertEventMarkerEXTPROC = fn void(GLsizei length, GLchar* marker);
PFNglInsertEventMarkerEXTPROC insertEventMarkerEXT = null;
alias PFNglInstrumentsBufferSGIXPROC = fn void(GLsizei size, GLint* buffer);
PFNglInstrumentsBufferSGIXPROC instrumentsBufferSGIX = null;
alias PFNglInterleavedArraysPROC = fn void(GLenum format, GLsizei stride, void* pointer);
PFNglInterleavedArraysPROC interleavedArrays = null;
alias PFNglInterpolatePathsNVPROC = fn void(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
PFNglInterpolatePathsNVPROC interpolatePathsNV = null;
alias PFNglInvalidateBufferDataPROC = fn void(GLuint buffer);
PFNglInvalidateBufferDataPROC invalidateBufferData = null;
alias PFNglInvalidateBufferSubDataPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr length);
PFNglInvalidateBufferSubDataPROC invalidateBufferSubData = null;
alias PFNglInvalidateFramebufferPROC = fn void(GLenum target, GLsizei numAttachments, GLenum* attachments);
PFNglInvalidateFramebufferPROC invalidateFramebuffer = null;
alias PFNglInvalidateNamedFramebufferDataPROC = fn void(GLuint framebuffer, GLsizei numAttachments, GLenum* attachments);
PFNglInvalidateNamedFramebufferDataPROC invalidateNamedFramebufferData = null;
alias PFNglInvalidateNamedFramebufferSubDataPROC = fn void(GLuint framebuffer, GLsizei numAttachments, GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglInvalidateNamedFramebufferSubDataPROC invalidateNamedFramebufferSubData = null;
alias PFNglInvalidateSubFramebufferPROC = fn void(GLenum target, GLsizei numAttachments, GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
PFNglInvalidateSubFramebufferPROC invalidateSubFramebuffer = null;
alias PFNglInvalidateTexImagePROC = fn void(GLuint texture, GLint level);
PFNglInvalidateTexImagePROC invalidateTexImage = null;
alias PFNglInvalidateTexSubImagePROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
PFNglInvalidateTexSubImagePROC invalidateTexSubImage = null;
alias PFNglIsAsyncMarkerSGIXPROC = fn GLboolean(GLuint marker);
PFNglIsAsyncMarkerSGIXPROC isAsyncMarkerSGIX = null;
alias PFNglIsBufferPROC = fn GLboolean(GLuint buffer);
PFNglIsBufferPROC isBuffer = null;
alias PFNglIsBufferARBPROC = fn GLboolean(GLuint buffer);
PFNglIsBufferARBPROC isBufferARB = null;
alias PFNglIsBufferResidentNVPROC = fn GLboolean(GLenum target);
PFNglIsBufferResidentNVPROC isBufferResidentNV = null;
alias PFNglIsCommandListNVPROC = fn GLboolean(GLuint list);
PFNglIsCommandListNVPROC isCommandListNV = null;
alias PFNglIsEnabledPROC = fn GLboolean(GLenum cap);
PFNglIsEnabledPROC isEnabled = null;
alias PFNglIsEnabledIndexedEXTPROC = fn GLboolean(GLenum target, GLuint index);
PFNglIsEnabledIndexedEXTPROC isEnabledIndexedEXT = null;
alias PFNglIsEnablediPROC = fn GLboolean(GLenum target, GLuint index);
PFNglIsEnablediPROC isEnabledi = null;
alias PFNglIsEnablediEXTPROC = fn GLboolean(GLenum target, GLuint index);
PFNglIsEnablediEXTPROC isEnablediEXT = null;
alias PFNglIsEnablediNVPROC = fn GLboolean(GLenum target, GLuint index);
PFNglIsEnablediNVPROC isEnablediNV = null;
alias PFNglIsEnablediOESPROC = fn GLboolean(GLenum target, GLuint index);
PFNglIsEnablediOESPROC isEnablediOES = null;
alias PFNglIsFenceAPPLEPROC = fn GLboolean(GLuint fence);
PFNglIsFenceAPPLEPROC isFenceAPPLE = null;
alias PFNglIsFenceNVPROC = fn GLboolean(GLuint fence);
PFNglIsFenceNVPROC isFenceNV = null;
alias PFNglIsFramebufferPROC = fn GLboolean(GLuint framebuffer);
PFNglIsFramebufferPROC isFramebuffer = null;
alias PFNglIsFramebufferEXTPROC = fn GLboolean(GLuint framebuffer);
PFNglIsFramebufferEXTPROC isFramebufferEXT = null;
alias PFNglIsFramebufferOESPROC = fn GLboolean(GLuint framebuffer);
PFNglIsFramebufferOESPROC isFramebufferOES = null;
alias PFNglIsImageHandleResidentARBPROC = fn GLboolean(GLuint64 handle);
PFNglIsImageHandleResidentARBPROC isImageHandleResidentARB = null;
alias PFNglIsImageHandleResidentNVPROC = fn GLboolean(GLuint64 handle);
PFNglIsImageHandleResidentNVPROC isImageHandleResidentNV = null;
alias PFNglIsListPROC = fn GLboolean(GLuint list);
PFNglIsListPROC isList = null;
alias PFNglIsMemoryObjectEXTPROC = fn GLboolean(GLuint memoryObject);
PFNglIsMemoryObjectEXTPROC isMemoryObjectEXT = null;
alias PFNglIsNameAMDPROC = fn GLboolean(GLenum identifier, GLuint name);
PFNglIsNameAMDPROC isNameAMD = null;
alias PFNglIsNamedBufferResidentNVPROC = fn GLboolean(GLuint buffer);
PFNglIsNamedBufferResidentNVPROC isNamedBufferResidentNV = null;
alias PFNglIsNamedStringARBPROC = fn GLboolean(GLint namelen, GLchar* name);
PFNglIsNamedStringARBPROC isNamedStringARB = null;
alias PFNglIsObjectBufferATIPROC = fn GLboolean(GLuint buffer);
PFNglIsObjectBufferATIPROC isObjectBufferATI = null;
alias PFNglIsOcclusionQueryNVPROC = fn GLboolean(GLuint id);
PFNglIsOcclusionQueryNVPROC isOcclusionQueryNV = null;
alias PFNglIsPathNVPROC = fn GLboolean(GLuint path);
PFNglIsPathNVPROC isPathNV = null;
alias PFNglIsPointInFillPathNVPROC = fn GLboolean(GLuint path, GLuint mask, GLfloat x, GLfloat y);
PFNglIsPointInFillPathNVPROC isPointInFillPathNV = null;
alias PFNglIsPointInStrokePathNVPROC = fn GLboolean(GLuint path, GLfloat x, GLfloat y);
PFNglIsPointInStrokePathNVPROC isPointInStrokePathNV = null;
alias PFNglIsProgramPROC = fn GLboolean(GLuint program);
PFNglIsProgramPROC isProgram = null;
alias PFNglIsProgramARBPROC = fn GLboolean(GLuint program);
PFNglIsProgramARBPROC isProgramARB = null;
alias PFNglIsProgramNVPROC = fn GLboolean(GLuint id);
PFNglIsProgramNVPROC isProgramNV = null;
alias PFNglIsProgramPipelinePROC = fn GLboolean(GLuint pipeline);
PFNglIsProgramPipelinePROC isProgramPipeline = null;
alias PFNglIsProgramPipelineEXTPROC = fn GLboolean(GLuint pipeline);
PFNglIsProgramPipelineEXTPROC isProgramPipelineEXT = null;
alias PFNglIsQueryPROC = fn GLboolean(GLuint id);
PFNglIsQueryPROC isQuery = null;
alias PFNglIsQueryARBPROC = fn GLboolean(GLuint id);
PFNglIsQueryARBPROC isQueryARB = null;
alias PFNglIsQueryEXTPROC = fn GLboolean(GLuint id);
PFNglIsQueryEXTPROC isQueryEXT = null;
alias PFNglIsRenderbufferPROC = fn GLboolean(GLuint renderbuffer);
PFNglIsRenderbufferPROC isRenderbuffer = null;
alias PFNglIsRenderbufferEXTPROC = fn GLboolean(GLuint renderbuffer);
PFNglIsRenderbufferEXTPROC isRenderbufferEXT = null;
alias PFNglIsRenderbufferOESPROC = fn GLboolean(GLuint renderbuffer);
PFNglIsRenderbufferOESPROC isRenderbufferOES = null;
alias PFNglIsSemaphoreEXTPROC = fn GLboolean(GLuint semaphore);
PFNglIsSemaphoreEXTPROC isSemaphoreEXT = null;
alias PFNglIsSamplerPROC = fn GLboolean(GLuint sampler);
PFNglIsSamplerPROC isSampler = null;
alias PFNglIsShaderPROC = fn GLboolean(GLuint shader);
PFNglIsShaderPROC isShader = null;
alias PFNglIsStateNVPROC = fn GLboolean(GLuint state);
PFNglIsStateNVPROC isStateNV = null;
alias PFNglIsSyncPROC = fn GLboolean(GLsync sync);
PFNglIsSyncPROC isSync = null;
alias PFNglIsSyncAPPLEPROC = fn GLboolean(GLsync sync);
PFNglIsSyncAPPLEPROC isSyncAPPLE = null;
alias PFNglIsTexturePROC = fn GLboolean(GLuint texture);
PFNglIsTexturePROC isTexture = null;
alias PFNglIsTextureEXTPROC = fn GLboolean(GLuint texture);
PFNglIsTextureEXTPROC isTextureEXT = null;
alias PFNglIsTextureHandleResidentARBPROC = fn GLboolean(GLuint64 handle);
PFNglIsTextureHandleResidentARBPROC isTextureHandleResidentARB = null;
alias PFNglIsTextureHandleResidentNVPROC = fn GLboolean(GLuint64 handle);
PFNglIsTextureHandleResidentNVPROC isTextureHandleResidentNV = null;
alias PFNglIsTransformFeedbackPROC = fn GLboolean(GLuint id);
PFNglIsTransformFeedbackPROC isTransformFeedback = null;
alias PFNglIsTransformFeedbackNVPROC = fn GLboolean(GLuint id);
PFNglIsTransformFeedbackNVPROC isTransformFeedbackNV = null;
alias PFNglIsVariantEnabledEXTPROC = fn GLboolean(GLuint id, GLenum cap);
PFNglIsVariantEnabledEXTPROC isVariantEnabledEXT = null;
alias PFNglIsVertexArrayPROC = fn GLboolean(GLuint array);
PFNglIsVertexArrayPROC isVertexArray = null;
alias PFNglIsVertexArrayAPPLEPROC = fn GLboolean(GLuint array);
PFNglIsVertexArrayAPPLEPROC isVertexArrayAPPLE = null;
alias PFNglIsVertexArrayOESPROC = fn GLboolean(GLuint array);
PFNglIsVertexArrayOESPROC isVertexArrayOES = null;
alias PFNglIsVertexAttribEnabledAPPLEPROC = fn GLboolean(GLuint index, GLenum pname);
PFNglIsVertexAttribEnabledAPPLEPROC isVertexAttribEnabledAPPLE = null;
alias PFNglLGPUCopyImageSubDataNVXPROC = fn void(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
PFNglLGPUCopyImageSubDataNVXPROC lGPUCopyImageSubDataNVX = null;
alias PFNglLGPUInterlockNVXPROC = fn void();
PFNglLGPUInterlockNVXPROC lGPUInterlockNVX = null;
alias PFNglLGPUNamedBufferSubDataNVXPROC = fn void(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglLGPUNamedBufferSubDataNVXPROC lGPUNamedBufferSubDataNVX = null;
alias PFNglLabelObjectEXTPROC = fn void(GLenum type, GLuint object, GLsizei length, GLchar* label);
PFNglLabelObjectEXTPROC labelObjectEXT = null;
alias PFNglLightEnviSGIXPROC = fn void(GLenum pname, GLint param);
PFNglLightEnviSGIXPROC lightEnviSGIX = null;
alias PFNglLightModelfPROC = fn void(GLenum pname, GLfloat param);
PFNglLightModelfPROC lightModelf = null;
alias PFNglLightModelfvPROC = fn void(GLenum pname, GLfloat* params);
PFNglLightModelfvPROC lightModelfv = null;
alias PFNglLightModeliPROC = fn void(GLenum pname, GLint param);
PFNglLightModeliPROC lightModeli = null;
alias PFNglLightModelivPROC = fn void(GLenum pname, GLint* params);
PFNglLightModelivPROC lightModeliv = null;
alias PFNglLightModelxPROC = fn void(GLenum pname, GLfixed param);
PFNglLightModelxPROC lightModelx = null;
alias PFNglLightModelxOESPROC = fn void(GLenum pname, GLfixed param);
PFNglLightModelxOESPROC lightModelxOES = null;
alias PFNglLightModelxvPROC = fn void(GLenum pname, GLfixed* param);
PFNglLightModelxvPROC lightModelxv = null;
alias PFNglLightModelxvOESPROC = fn void(GLenum pname, GLfixed* param);
PFNglLightModelxvOESPROC lightModelxvOES = null;
alias PFNglLightfPROC = fn void(GLenum light, GLenum pname, GLfloat param);
PFNglLightfPROC lightf = null;
alias PFNglLightfvPROC = fn void(GLenum light, GLenum pname, GLfloat* params);
PFNglLightfvPROC lightfv = null;
alias PFNglLightiPROC = fn void(GLenum light, GLenum pname, GLint param);
PFNglLightiPROC lighti = null;
alias PFNglLightivPROC = fn void(GLenum light, GLenum pname, GLint* params);
PFNglLightivPROC lightiv = null;
alias PFNglLightxPROC = fn void(GLenum light, GLenum pname, GLfixed param);
PFNglLightxPROC lightx = null;
alias PFNglLightxOESPROC = fn void(GLenum light, GLenum pname, GLfixed param);
PFNglLightxOESPROC lightxOES = null;
alias PFNglLightxvPROC = fn void(GLenum light, GLenum pname, GLfixed* params);
PFNglLightxvPROC lightxv = null;
alias PFNglLightxvOESPROC = fn void(GLenum light, GLenum pname, GLfixed* params);
PFNglLightxvOESPROC lightxvOES = null;
alias PFNglLineStipplePROC = fn void(GLint factor, GLushort pattern);
PFNglLineStipplePROC lineStipple = null;
alias PFNglLineWidthPROC = fn void(GLfloat width);
PFNglLineWidthPROC lineWidth = null;
alias PFNglLineWidthxPROC = fn void(GLfixed width);
PFNglLineWidthxPROC lineWidthx = null;
alias PFNglLineWidthxOESPROC = fn void(GLfixed width);
PFNglLineWidthxOESPROC lineWidthxOES = null;
alias PFNglLinkProgramPROC = fn void(GLuint program);
PFNglLinkProgramPROC linkProgram = null;
alias PFNglLinkProgramARBPROC = fn void(GLhandleARB programObj);
PFNglLinkProgramARBPROC linkProgramARB = null;
alias PFNglListBasePROC = fn void(GLuint base);
PFNglListBasePROC listBase = null;
alias PFNglListDrawCommandsStatesClientNVPROC = fn void(GLuint list, GLuint segment, void** indirects, GLsizei* sizes, GLuint* states, GLuint* fbos, GLuint count);
PFNglListDrawCommandsStatesClientNVPROC listDrawCommandsStatesClientNV = null;
alias PFNglListParameterfSGIXPROC = fn void(GLuint list, GLenum pname, GLfloat param);
PFNglListParameterfSGIXPROC listParameterfSGIX = null;
alias PFNglListParameterfvSGIXPROC = fn void(GLuint list, GLenum pname, GLfloat* params);
PFNglListParameterfvSGIXPROC listParameterfvSGIX = null;
alias PFNglListParameteriSGIXPROC = fn void(GLuint list, GLenum pname, GLint param);
PFNglListParameteriSGIXPROC listParameteriSGIX = null;
alias PFNglListParameterivSGIXPROC = fn void(GLuint list, GLenum pname, GLint* params);
PFNglListParameterivSGIXPROC listParameterivSGIX = null;
alias PFNglLoadIdentityPROC = fn void();
PFNglLoadIdentityPROC loadIdentity = null;
alias PFNglLoadIdentityDeformationMapSGIXPROC = fn void(GLbitfield mask);
PFNglLoadIdentityDeformationMapSGIXPROC loadIdentityDeformationMapSGIX = null;
alias PFNglLoadMatrixdPROC = fn void(GLdouble* m);
PFNglLoadMatrixdPROC loadMatrixd = null;
alias PFNglLoadMatrixfPROC = fn void(GLfloat* m);
PFNglLoadMatrixfPROC loadMatrixf = null;
alias PFNglLoadMatrixxPROC = fn void(GLfixed* m);
PFNglLoadMatrixxPROC loadMatrixx = null;
alias PFNglLoadMatrixxOESPROC = fn void(GLfixed* m);
PFNglLoadMatrixxOESPROC loadMatrixxOES = null;
alias PFNglLoadNamePROC = fn void(GLuint name);
PFNglLoadNamePROC loadName = null;
alias PFNglLoadPaletteFromModelViewMatrixOESPROC = fn void();
PFNglLoadPaletteFromModelViewMatrixOESPROC loadPaletteFromModelViewMatrixOES = null;
alias PFNglLoadProgramNVPROC = fn void(GLenum target, GLuint id, GLsizei len, GLubyte* program);
PFNglLoadProgramNVPROC loadProgramNV = null;
alias PFNglLoadTransposeMatrixdPROC = fn void(GLdouble* m);
PFNglLoadTransposeMatrixdPROC loadTransposeMatrixd = null;
alias PFNglLoadTransposeMatrixdARBPROC = fn void(GLdouble* m);
PFNglLoadTransposeMatrixdARBPROC loadTransposeMatrixdARB = null;
alias PFNglLoadTransposeMatrixfPROC = fn void(GLfloat* m);
PFNglLoadTransposeMatrixfPROC loadTransposeMatrixf = null;
alias PFNglLoadTransposeMatrixfARBPROC = fn void(GLfloat* m);
PFNglLoadTransposeMatrixfARBPROC loadTransposeMatrixfARB = null;
alias PFNglLoadTransposeMatrixxOESPROC = fn void(GLfixed* m);
PFNglLoadTransposeMatrixxOESPROC loadTransposeMatrixxOES = null;
alias PFNglLockArraysEXTPROC = fn void(GLint first, GLsizei count);
PFNglLockArraysEXTPROC lockArraysEXT = null;
alias PFNglLogicOpPROC = fn void(GLenum opcode);
PFNglLogicOpPROC logicOp = null;
alias PFNglMakeBufferNonResidentNVPROC = fn void(GLenum target);
PFNglMakeBufferNonResidentNVPROC makeBufferNonResidentNV = null;
alias PFNglMakeBufferResidentNVPROC = fn void(GLenum target, GLenum access);
PFNglMakeBufferResidentNVPROC makeBufferResidentNV = null;
alias PFNglMakeImageHandleNonResidentARBPROC = fn void(GLuint64 handle);
PFNglMakeImageHandleNonResidentARBPROC makeImageHandleNonResidentARB = null;
alias PFNglMakeImageHandleNonResidentNVPROC = fn void(GLuint64 handle);
PFNglMakeImageHandleNonResidentNVPROC makeImageHandleNonResidentNV = null;
alias PFNglMakeImageHandleResidentARBPROC = fn void(GLuint64 handle, GLenum access);
PFNglMakeImageHandleResidentARBPROC makeImageHandleResidentARB = null;
alias PFNglMakeImageHandleResidentNVPROC = fn void(GLuint64 handle, GLenum access);
PFNglMakeImageHandleResidentNVPROC makeImageHandleResidentNV = null;
alias PFNglMakeNamedBufferNonResidentNVPROC = fn void(GLuint buffer);
PFNglMakeNamedBufferNonResidentNVPROC makeNamedBufferNonResidentNV = null;
alias PFNglMakeNamedBufferResidentNVPROC = fn void(GLuint buffer, GLenum access);
PFNglMakeNamedBufferResidentNVPROC makeNamedBufferResidentNV = null;
alias PFNglMakeTextureHandleNonResidentARBPROC = fn void(GLuint64 handle);
PFNglMakeTextureHandleNonResidentARBPROC makeTextureHandleNonResidentARB = null;
alias PFNglMakeTextureHandleNonResidentNVPROC = fn void(GLuint64 handle);
PFNglMakeTextureHandleNonResidentNVPROC makeTextureHandleNonResidentNV = null;
alias PFNglMakeTextureHandleResidentARBPROC = fn void(GLuint64 handle);
PFNglMakeTextureHandleResidentARBPROC makeTextureHandleResidentARB = null;
alias PFNglMakeTextureHandleResidentNVPROC = fn void(GLuint64 handle);
PFNglMakeTextureHandleResidentNVPROC makeTextureHandleResidentNV = null;
alias PFNglMap1dPROC = fn void(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
PFNglMap1dPROC map1d = null;
alias PFNglMap1fPROC = fn void(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
PFNglMap1fPROC map1f = null;
alias PFNglMap1xOESPROC = fn void(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
PFNglMap1xOESPROC map1xOES = null;
alias PFNglMap2dPROC = fn void(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
PFNglMap2dPROC map2d = null;
alias PFNglMap2fPROC = fn void(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
PFNglMap2fPROC map2f = null;
alias PFNglMap2xOESPROC = fn void(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
PFNglMap2xOESPROC map2xOES = null;
alias PFNglMapBufferPROC = fn void(GLenum target, GLenum access);
PFNglMapBufferPROC mapBuffer = null;
alias PFNglMapBufferARBPROC = fn void(GLenum target, GLenum access);
PFNglMapBufferARBPROC mapBufferARB = null;
alias PFNglMapBufferOESPROC = fn void(GLenum target, GLenum access);
PFNglMapBufferOESPROC mapBufferOES = null;
alias PFNglMapBufferRangePROC = fn void(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
PFNglMapBufferRangePROC mapBufferRange = null;
alias PFNglMapBufferRangeEXTPROC = fn void(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
PFNglMapBufferRangeEXTPROC mapBufferRangeEXT = null;
alias PFNglMapControlPointsNVPROC = fn void(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, void* points);
PFNglMapControlPointsNVPROC mapControlPointsNV = null;
alias PFNglMapGrid1dPROC = fn void(GLint un, GLdouble u1, GLdouble u2);
PFNglMapGrid1dPROC mapGrid1d = null;
alias PFNglMapGrid1fPROC = fn void(GLint un, GLfloat u1, GLfloat u2);
PFNglMapGrid1fPROC mapGrid1f = null;
alias PFNglMapGrid1xOESPROC = fn void(GLint n, GLfixed u1, GLfixed u2);
PFNglMapGrid1xOESPROC mapGrid1xOES = null;
alias PFNglMapGrid2dPROC = fn void(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
PFNglMapGrid2dPROC mapGrid2d = null;
alias PFNglMapGrid2fPROC = fn void(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
PFNglMapGrid2fPROC mapGrid2f = null;
alias PFNglMapGrid2xOESPROC = fn void(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
PFNglMapGrid2xOESPROC mapGrid2xOES = null;
alias PFNglMapNamedBufferPROC = fn void(GLuint buffer, GLenum access);
PFNglMapNamedBufferPROC mapNamedBuffer = null;
alias PFNglMapNamedBufferEXTPROC = fn void(GLuint buffer, GLenum access);
PFNglMapNamedBufferEXTPROC mapNamedBufferEXT = null;
alias PFNglMapNamedBufferRangePROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
PFNglMapNamedBufferRangePROC mapNamedBufferRange = null;
alias PFNglMapNamedBufferRangeEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
PFNglMapNamedBufferRangeEXTPROC mapNamedBufferRangeEXT = null;
alias PFNglMapObjectBufferATIPROC = fn void(GLuint buffer);
PFNglMapObjectBufferATIPROC mapObjectBufferATI = null;
alias PFNglMapParameterfvNVPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglMapParameterfvNVPROC mapParameterfvNV = null;
alias PFNglMapParameterivNVPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglMapParameterivNVPROC mapParameterivNV = null;
alias PFNglMapTexture2DINTELPROC = fn void(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout);
PFNglMapTexture2DINTELPROC mapTexture2DINTEL = null;
alias PFNglMapVertexAttrib1dAPPLEPROC = fn void(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
PFNglMapVertexAttrib1dAPPLEPROC mapVertexAttrib1dAPPLE = null;
alias PFNglMapVertexAttrib1fAPPLEPROC = fn void(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
PFNglMapVertexAttrib1fAPPLEPROC mapVertexAttrib1fAPPLE = null;
alias PFNglMapVertexAttrib2dAPPLEPROC = fn void(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
PFNglMapVertexAttrib2dAPPLEPROC mapVertexAttrib2dAPPLE = null;
alias PFNglMapVertexAttrib2fAPPLEPROC = fn void(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
PFNglMapVertexAttrib2fAPPLEPROC mapVertexAttrib2fAPPLE = null;
alias PFNglMaterialfPROC = fn void(GLenum face, GLenum pname, GLfloat param);
PFNglMaterialfPROC materialf = null;
alias PFNglMaterialfvPROC = fn void(GLenum face, GLenum pname, GLfloat* params);
PFNglMaterialfvPROC materialfv = null;
alias PFNglMaterialiPROC = fn void(GLenum face, GLenum pname, GLint param);
PFNglMaterialiPROC materiali = null;
alias PFNglMaterialivPROC = fn void(GLenum face, GLenum pname, GLint* params);
PFNglMaterialivPROC materialiv = null;
alias PFNglMaterialxPROC = fn void(GLenum face, GLenum pname, GLfixed param);
PFNglMaterialxPROC materialx = null;
alias PFNglMaterialxOESPROC = fn void(GLenum face, GLenum pname, GLfixed param);
PFNglMaterialxOESPROC materialxOES = null;
alias PFNglMaterialxvPROC = fn void(GLenum face, GLenum pname, GLfixed* param);
PFNglMaterialxvPROC materialxv = null;
alias PFNglMaterialxvOESPROC = fn void(GLenum face, GLenum pname, GLfixed* param);
PFNglMaterialxvOESPROC materialxvOES = null;
alias PFNglMatrixFrustumEXTPROC = fn void(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
PFNglMatrixFrustumEXTPROC matrixFrustumEXT = null;
alias PFNglMatrixIndexPointerARBPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglMatrixIndexPointerARBPROC matrixIndexPointerARB = null;
alias PFNglMatrixIndexPointerOESPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglMatrixIndexPointerOESPROC matrixIndexPointerOES = null;
alias PFNglMatrixIndexubvARBPROC = fn void(GLint size, GLubyte* indices);
PFNglMatrixIndexubvARBPROC matrixIndexubvARB = null;
alias PFNglMatrixIndexuivARBPROC = fn void(GLint size, GLuint* indices);
PFNglMatrixIndexuivARBPROC matrixIndexuivARB = null;
alias PFNglMatrixIndexusvARBPROC = fn void(GLint size, GLushort* indices);
PFNglMatrixIndexusvARBPROC matrixIndexusvARB = null;
alias PFNglMatrixLoad3x2fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixLoad3x2fNVPROC matrixLoad3x2fNV = null;
alias PFNglMatrixLoad3x3fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixLoad3x3fNVPROC matrixLoad3x3fNV = null;
alias PFNglMatrixLoadIdentityEXTPROC = fn void(GLenum mode);
PFNglMatrixLoadIdentityEXTPROC matrixLoadIdentityEXT = null;
alias PFNglMatrixLoadTranspose3x3fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixLoadTranspose3x3fNVPROC matrixLoadTranspose3x3fNV = null;
alias PFNglMatrixLoadTransposedEXTPROC = fn void(GLenum mode, GLdouble* m);
PFNglMatrixLoadTransposedEXTPROC matrixLoadTransposedEXT = null;
alias PFNglMatrixLoadTransposefEXTPROC = fn void(GLenum mode, GLfloat* m);
PFNglMatrixLoadTransposefEXTPROC matrixLoadTransposefEXT = null;
alias PFNglMatrixLoaddEXTPROC = fn void(GLenum mode, GLdouble* m);
PFNglMatrixLoaddEXTPROC matrixLoaddEXT = null;
alias PFNglMatrixLoadfEXTPROC = fn void(GLenum mode, GLfloat* m);
PFNglMatrixLoadfEXTPROC matrixLoadfEXT = null;
alias PFNglMatrixModePROC = fn void(GLenum mode);
PFNglMatrixModePROC matrixMode = null;
alias PFNglMatrixMult3x2fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixMult3x2fNVPROC matrixMult3x2fNV = null;
alias PFNglMatrixMult3x3fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixMult3x3fNVPROC matrixMult3x3fNV = null;
alias PFNglMatrixMultTranspose3x3fNVPROC = fn void(GLenum matrixMode, GLfloat* m);
PFNglMatrixMultTranspose3x3fNVPROC matrixMultTranspose3x3fNV = null;
alias PFNglMatrixMultTransposedEXTPROC = fn void(GLenum mode, GLdouble* m);
PFNglMatrixMultTransposedEXTPROC matrixMultTransposedEXT = null;
alias PFNglMatrixMultTransposefEXTPROC = fn void(GLenum mode, GLfloat* m);
PFNglMatrixMultTransposefEXTPROC matrixMultTransposefEXT = null;
alias PFNglMatrixMultdEXTPROC = fn void(GLenum mode, GLdouble* m);
PFNglMatrixMultdEXTPROC matrixMultdEXT = null;
alias PFNglMatrixMultfEXTPROC = fn void(GLenum mode, GLfloat* m);
PFNglMatrixMultfEXTPROC matrixMultfEXT = null;
alias PFNglMatrixOrthoEXTPROC = fn void(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
PFNglMatrixOrthoEXTPROC matrixOrthoEXT = null;
alias PFNglMatrixPopEXTPROC = fn void(GLenum mode);
PFNglMatrixPopEXTPROC matrixPopEXT = null;
alias PFNglMatrixPushEXTPROC = fn void(GLenum mode);
PFNglMatrixPushEXTPROC matrixPushEXT = null;
alias PFNglMatrixRotatedEXTPROC = fn void(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
PFNglMatrixRotatedEXTPROC matrixRotatedEXT = null;
alias PFNglMatrixRotatefEXTPROC = fn void(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
PFNglMatrixRotatefEXTPROC matrixRotatefEXT = null;
alias PFNglMatrixScaledEXTPROC = fn void(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
PFNglMatrixScaledEXTPROC matrixScaledEXT = null;
alias PFNglMatrixScalefEXTPROC = fn void(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
PFNglMatrixScalefEXTPROC matrixScalefEXT = null;
alias PFNglMatrixTranslatedEXTPROC = fn void(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
PFNglMatrixTranslatedEXTPROC matrixTranslatedEXT = null;
alias PFNglMatrixTranslatefEXTPROC = fn void(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
PFNglMatrixTranslatefEXTPROC matrixTranslatefEXT = null;
alias PFNglMaxActiveShaderCoresARMPROC = fn void(GLuint count);
PFNglMaxActiveShaderCoresARMPROC maxActiveShaderCoresARM = null;
alias PFNglMaxShaderCompilerThreadsKHRPROC = fn void(GLuint count);
PFNglMaxShaderCompilerThreadsKHRPROC maxShaderCompilerThreadsKHR = null;
alias PFNglMaxShaderCompilerThreadsARBPROC = fn void(GLuint count);
PFNglMaxShaderCompilerThreadsARBPROC maxShaderCompilerThreadsARB = null;
alias PFNglMemoryBarrierPROC = fn void(GLbitfield barriers);
PFNglMemoryBarrierPROC memoryBarrier = null;
alias PFNglMemoryBarrierByRegionPROC = fn void(GLbitfield barriers);
PFNglMemoryBarrierByRegionPROC memoryBarrierByRegion = null;
alias PFNglMemoryBarrierEXTPROC = fn void(GLbitfield barriers);
PFNglMemoryBarrierEXTPROC memoryBarrierEXT = null;
alias PFNglMemoryObjectParameterivEXTPROC = fn void(GLuint memoryObject, GLenum pname, GLint* params);
PFNglMemoryObjectParameterivEXTPROC memoryObjectParameterivEXT = null;
alias PFNglMinSampleShadingPROC = fn void(GLfloat value);
PFNglMinSampleShadingPROC minSampleShading = null;
alias PFNglMinSampleShadingARBPROC = fn void(GLfloat value);
PFNglMinSampleShadingARBPROC minSampleShadingARB = null;
alias PFNglMinSampleShadingOESPROC = fn void(GLfloat value);
PFNglMinSampleShadingOESPROC minSampleShadingOES = null;
alias PFNglMinmaxPROC = fn void(GLenum target, GLenum internalformat, GLboolean sink);
PFNglMinmaxPROC minmax = null;
alias PFNglMinmaxEXTPROC = fn void(GLenum target, GLenum internalformat, GLboolean sink);
PFNglMinmaxEXTPROC minmaxEXT = null;
alias PFNglMultMatrixdPROC = fn void(GLdouble* m);
PFNglMultMatrixdPROC multMatrixd = null;
alias PFNglMultMatrixfPROC = fn void(GLfloat* m);
PFNglMultMatrixfPROC multMatrixf = null;
alias PFNglMultMatrixxPROC = fn void(GLfixed* m);
PFNglMultMatrixxPROC multMatrixx = null;
alias PFNglMultMatrixxOESPROC = fn void(GLfixed* m);
PFNglMultMatrixxOESPROC multMatrixxOES = null;
alias PFNglMultTransposeMatrixdPROC = fn void(GLdouble* m);
PFNglMultTransposeMatrixdPROC multTransposeMatrixd = null;
alias PFNglMultTransposeMatrixdARBPROC = fn void(GLdouble* m);
PFNglMultTransposeMatrixdARBPROC multTransposeMatrixdARB = null;
alias PFNglMultTransposeMatrixfPROC = fn void(GLfloat* m);
PFNglMultTransposeMatrixfPROC multTransposeMatrixf = null;
alias PFNglMultTransposeMatrixfARBPROC = fn void(GLfloat* m);
PFNglMultTransposeMatrixfARBPROC multTransposeMatrixfARB = null;
alias PFNglMultTransposeMatrixxOESPROC = fn void(GLfixed* m);
PFNglMultTransposeMatrixxOESPROC multTransposeMatrixxOES = null;
alias PFNglMultiDrawArraysPROC = fn void(GLenum mode, GLint* first, GLsizei* count, GLsizei drawcount);
PFNglMultiDrawArraysPROC multiDrawArrays = null;
alias PFNglMultiDrawArraysEXTPROC = fn void(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
PFNglMultiDrawArraysEXTPROC multiDrawArraysEXT = null;
alias PFNglMultiDrawArraysIndirectPROC = fn void(GLenum mode, void* indirect, GLsizei drawcount, GLsizei stride);
PFNglMultiDrawArraysIndirectPROC multiDrawArraysIndirect = null;
alias PFNglMultiDrawArraysIndirectAMDPROC = fn void(GLenum mode, void* indirect, GLsizei primcount, GLsizei stride);
PFNglMultiDrawArraysIndirectAMDPROC multiDrawArraysIndirectAMD = null;
alias PFNglMultiDrawArraysIndirectBindlessCountNVPROC = fn void(GLenum mode, void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
PFNglMultiDrawArraysIndirectBindlessCountNVPROC multiDrawArraysIndirectBindlessCountNV = null;
alias PFNglMultiDrawArraysIndirectBindlessNVPROC = fn void(GLenum mode, void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
PFNglMultiDrawArraysIndirectBindlessNVPROC multiDrawArraysIndirectBindlessNV = null;
alias PFNglMultiDrawArraysIndirectCountPROC = fn void(GLenum mode, void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
PFNglMultiDrawArraysIndirectCountPROC multiDrawArraysIndirectCount = null;
alias PFNglMultiDrawArraysIndirectCountARBPROC = fn void(GLenum mode, void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
PFNglMultiDrawArraysIndirectCountARBPROC multiDrawArraysIndirectCountARB = null;
alias PFNglMultiDrawArraysIndirectEXTPROC = fn void(GLenum mode, void* indirect, GLsizei drawcount, GLsizei stride);
PFNglMultiDrawArraysIndirectEXTPROC multiDrawArraysIndirectEXT = null;
alias PFNglMultiDrawElementArrayAPPLEPROC = fn void(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
PFNglMultiDrawElementArrayAPPLEPROC multiDrawElementArrayAPPLE = null;
alias PFNglMultiDrawElementsPROC = fn void(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei drawcount);
PFNglMultiDrawElementsPROC multiDrawElements = null;
alias PFNglMultiDrawElementsBaseVertexPROC = fn void(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei drawcount, GLint* basevertex);
PFNglMultiDrawElementsBaseVertexPROC multiDrawElementsBaseVertex = null;
alias PFNglMultiDrawElementsBaseVertexEXTPROC = fn void(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei drawcount, GLint* basevertex);
PFNglMultiDrawElementsBaseVertexEXTPROC multiDrawElementsBaseVertexEXT = null;
alias PFNglMultiDrawElementsEXTPROC = fn void(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei primcount);
PFNglMultiDrawElementsEXTPROC multiDrawElementsEXT = null;
alias PFNglMultiDrawElementsIndirectPROC = fn void(GLenum mode, GLenum type, void* indirect, GLsizei drawcount, GLsizei stride);
PFNglMultiDrawElementsIndirectPROC multiDrawElementsIndirect = null;
alias PFNglMultiDrawElementsIndirectAMDPROC = fn void(GLenum mode, GLenum type, void* indirect, GLsizei primcount, GLsizei stride);
PFNglMultiDrawElementsIndirectAMDPROC multiDrawElementsIndirectAMD = null;
alias PFNglMultiDrawElementsIndirectBindlessCountNVPROC = fn void(GLenum mode, GLenum type, void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
PFNglMultiDrawElementsIndirectBindlessCountNVPROC multiDrawElementsIndirectBindlessCountNV = null;
alias PFNglMultiDrawElementsIndirectBindlessNVPROC = fn void(GLenum mode, GLenum type, void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
PFNglMultiDrawElementsIndirectBindlessNVPROC multiDrawElementsIndirectBindlessNV = null;
alias PFNglMultiDrawElementsIndirectCountPROC = fn void(GLenum mode, GLenum type, void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
PFNglMultiDrawElementsIndirectCountPROC multiDrawElementsIndirectCount = null;
alias PFNglMultiDrawElementsIndirectCountARBPROC = fn void(GLenum mode, GLenum type, void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
PFNglMultiDrawElementsIndirectCountARBPROC multiDrawElementsIndirectCountARB = null;
alias PFNglMultiDrawElementsIndirectEXTPROC = fn void(GLenum mode, GLenum type, void* indirect, GLsizei drawcount, GLsizei stride);
PFNglMultiDrawElementsIndirectEXTPROC multiDrawElementsIndirectEXT = null;
alias PFNglMultiDrawMeshTasksIndirectNVPROC = fn void(GLintptr indirect, GLsizei drawcount, GLsizei stride);
PFNglMultiDrawMeshTasksIndirectNVPROC multiDrawMeshTasksIndirectNV = null;
alias PFNglMultiDrawMeshTasksIndirectCountNVPROC = fn void(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
PFNglMultiDrawMeshTasksIndirectCountNVPROC multiDrawMeshTasksIndirectCountNV = null;
alias PFNglMultiDrawRangeElementArrayAPPLEPROC = fn void(GLenum mode, GLuint start, GLuint end, GLint* first, GLsizei* count, GLsizei primcount);
PFNglMultiDrawRangeElementArrayAPPLEPROC multiDrawRangeElementArrayAPPLE = null;
alias PFNglMultiModeDrawArraysIBMPROC = fn void(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride);
PFNglMultiModeDrawArraysIBMPROC multiModeDrawArraysIBM = null;
alias PFNglMultiModeDrawElementsIBMPROC = fn void(GLenum* mode, GLsizei* count, GLenum type, void** indices, GLsizei primcount, GLint modestride);
PFNglMultiModeDrawElementsIBMPROC multiModeDrawElementsIBM = null;
alias PFNglMultiTexBufferEXTPROC = fn void(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
PFNglMultiTexBufferEXTPROC multiTexBufferEXT = null;
alias PFNglMultiTexCoord1bOESPROC = fn void(GLenum texture, GLbyte s);
PFNglMultiTexCoord1bOESPROC multiTexCoord1bOES = null;
alias PFNglMultiTexCoord1bvOESPROC = fn void(GLenum texture, GLbyte* coords);
PFNglMultiTexCoord1bvOESPROC multiTexCoord1bvOES = null;
alias PFNglMultiTexCoord1dPROC = fn void(GLenum target, GLdouble s);
PFNglMultiTexCoord1dPROC multiTexCoord1d = null;
alias PFNglMultiTexCoord1dARBPROC = fn void(GLenum target, GLdouble s);
PFNglMultiTexCoord1dARBPROC multiTexCoord1dARB = null;
alias PFNglMultiTexCoord1dvPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord1dvPROC multiTexCoord1dv = null;
alias PFNglMultiTexCoord1dvARBPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord1dvARBPROC multiTexCoord1dvARB = null;
alias PFNglMultiTexCoord1fPROC = fn void(GLenum target, GLfloat s);
PFNglMultiTexCoord1fPROC multiTexCoord1f = null;
alias PFNglMultiTexCoord1fARBPROC = fn void(GLenum target, GLfloat s);
PFNglMultiTexCoord1fARBPROC multiTexCoord1fARB = null;
alias PFNglMultiTexCoord1fvPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord1fvPROC multiTexCoord1fv = null;
alias PFNglMultiTexCoord1fvARBPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord1fvARBPROC multiTexCoord1fvARB = null;
alias PFNglMultiTexCoord1hNVPROC = fn void(GLenum target, GLhalfNV s);
PFNglMultiTexCoord1hNVPROC multiTexCoord1hNV = null;
alias PFNglMultiTexCoord1hvNVPROC = fn void(GLenum target, GLhalfNV* v);
PFNglMultiTexCoord1hvNVPROC multiTexCoord1hvNV = null;
alias PFNglMultiTexCoord1iPROC = fn void(GLenum target, GLint s);
PFNglMultiTexCoord1iPROC multiTexCoord1i = null;
alias PFNglMultiTexCoord1iARBPROC = fn void(GLenum target, GLint s);
PFNglMultiTexCoord1iARBPROC multiTexCoord1iARB = null;
alias PFNglMultiTexCoord1ivPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord1ivPROC multiTexCoord1iv = null;
alias PFNglMultiTexCoord1ivARBPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord1ivARBPROC multiTexCoord1ivARB = null;
alias PFNglMultiTexCoord1sPROC = fn void(GLenum target, GLshort s);
PFNglMultiTexCoord1sPROC multiTexCoord1s = null;
alias PFNglMultiTexCoord1sARBPROC = fn void(GLenum target, GLshort s);
PFNglMultiTexCoord1sARBPROC multiTexCoord1sARB = null;
alias PFNglMultiTexCoord1svPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord1svPROC multiTexCoord1sv = null;
alias PFNglMultiTexCoord1svARBPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord1svARBPROC multiTexCoord1svARB = null;
alias PFNglMultiTexCoord1xOESPROC = fn void(GLenum texture, GLfixed s);
PFNglMultiTexCoord1xOESPROC multiTexCoord1xOES = null;
alias PFNglMultiTexCoord1xvOESPROC = fn void(GLenum texture, GLfixed* coords);
PFNglMultiTexCoord1xvOESPROC multiTexCoord1xvOES = null;
alias PFNglMultiTexCoord2bOESPROC = fn void(GLenum texture, GLbyte s, GLbyte t);
PFNglMultiTexCoord2bOESPROC multiTexCoord2bOES = null;
alias PFNglMultiTexCoord2bvOESPROC = fn void(GLenum texture, GLbyte* coords);
PFNglMultiTexCoord2bvOESPROC multiTexCoord2bvOES = null;
alias PFNglMultiTexCoord2dPROC = fn void(GLenum target, GLdouble s, GLdouble t);
PFNglMultiTexCoord2dPROC multiTexCoord2d = null;
alias PFNglMultiTexCoord2dARBPROC = fn void(GLenum target, GLdouble s, GLdouble t);
PFNglMultiTexCoord2dARBPROC multiTexCoord2dARB = null;
alias PFNglMultiTexCoord2dvPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord2dvPROC multiTexCoord2dv = null;
alias PFNglMultiTexCoord2dvARBPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord2dvARBPROC multiTexCoord2dvARB = null;
alias PFNglMultiTexCoord2fPROC = fn void(GLenum target, GLfloat s, GLfloat t);
PFNglMultiTexCoord2fPROC multiTexCoord2f = null;
alias PFNglMultiTexCoord2fARBPROC = fn void(GLenum target, GLfloat s, GLfloat t);
PFNglMultiTexCoord2fARBPROC multiTexCoord2fARB = null;
alias PFNglMultiTexCoord2fvPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord2fvPROC multiTexCoord2fv = null;
alias PFNglMultiTexCoord2fvARBPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord2fvARBPROC multiTexCoord2fvARB = null;
alias PFNglMultiTexCoord2hNVPROC = fn void(GLenum target, GLhalfNV s, GLhalfNV t);
PFNglMultiTexCoord2hNVPROC multiTexCoord2hNV = null;
alias PFNglMultiTexCoord2hvNVPROC = fn void(GLenum target, GLhalfNV* v);
PFNglMultiTexCoord2hvNVPROC multiTexCoord2hvNV = null;
alias PFNglMultiTexCoord2iPROC = fn void(GLenum target, GLint s, GLint t);
PFNglMultiTexCoord2iPROC multiTexCoord2i = null;
alias PFNglMultiTexCoord2iARBPROC = fn void(GLenum target, GLint s, GLint t);
PFNglMultiTexCoord2iARBPROC multiTexCoord2iARB = null;
alias PFNglMultiTexCoord2ivPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord2ivPROC multiTexCoord2iv = null;
alias PFNglMultiTexCoord2ivARBPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord2ivARBPROC multiTexCoord2ivARB = null;
alias PFNglMultiTexCoord2sPROC = fn void(GLenum target, GLshort s, GLshort t);
PFNglMultiTexCoord2sPROC multiTexCoord2s = null;
alias PFNglMultiTexCoord2sARBPROC = fn void(GLenum target, GLshort s, GLshort t);
PFNglMultiTexCoord2sARBPROC multiTexCoord2sARB = null;
alias PFNglMultiTexCoord2svPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord2svPROC multiTexCoord2sv = null;
alias PFNglMultiTexCoord2svARBPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord2svARBPROC multiTexCoord2svARB = null;
alias PFNglMultiTexCoord2xOESPROC = fn void(GLenum texture, GLfixed s, GLfixed t);
PFNglMultiTexCoord2xOESPROC multiTexCoord2xOES = null;
alias PFNglMultiTexCoord2xvOESPROC = fn void(GLenum texture, GLfixed* coords);
PFNglMultiTexCoord2xvOESPROC multiTexCoord2xvOES = null;
alias PFNglMultiTexCoord3bOESPROC = fn void(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
PFNglMultiTexCoord3bOESPROC multiTexCoord3bOES = null;
alias PFNglMultiTexCoord3bvOESPROC = fn void(GLenum texture, GLbyte* coords);
PFNglMultiTexCoord3bvOESPROC multiTexCoord3bvOES = null;
alias PFNglMultiTexCoord3dPROC = fn void(GLenum target, GLdouble s, GLdouble t, GLdouble r);
PFNglMultiTexCoord3dPROC multiTexCoord3d = null;
alias PFNglMultiTexCoord3dARBPROC = fn void(GLenum target, GLdouble s, GLdouble t, GLdouble r);
PFNglMultiTexCoord3dARBPROC multiTexCoord3dARB = null;
alias PFNglMultiTexCoord3dvPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord3dvPROC multiTexCoord3dv = null;
alias PFNglMultiTexCoord3dvARBPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord3dvARBPROC multiTexCoord3dvARB = null;
alias PFNglMultiTexCoord3fPROC = fn void(GLenum target, GLfloat s, GLfloat t, GLfloat r);
PFNglMultiTexCoord3fPROC multiTexCoord3f = null;
alias PFNglMultiTexCoord3fARBPROC = fn void(GLenum target, GLfloat s, GLfloat t, GLfloat r);
PFNglMultiTexCoord3fARBPROC multiTexCoord3fARB = null;
alias PFNglMultiTexCoord3fvPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord3fvPROC multiTexCoord3fv = null;
alias PFNglMultiTexCoord3fvARBPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord3fvARBPROC multiTexCoord3fvARB = null;
alias PFNglMultiTexCoord3hNVPROC = fn void(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
PFNglMultiTexCoord3hNVPROC multiTexCoord3hNV = null;
alias PFNglMultiTexCoord3hvNVPROC = fn void(GLenum target, GLhalfNV* v);
PFNglMultiTexCoord3hvNVPROC multiTexCoord3hvNV = null;
alias PFNglMultiTexCoord3iPROC = fn void(GLenum target, GLint s, GLint t, GLint r);
PFNglMultiTexCoord3iPROC multiTexCoord3i = null;
alias PFNglMultiTexCoord3iARBPROC = fn void(GLenum target, GLint s, GLint t, GLint r);
PFNglMultiTexCoord3iARBPROC multiTexCoord3iARB = null;
alias PFNglMultiTexCoord3ivPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord3ivPROC multiTexCoord3iv = null;
alias PFNglMultiTexCoord3ivARBPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord3ivARBPROC multiTexCoord3ivARB = null;
alias PFNglMultiTexCoord3sPROC = fn void(GLenum target, GLshort s, GLshort t, GLshort r);
PFNglMultiTexCoord3sPROC multiTexCoord3s = null;
alias PFNglMultiTexCoord3sARBPROC = fn void(GLenum target, GLshort s, GLshort t, GLshort r);
PFNglMultiTexCoord3sARBPROC multiTexCoord3sARB = null;
alias PFNglMultiTexCoord3svPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord3svPROC multiTexCoord3sv = null;
alias PFNglMultiTexCoord3svARBPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord3svARBPROC multiTexCoord3svARB = null;
alias PFNglMultiTexCoord3xOESPROC = fn void(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
PFNglMultiTexCoord3xOESPROC multiTexCoord3xOES = null;
alias PFNglMultiTexCoord3xvOESPROC = fn void(GLenum texture, GLfixed* coords);
PFNglMultiTexCoord3xvOESPROC multiTexCoord3xvOES = null;
alias PFNglMultiTexCoord4bOESPROC = fn void(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
PFNglMultiTexCoord4bOESPROC multiTexCoord4bOES = null;
alias PFNglMultiTexCoord4bvOESPROC = fn void(GLenum texture, GLbyte* coords);
PFNglMultiTexCoord4bvOESPROC multiTexCoord4bvOES = null;
alias PFNglMultiTexCoord4dPROC = fn void(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
PFNglMultiTexCoord4dPROC multiTexCoord4d = null;
alias PFNglMultiTexCoord4dARBPROC = fn void(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
PFNglMultiTexCoord4dARBPROC multiTexCoord4dARB = null;
alias PFNglMultiTexCoord4dvPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord4dvPROC multiTexCoord4dv = null;
alias PFNglMultiTexCoord4dvARBPROC = fn void(GLenum target, GLdouble* v);
PFNglMultiTexCoord4dvARBPROC multiTexCoord4dvARB = null;
alias PFNglMultiTexCoord4fPROC = fn void(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
PFNglMultiTexCoord4fPROC multiTexCoord4f = null;
alias PFNglMultiTexCoord4fARBPROC = fn void(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
PFNglMultiTexCoord4fARBPROC multiTexCoord4fARB = null;
alias PFNglMultiTexCoord4fvPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord4fvPROC multiTexCoord4fv = null;
alias PFNglMultiTexCoord4fvARBPROC = fn void(GLenum target, GLfloat* v);
PFNglMultiTexCoord4fvARBPROC multiTexCoord4fvARB = null;
alias PFNglMultiTexCoord4hNVPROC = fn void(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
PFNglMultiTexCoord4hNVPROC multiTexCoord4hNV = null;
alias PFNglMultiTexCoord4hvNVPROC = fn void(GLenum target, GLhalfNV* v);
PFNglMultiTexCoord4hvNVPROC multiTexCoord4hvNV = null;
alias PFNglMultiTexCoord4iPROC = fn void(GLenum target, GLint s, GLint t, GLint r, GLint q);
PFNglMultiTexCoord4iPROC multiTexCoord4i = null;
alias PFNglMultiTexCoord4iARBPROC = fn void(GLenum target, GLint s, GLint t, GLint r, GLint q);
PFNglMultiTexCoord4iARBPROC multiTexCoord4iARB = null;
alias PFNglMultiTexCoord4ivPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord4ivPROC multiTexCoord4iv = null;
alias PFNglMultiTexCoord4ivARBPROC = fn void(GLenum target, GLint* v);
PFNglMultiTexCoord4ivARBPROC multiTexCoord4ivARB = null;
alias PFNglMultiTexCoord4sPROC = fn void(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
PFNglMultiTexCoord4sPROC multiTexCoord4s = null;
alias PFNglMultiTexCoord4sARBPROC = fn void(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
PFNglMultiTexCoord4sARBPROC multiTexCoord4sARB = null;
alias PFNglMultiTexCoord4svPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord4svPROC multiTexCoord4sv = null;
alias PFNglMultiTexCoord4svARBPROC = fn void(GLenum target, GLshort* v);
PFNglMultiTexCoord4svARBPROC multiTexCoord4svARB = null;
alias PFNglMultiTexCoord4xPROC = fn void(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
PFNglMultiTexCoord4xPROC multiTexCoord4x = null;
alias PFNglMultiTexCoord4xOESPROC = fn void(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
PFNglMultiTexCoord4xOESPROC multiTexCoord4xOES = null;
alias PFNglMultiTexCoord4xvOESPROC = fn void(GLenum texture, GLfixed* coords);
PFNglMultiTexCoord4xvOESPROC multiTexCoord4xvOES = null;
alias PFNglMultiTexCoordP1uiPROC = fn void(GLenum texture, GLenum type, GLuint coords);
PFNglMultiTexCoordP1uiPROC multiTexCoordP1ui = null;
alias PFNglMultiTexCoordP1uivPROC = fn void(GLenum texture, GLenum type, GLuint* coords);
PFNglMultiTexCoordP1uivPROC multiTexCoordP1uiv = null;
alias PFNglMultiTexCoordP2uiPROC = fn void(GLenum texture, GLenum type, GLuint coords);
PFNglMultiTexCoordP2uiPROC multiTexCoordP2ui = null;
alias PFNglMultiTexCoordP2uivPROC = fn void(GLenum texture, GLenum type, GLuint* coords);
PFNglMultiTexCoordP2uivPROC multiTexCoordP2uiv = null;
alias PFNglMultiTexCoordP3uiPROC = fn void(GLenum texture, GLenum type, GLuint coords);
PFNglMultiTexCoordP3uiPROC multiTexCoordP3ui = null;
alias PFNglMultiTexCoordP3uivPROC = fn void(GLenum texture, GLenum type, GLuint* coords);
PFNglMultiTexCoordP3uivPROC multiTexCoordP3uiv = null;
alias PFNglMultiTexCoordP4uiPROC = fn void(GLenum texture, GLenum type, GLuint coords);
PFNglMultiTexCoordP4uiPROC multiTexCoordP4ui = null;
alias PFNglMultiTexCoordP4uivPROC = fn void(GLenum texture, GLenum type, GLuint* coords);
PFNglMultiTexCoordP4uivPROC multiTexCoordP4uiv = null;
alias PFNglMultiTexCoordPointerEXTPROC = fn void(GLenum texunit, GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglMultiTexCoordPointerEXTPROC multiTexCoordPointerEXT = null;
alias PFNglMultiTexEnvfEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
PFNglMultiTexEnvfEXTPROC multiTexEnvfEXT = null;
alias PFNglMultiTexEnvfvEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
PFNglMultiTexEnvfvEXTPROC multiTexEnvfvEXT = null;
alias PFNglMultiTexEnviEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint param);
PFNglMultiTexEnviEXTPROC multiTexEnviEXT = null;
alias PFNglMultiTexEnvivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglMultiTexEnvivEXTPROC multiTexEnvivEXT = null;
alias PFNglMultiTexGendEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
PFNglMultiTexGendEXTPROC multiTexGendEXT = null;
alias PFNglMultiTexGendvEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
PFNglMultiTexGendvEXTPROC multiTexGendvEXT = null;
alias PFNglMultiTexGenfEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
PFNglMultiTexGenfEXTPROC multiTexGenfEXT = null;
alias PFNglMultiTexGenfvEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
PFNglMultiTexGenfvEXTPROC multiTexGenfvEXT = null;
alias PFNglMultiTexGeniEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLint param);
PFNglMultiTexGeniEXTPROC multiTexGeniEXT = null;
alias PFNglMultiTexGenivEXTPROC = fn void(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
PFNglMultiTexGenivEXTPROC multiTexGenivEXT = null;
alias PFNglMultiTexImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, void* pixels);
PFNglMultiTexImage1DEXTPROC multiTexImage1DEXT = null;
alias PFNglMultiTexImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, void* pixels);
PFNglMultiTexImage2DEXTPROC multiTexImage2DEXT = null;
alias PFNglMultiTexImage3DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
PFNglMultiTexImage3DEXTPROC multiTexImage3DEXT = null;
alias PFNglMultiTexParameterIivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglMultiTexParameterIivEXTPROC multiTexParameterIivEXT = null;
alias PFNglMultiTexParameterIuivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
PFNglMultiTexParameterIuivEXTPROC multiTexParameterIuivEXT = null;
alias PFNglMultiTexParameterfEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
PFNglMultiTexParameterfEXTPROC multiTexParameterfEXT = null;
alias PFNglMultiTexParameterfvEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
PFNglMultiTexParameterfvEXTPROC multiTexParameterfvEXT = null;
alias PFNglMultiTexParameteriEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint param);
PFNglMultiTexParameteriEXTPROC multiTexParameteriEXT = null;
alias PFNglMultiTexParameterivEXTPROC = fn void(GLenum texunit, GLenum target, GLenum pname, GLint* params);
PFNglMultiTexParameterivEXTPROC multiTexParameterivEXT = null;
alias PFNglMultiTexRenderbufferEXTPROC = fn void(GLenum texunit, GLenum target, GLuint renderbuffer);
PFNglMultiTexRenderbufferEXTPROC multiTexRenderbufferEXT = null;
alias PFNglMultiTexSubImage1DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
PFNglMultiTexSubImage1DEXTPROC multiTexSubImage1DEXT = null;
alias PFNglMultiTexSubImage2DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglMultiTexSubImage2DEXTPROC multiTexSubImage2DEXT = null;
alias PFNglMultiTexSubImage3DEXTPROC = fn void(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglMultiTexSubImage3DEXTPROC multiTexSubImage3DEXT = null;
alias PFNglMulticastBarrierNVPROC = fn void();
PFNglMulticastBarrierNVPROC multicastBarrierNV = null;
alias PFNglMulticastBlitFramebufferNVPROC = fn void(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
PFNglMulticastBlitFramebufferNVPROC multicastBlitFramebufferNV = null;
alias PFNglMulticastBufferSubDataNVPROC = fn void(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglMulticastBufferSubDataNVPROC multicastBufferSubDataNV = null;
alias PFNglMulticastCopyBufferSubDataNVPROC = fn void(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
PFNglMulticastCopyBufferSubDataNVPROC multicastCopyBufferSubDataNV = null;
alias PFNglMulticastCopyImageSubDataNVPROC = fn void(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
PFNglMulticastCopyImageSubDataNVPROC multicastCopyImageSubDataNV = null;
alias PFNglMulticastFramebufferSampleLocationsfvNVPROC = fn void(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, GLfloat* v);
PFNglMulticastFramebufferSampleLocationsfvNVPROC multicastFramebufferSampleLocationsfvNV = null;
alias PFNglMulticastGetQueryObjecti64vNVPROC = fn void(GLuint gpu, GLuint id, GLenum pname, GLint64* params);
PFNglMulticastGetQueryObjecti64vNVPROC multicastGetQueryObjecti64vNV = null;
alias PFNglMulticastGetQueryObjectivNVPROC = fn void(GLuint gpu, GLuint id, GLenum pname, GLint* params);
PFNglMulticastGetQueryObjectivNVPROC multicastGetQueryObjectivNV = null;
alias PFNglMulticastGetQueryObjectui64vNVPROC = fn void(GLuint gpu, GLuint id, GLenum pname, GLuint64* params);
PFNglMulticastGetQueryObjectui64vNVPROC multicastGetQueryObjectui64vNV = null;
alias PFNglMulticastGetQueryObjectuivNVPROC = fn void(GLuint gpu, GLuint id, GLenum pname, GLuint* params);
PFNglMulticastGetQueryObjectuivNVPROC multicastGetQueryObjectuivNV = null;
alias PFNglMulticastScissorArrayvNVXPROC = fn void(GLuint gpu, GLuint first, GLsizei count, GLint* v);
PFNglMulticastScissorArrayvNVXPROC multicastScissorArrayvNVX = null;
alias PFNglMulticastViewportArrayvNVXPROC = fn void(GLuint gpu, GLuint first, GLsizei count, GLfloat* v);
PFNglMulticastViewportArrayvNVXPROC multicastViewportArrayvNVX = null;
alias PFNglMulticastViewportPositionWScaleNVXPROC = fn void(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff);
PFNglMulticastViewportPositionWScaleNVXPROC multicastViewportPositionWScaleNVX = null;
alias PFNglMulticastWaitSyncNVPROC = fn void(GLuint signalGpu, GLbitfield waitGpuMask);
PFNglMulticastWaitSyncNVPROC multicastWaitSyncNV = null;
alias PFNglNamedBufferAttachMemoryNVPROC = fn void(GLuint buffer, GLuint memory, GLuint64 offset);
PFNglNamedBufferAttachMemoryNVPROC namedBufferAttachMemoryNV = null;
alias PFNglNamedBufferDataPROC = fn void(GLuint buffer, GLsizeiptr size, void* data, GLenum usage);
PFNglNamedBufferDataPROC namedBufferData = null;
alias PFNglNamedBufferDataEXTPROC = fn void(GLuint buffer, GLsizeiptr size, void* data, GLenum usage);
PFNglNamedBufferDataEXTPROC namedBufferDataEXT = null;
alias PFNglNamedBufferPageCommitmentARBPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
PFNglNamedBufferPageCommitmentARBPROC namedBufferPageCommitmentARB = null;
alias PFNglNamedBufferPageCommitmentEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
PFNglNamedBufferPageCommitmentEXTPROC namedBufferPageCommitmentEXT = null;
alias PFNglNamedBufferPageCommitmentMemNVPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
PFNglNamedBufferPageCommitmentMemNVPROC namedBufferPageCommitmentMemNV = null;
alias PFNglNamedBufferStoragePROC = fn void(GLuint buffer, GLsizeiptr size, void* data, GLbitfield flags);
PFNglNamedBufferStoragePROC namedBufferStorage = null;
alias PFNglNamedBufferStorageExternalEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
PFNglNamedBufferStorageExternalEXTPROC namedBufferStorageExternalEXT = null;
alias PFNglNamedBufferStorageEXTPROC = fn void(GLuint buffer, GLsizeiptr size, void* data, GLbitfield flags);
PFNglNamedBufferStorageEXTPROC namedBufferStorageEXT = null;
alias PFNglNamedBufferStorageMemEXTPROC = fn void(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
PFNglNamedBufferStorageMemEXTPROC namedBufferStorageMemEXT = null;
alias PFNglNamedBufferSubDataPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglNamedBufferSubDataPROC namedBufferSubData = null;
alias PFNglNamedBufferSubDataEXTPROC = fn void(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
PFNglNamedBufferSubDataEXTPROC namedBufferSubDataEXT = null;
alias PFNglNamedCopyBufferSubDataEXTPROC = fn void(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
PFNglNamedCopyBufferSubDataEXTPROC namedCopyBufferSubDataEXT = null;
alias PFNglNamedFramebufferDrawBufferPROC = fn void(GLuint framebuffer, GLenum buf);
PFNglNamedFramebufferDrawBufferPROC namedFramebufferDrawBuffer = null;
alias PFNglNamedFramebufferDrawBuffersPROC = fn void(GLuint framebuffer, GLsizei n, GLenum* bufs);
PFNglNamedFramebufferDrawBuffersPROC namedFramebufferDrawBuffers = null;
alias PFNglNamedFramebufferParameteriPROC = fn void(GLuint framebuffer, GLenum pname, GLint param);
PFNglNamedFramebufferParameteriPROC namedFramebufferParameteri = null;
alias PFNglNamedFramebufferParameteriEXTPROC = fn void(GLuint framebuffer, GLenum pname, GLint param);
PFNglNamedFramebufferParameteriEXTPROC namedFramebufferParameteriEXT = null;
alias PFNglNamedFramebufferReadBufferPROC = fn void(GLuint framebuffer, GLenum src);
PFNglNamedFramebufferReadBufferPROC namedFramebufferReadBuffer = null;
alias PFNglNamedFramebufferRenderbufferPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
PFNglNamedFramebufferRenderbufferPROC namedFramebufferRenderbuffer = null;
alias PFNglNamedFramebufferRenderbufferEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
PFNglNamedFramebufferRenderbufferEXTPROC namedFramebufferRenderbufferEXT = null;
alias PFNglNamedFramebufferSampleLocationsfvARBPROC = fn void(GLuint framebuffer, GLuint start, GLsizei count, GLfloat* v);
PFNglNamedFramebufferSampleLocationsfvARBPROC namedFramebufferSampleLocationsfvARB = null;
alias PFNglNamedFramebufferSampleLocationsfvNVPROC = fn void(GLuint framebuffer, GLuint start, GLsizei count, GLfloat* v);
PFNglNamedFramebufferSampleLocationsfvNVPROC namedFramebufferSampleLocationsfvNV = null;
alias PFNglNamedFramebufferTexturePROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
PFNglNamedFramebufferTexturePROC namedFramebufferTexture = null;
alias PFNglNamedFramebufferSamplePositionsfvAMDPROC = fn void(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, GLfloat* values);
PFNglNamedFramebufferSamplePositionsfvAMDPROC namedFramebufferSamplePositionsfvAMD = null;
alias PFNglNamedFramebufferTexture1DEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglNamedFramebufferTexture1DEXTPROC namedFramebufferTexture1DEXT = null;
alias PFNglNamedFramebufferTexture2DEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
PFNglNamedFramebufferTexture2DEXTPROC namedFramebufferTexture2DEXT = null;
alias PFNglNamedFramebufferTexture3DEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
PFNglNamedFramebufferTexture3DEXTPROC namedFramebufferTexture3DEXT = null;
alias PFNglNamedFramebufferTextureEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
PFNglNamedFramebufferTextureEXTPROC namedFramebufferTextureEXT = null;
alias PFNglNamedFramebufferTextureFaceEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
PFNglNamedFramebufferTextureFaceEXTPROC namedFramebufferTextureFaceEXT = null;
alias PFNglNamedFramebufferTextureLayerPROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
PFNglNamedFramebufferTextureLayerPROC namedFramebufferTextureLayer = null;
alias PFNglNamedFramebufferTextureLayerEXTPROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
PFNglNamedFramebufferTextureLayerEXTPROC namedFramebufferTextureLayerEXT = null;
alias PFNglNamedFramebufferTextureMultiviewOVRPROC = fn void(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
PFNglNamedFramebufferTextureMultiviewOVRPROC namedFramebufferTextureMultiviewOVR = null;
alias PFNglNamedProgramLocalParameter4dEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglNamedProgramLocalParameter4dEXTPROC namedProgramLocalParameter4dEXT = null;
alias PFNglNamedProgramLocalParameter4dvEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLdouble* params);
PFNglNamedProgramLocalParameter4dvEXTPROC namedProgramLocalParameter4dvEXT = null;
alias PFNglNamedProgramLocalParameter4fEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglNamedProgramLocalParameter4fEXTPROC namedProgramLocalParameter4fEXT = null;
alias PFNglNamedProgramLocalParameter4fvEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLfloat* params);
PFNglNamedProgramLocalParameter4fvEXTPROC namedProgramLocalParameter4fvEXT = null;
alias PFNglNamedProgramLocalParameterI4iEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
PFNglNamedProgramLocalParameterI4iEXTPROC namedProgramLocalParameterI4iEXT = null;
alias PFNglNamedProgramLocalParameterI4ivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLint* params);
PFNglNamedProgramLocalParameterI4ivEXTPROC namedProgramLocalParameterI4ivEXT = null;
alias PFNglNamedProgramLocalParameterI4uiEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
PFNglNamedProgramLocalParameterI4uiEXTPROC namedProgramLocalParameterI4uiEXT = null;
alias PFNglNamedProgramLocalParameterI4uivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLuint* params);
PFNglNamedProgramLocalParameterI4uivEXTPROC namedProgramLocalParameterI4uivEXT = null;
alias PFNglNamedProgramLocalParameters4fvEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLsizei count, GLfloat* params);
PFNglNamedProgramLocalParameters4fvEXTPROC namedProgramLocalParameters4fvEXT = null;
alias PFNglNamedProgramLocalParametersI4ivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLsizei count, GLint* params);
PFNglNamedProgramLocalParametersI4ivEXTPROC namedProgramLocalParametersI4ivEXT = null;
alias PFNglNamedProgramLocalParametersI4uivEXTPROC = fn void(GLuint program, GLenum target, GLuint index, GLsizei count, GLuint* params);
PFNglNamedProgramLocalParametersI4uivEXTPROC namedProgramLocalParametersI4uivEXT = null;
alias PFNglNamedProgramStringEXTPROC = fn void(GLuint program, GLenum target, GLenum format, GLsizei len, void* string);
PFNglNamedProgramStringEXTPROC namedProgramStringEXT = null;
alias PFNglNamedRenderbufferStoragePROC = fn void(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStoragePROC namedRenderbufferStorage = null;
alias PFNglNamedRenderbufferStorageEXTPROC = fn void(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStorageEXTPROC namedRenderbufferStorageEXT = null;
alias PFNglNamedRenderbufferStorageMultisamplePROC = fn void(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStorageMultisamplePROC namedRenderbufferStorageMultisample = null;
alias PFNglNamedRenderbufferStorageMultisampleAdvancedAMDPROC = fn void(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStorageMultisampleAdvancedAMDPROC namedRenderbufferStorageMultisampleAdvancedAMD = null;
alias PFNglNamedRenderbufferStorageMultisampleCoverageEXTPROC = fn void(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStorageMultisampleCoverageEXTPROC namedRenderbufferStorageMultisampleCoverageEXT = null;
alias PFNglNamedRenderbufferStorageMultisampleEXTPROC = fn void(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglNamedRenderbufferStorageMultisampleEXTPROC namedRenderbufferStorageMultisampleEXT = null;
alias PFNglNamedStringARBPROC = fn void(GLenum type, GLint namelen, GLchar* name, GLint stringlen, GLchar* string);
PFNglNamedStringARBPROC namedStringARB = null;
alias PFNglNewListPROC = fn void(GLuint list, GLenum mode);
PFNglNewListPROC newList = null;
alias PFNglNewObjectBufferATIPROC = fn GLuint(GLsizei size, void* pointer, GLenum usage);
PFNglNewObjectBufferATIPROC newObjectBufferATI = null;
alias PFNglNormal3bPROC = fn void(GLbyte nx, GLbyte ny, GLbyte nz);
PFNglNormal3bPROC normal3b = null;
alias PFNglNormal3bvPROC = fn void(GLbyte* v);
PFNglNormal3bvPROC normal3bv = null;
alias PFNglNormal3dPROC = fn void(GLdouble nx, GLdouble ny, GLdouble nz);
PFNglNormal3dPROC normal3d = null;
alias PFNglNormal3dvPROC = fn void(GLdouble* v);
PFNglNormal3dvPROC normal3dv = null;
alias PFNglNormal3fPROC = fn void(GLfloat nx, GLfloat ny, GLfloat nz);
PFNglNormal3fPROC normal3f = null;
alias PFNglNormal3fVertex3fSUNPROC = fn void(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglNormal3fVertex3fSUNPROC normal3fVertex3fSUN = null;
alias PFNglNormal3fVertex3fvSUNPROC = fn void(GLfloat* n, GLfloat* v);
PFNglNormal3fVertex3fvSUNPROC normal3fVertex3fvSUN = null;
alias PFNglNormal3fvPROC = fn void(GLfloat* v);
PFNglNormal3fvPROC normal3fv = null;
alias PFNglNormal3hNVPROC = fn void(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
PFNglNormal3hNVPROC normal3hNV = null;
alias PFNglNormal3hvNVPROC = fn void(GLhalfNV* v);
PFNglNormal3hvNVPROC normal3hvNV = null;
alias PFNglNormal3iPROC = fn void(GLint nx, GLint ny, GLint nz);
PFNglNormal3iPROC normal3i = null;
alias PFNglNormal3ivPROC = fn void(GLint* v);
PFNglNormal3ivPROC normal3iv = null;
alias PFNglNormal3sPROC = fn void(GLshort nx, GLshort ny, GLshort nz);
PFNglNormal3sPROC normal3s = null;
alias PFNglNormal3svPROC = fn void(GLshort* v);
PFNglNormal3svPROC normal3sv = null;
alias PFNglNormal3xPROC = fn void(GLfixed nx, GLfixed ny, GLfixed nz);
PFNglNormal3xPROC normal3x = null;
alias PFNglNormal3xOESPROC = fn void(GLfixed nx, GLfixed ny, GLfixed nz);
PFNglNormal3xOESPROC normal3xOES = null;
alias PFNglNormal3xvOESPROC = fn void(GLfixed* coords);
PFNglNormal3xvOESPROC normal3xvOES = null;
alias PFNglNormalFormatNVPROC = fn void(GLenum type, GLsizei stride);
PFNglNormalFormatNVPROC normalFormatNV = null;
alias PFNglNormalP3uiPROC = fn void(GLenum type, GLuint coords);
PFNglNormalP3uiPROC normalP3ui = null;
alias PFNglNormalP3uivPROC = fn void(GLenum type, GLuint* coords);
PFNglNormalP3uivPROC normalP3uiv = null;
alias PFNglNormalPointerPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglNormalPointerPROC normalPointer = null;
alias PFNglNormalPointerEXTPROC = fn void(GLenum type, GLsizei stride, GLsizei count, void* pointer);
PFNglNormalPointerEXTPROC normalPointerEXT = null;
alias PFNglNormalPointerListIBMPROC = fn void(GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglNormalPointerListIBMPROC normalPointerListIBM = null;
alias PFNglNormalPointervINTELPROC = fn void(GLenum type, void** pointer);
PFNglNormalPointervINTELPROC normalPointervINTEL = null;
alias PFNglNormalStream3bATIPROC = fn void(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
PFNglNormalStream3bATIPROC normalStream3bATI = null;
alias PFNglNormalStream3bvATIPROC = fn void(GLenum stream, GLbyte* coords);
PFNglNormalStream3bvATIPROC normalStream3bvATI = null;
alias PFNglNormalStream3dATIPROC = fn void(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
PFNglNormalStream3dATIPROC normalStream3dATI = null;
alias PFNglNormalStream3dvATIPROC = fn void(GLenum stream, GLdouble* coords);
PFNglNormalStream3dvATIPROC normalStream3dvATI = null;
alias PFNglNormalStream3fATIPROC = fn void(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
PFNglNormalStream3fATIPROC normalStream3fATI = null;
alias PFNglNormalStream3fvATIPROC = fn void(GLenum stream, GLfloat* coords);
PFNglNormalStream3fvATIPROC normalStream3fvATI = null;
alias PFNglNormalStream3iATIPROC = fn void(GLenum stream, GLint nx, GLint ny, GLint nz);
PFNglNormalStream3iATIPROC normalStream3iATI = null;
alias PFNglNormalStream3ivATIPROC = fn void(GLenum stream, GLint* coords);
PFNglNormalStream3ivATIPROC normalStream3ivATI = null;
alias PFNglNormalStream3sATIPROC = fn void(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
PFNglNormalStream3sATIPROC normalStream3sATI = null;
alias PFNglNormalStream3svATIPROC = fn void(GLenum stream, GLshort* coords);
PFNglNormalStream3svATIPROC normalStream3svATI = null;
alias PFNglObjectLabelPROC = fn void(GLenum identifier, GLuint name, GLsizei length, GLchar* label);
PFNglObjectLabelPROC objectLabel = null;
alias PFNglObjectLabelKHRPROC = fn void(GLenum identifier, GLuint name, GLsizei length, GLchar* label);
PFNglObjectLabelKHRPROC objectLabelKHR = null;
alias PFNglObjectPtrLabelPROC = fn void(void* ptr, GLsizei length, GLchar* label);
PFNglObjectPtrLabelPROC objectPtrLabel = null;
alias PFNglObjectPtrLabelKHRPROC = fn void(void* ptr, GLsizei length, GLchar* label);
PFNglObjectPtrLabelKHRPROC objectPtrLabelKHR = null;
alias PFNglObjectPurgeableAPPLEPROC = fn GLenum(GLenum objectType, GLuint name, GLenum option);
PFNglObjectPurgeableAPPLEPROC objectPurgeableAPPLE = null;
alias PFNglObjectUnpurgeableAPPLEPROC = fn GLenum(GLenum objectType, GLuint name, GLenum option);
PFNglObjectUnpurgeableAPPLEPROC objectUnpurgeableAPPLE = null;
alias PFNglOrthoPROC = fn void(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
PFNglOrthoPROC ortho = null;
alias PFNglOrthofPROC = fn void(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
PFNglOrthofPROC orthof = null;
alias PFNglOrthofOESPROC = fn void(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
PFNglOrthofOESPROC orthofOES = null;
alias PFNglOrthoxPROC = fn void(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
PFNglOrthoxPROC orthox = null;
alias PFNglOrthoxOESPROC = fn void(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
PFNglOrthoxOESPROC orthoxOES = null;
alias PFNglPNTrianglesfATIPROC = fn void(GLenum pname, GLfloat param);
PFNglPNTrianglesfATIPROC pNTrianglesfATI = null;
alias PFNglPNTrianglesiATIPROC = fn void(GLenum pname, GLint param);
PFNglPNTrianglesiATIPROC pNTrianglesiATI = null;
alias PFNglPassTexCoordATIPROC = fn void(GLuint dst, GLuint coord, GLenum swizzle);
PFNglPassTexCoordATIPROC passTexCoordATI = null;
alias PFNglPassThroughPROC = fn void(GLfloat token);
PFNglPassThroughPROC passThrough = null;
alias PFNglPassThroughxOESPROC = fn void(GLfixed token);
PFNglPassThroughxOESPROC passThroughxOES = null;
alias PFNglPatchParameterfvPROC = fn void(GLenum pname, GLfloat* values);
PFNglPatchParameterfvPROC patchParameterfv = null;
alias PFNglPatchParameteriPROC = fn void(GLenum pname, GLint value);
PFNglPatchParameteriPROC patchParameteri = null;
alias PFNglPatchParameteriEXTPROC = fn void(GLenum pname, GLint value);
PFNglPatchParameteriEXTPROC patchParameteriEXT = null;
alias PFNglPatchParameteriOESPROC = fn void(GLenum pname, GLint value);
PFNglPatchParameteriOESPROC patchParameteriOES = null;
alias PFNglPathColorGenNVPROC = fn void(GLenum color, GLenum genMode, GLenum colorFormat, GLfloat* coeffs);
PFNglPathColorGenNVPROC pathColorGenNV = null;
alias PFNglPathCommandsNVPROC = fn void(GLuint path, GLsizei numCommands, GLubyte* commands, GLsizei numCoords, GLenum coordType, void* coords);
PFNglPathCommandsNVPROC pathCommandsNV = null;
alias PFNglPathCoordsNVPROC = fn void(GLuint path, GLsizei numCoords, GLenum coordType, void* coords);
PFNglPathCoordsNVPROC pathCoordsNV = null;
alias PFNglPathCoverDepthFuncNVPROC = fn void(GLenum func);
PFNglPathCoverDepthFuncNVPROC pathCoverDepthFuncNV = null;
alias PFNglPathDashArrayNVPROC = fn void(GLuint path, GLsizei dashCount, GLfloat* dashArray);
PFNglPathDashArrayNVPROC pathDashArrayNV = null;
alias PFNglPathFogGenNVPROC = fn void(GLenum genMode);
PFNglPathFogGenNVPROC pathFogGenNV = null;
alias PFNglPathGlyphIndexArrayNVPROC = fn GLenum(GLuint firstPathName, GLenum fontTarget, void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
PFNglPathGlyphIndexArrayNVPROC pathGlyphIndexArrayNV = null;
alias PFNglPathGlyphIndexRangeNVPROC = fn GLenum(GLenum fontTarget, void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint* baseAndCount);
PFNglPathGlyphIndexRangeNVPROC pathGlyphIndexRangeNV = null;
alias PFNglPathGlyphRangeNVPROC = fn void(GLuint firstPathName, GLenum fontTarget, void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
PFNglPathGlyphRangeNVPROC pathGlyphRangeNV = null;
alias PFNglPathGlyphsNVPROC = fn void(GLuint firstPathName, GLenum fontTarget, void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
PFNglPathGlyphsNVPROC pathGlyphsNV = null;
alias PFNglPathMemoryGlyphIndexArrayNVPROC = fn GLenum(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
PFNglPathMemoryGlyphIndexArrayNVPROC pathMemoryGlyphIndexArrayNV = null;
alias PFNglPathParameterfNVPROC = fn void(GLuint path, GLenum pname, GLfloat value);
PFNglPathParameterfNVPROC pathParameterfNV = null;
alias PFNglPathParameterfvNVPROC = fn void(GLuint path, GLenum pname, GLfloat* value);
PFNglPathParameterfvNVPROC pathParameterfvNV = null;
alias PFNglPathParameteriNVPROC = fn void(GLuint path, GLenum pname, GLint value);
PFNglPathParameteriNVPROC pathParameteriNV = null;
alias PFNglPathParameterivNVPROC = fn void(GLuint path, GLenum pname, GLint* value);
PFNglPathParameterivNVPROC pathParameterivNV = null;
alias PFNglPathStencilDepthOffsetNVPROC = fn void(GLfloat factor, GLfloat units);
PFNglPathStencilDepthOffsetNVPROC pathStencilDepthOffsetNV = null;
alias PFNglPathStencilFuncNVPROC = fn void(GLenum func, GLint ref, GLuint mask);
PFNglPathStencilFuncNVPROC pathStencilFuncNV = null;
alias PFNglPathStringNVPROC = fn void(GLuint path, GLenum format, GLsizei length, void* pathString);
PFNglPathStringNVPROC pathStringNV = null;
alias PFNglPathSubCommandsNVPROC = fn void(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, GLubyte* commands, GLsizei numCoords, GLenum coordType, void* coords);
PFNglPathSubCommandsNVPROC pathSubCommandsNV = null;
alias PFNglPathSubCoordsNVPROC = fn void(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, void* coords);
PFNglPathSubCoordsNVPROC pathSubCoordsNV = null;
alias PFNglPathTexGenNVPROC = fn void(GLenum texCoordSet, GLenum genMode, GLint components, GLfloat* coeffs);
PFNglPathTexGenNVPROC pathTexGenNV = null;
alias PFNglPauseTransformFeedbackPROC = fn void();
PFNglPauseTransformFeedbackPROC pauseTransformFeedback = null;
alias PFNglPauseTransformFeedbackNVPROC = fn void();
PFNglPauseTransformFeedbackNVPROC pauseTransformFeedbackNV = null;
alias PFNglPixelDataRangeNVPROC = fn void(GLenum target, GLsizei length, void* pointer);
PFNglPixelDataRangeNVPROC pixelDataRangeNV = null;
alias PFNglPixelMapfvPROC = fn void(GLenum map, GLsizei mapsize, GLfloat* values);
PFNglPixelMapfvPROC pixelMapfv = null;
alias PFNglPixelMapuivPROC = fn void(GLenum map, GLsizei mapsize, GLuint* values);
PFNglPixelMapuivPROC pixelMapuiv = null;
alias PFNglPixelMapusvPROC = fn void(GLenum map, GLsizei mapsize, GLushort* values);
PFNglPixelMapusvPROC pixelMapusv = null;
alias PFNglPixelMapxPROC = fn void(GLenum map, GLint size, GLfixed* values);
PFNglPixelMapxPROC pixelMapx = null;
alias PFNglPixelStorefPROC = fn void(GLenum pname, GLfloat param);
PFNglPixelStorefPROC pixelStoref = null;
alias PFNglPixelStoreiPROC = fn void(GLenum pname, GLint param);
PFNglPixelStoreiPROC pixelStorei = null;
alias PFNglPixelStorexPROC = fn void(GLenum pname, GLfixed param);
PFNglPixelStorexPROC pixelStorex = null;
alias PFNglPixelTexGenParameterfSGISPROC = fn void(GLenum pname, GLfloat param);
PFNglPixelTexGenParameterfSGISPROC pixelTexGenParameterfSGIS = null;
alias PFNglPixelTexGenParameterfvSGISPROC = fn void(GLenum pname, GLfloat* params);
PFNglPixelTexGenParameterfvSGISPROC pixelTexGenParameterfvSGIS = null;
alias PFNglPixelTexGenParameteriSGISPROC = fn void(GLenum pname, GLint param);
PFNglPixelTexGenParameteriSGISPROC pixelTexGenParameteriSGIS = null;
alias PFNglPixelTexGenParameterivSGISPROC = fn void(GLenum pname, GLint* params);
PFNglPixelTexGenParameterivSGISPROC pixelTexGenParameterivSGIS = null;
alias PFNglPixelTexGenSGIXPROC = fn void(GLenum mode);
PFNglPixelTexGenSGIXPROC pixelTexGenSGIX = null;
alias PFNglPixelTransferfPROC = fn void(GLenum pname, GLfloat param);
PFNglPixelTransferfPROC pixelTransferf = null;
alias PFNglPixelTransferiPROC = fn void(GLenum pname, GLint param);
PFNglPixelTransferiPROC pixelTransferi = null;
alias PFNglPixelTransferxOESPROC = fn void(GLenum pname, GLfixed param);
PFNglPixelTransferxOESPROC pixelTransferxOES = null;
alias PFNglPixelTransformParameterfEXTPROC = fn void(GLenum target, GLenum pname, GLfloat param);
PFNglPixelTransformParameterfEXTPROC pixelTransformParameterfEXT = null;
alias PFNglPixelTransformParameterfvEXTPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglPixelTransformParameterfvEXTPROC pixelTransformParameterfvEXT = null;
alias PFNglPixelTransformParameteriEXTPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglPixelTransformParameteriEXTPROC pixelTransformParameteriEXT = null;
alias PFNglPixelTransformParameterivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglPixelTransformParameterivEXTPROC pixelTransformParameterivEXT = null;
alias PFNglPixelZoomPROC = fn void(GLfloat xfactor, GLfloat yfactor);
PFNglPixelZoomPROC pixelZoom = null;
alias PFNglPixelZoomxOESPROC = fn void(GLfixed xfactor, GLfixed yfactor);
PFNglPixelZoomxOESPROC pixelZoomxOES = null;
alias PFNglPointAlongPathNVPROC = fn GLboolean(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY);
PFNglPointAlongPathNVPROC pointAlongPathNV = null;
alias PFNglPointParameterfPROC = fn void(GLenum pname, GLfloat param);
PFNglPointParameterfPROC pointParameterf = null;
alias PFNglPointParameterfARBPROC = fn void(GLenum pname, GLfloat param);
PFNglPointParameterfARBPROC pointParameterfARB = null;
alias PFNglPointParameterfEXTPROC = fn void(GLenum pname, GLfloat param);
PFNglPointParameterfEXTPROC pointParameterfEXT = null;
alias PFNglPointParameterfSGISPROC = fn void(GLenum pname, GLfloat param);
PFNglPointParameterfSGISPROC pointParameterfSGIS = null;
alias PFNglPointParameterfvPROC = fn void(GLenum pname, GLfloat* params);
PFNglPointParameterfvPROC pointParameterfv = null;
alias PFNglPointParameterfvARBPROC = fn void(GLenum pname, GLfloat* params);
PFNglPointParameterfvARBPROC pointParameterfvARB = null;
alias PFNglPointParameterfvEXTPROC = fn void(GLenum pname, GLfloat* params);
PFNglPointParameterfvEXTPROC pointParameterfvEXT = null;
alias PFNglPointParameterfvSGISPROC = fn void(GLenum pname, GLfloat* params);
PFNglPointParameterfvSGISPROC pointParameterfvSGIS = null;
alias PFNglPointParameteriPROC = fn void(GLenum pname, GLint param);
PFNglPointParameteriPROC pointParameteri = null;
alias PFNglPointParameteriNVPROC = fn void(GLenum pname, GLint param);
PFNglPointParameteriNVPROC pointParameteriNV = null;
alias PFNglPointParameterivPROC = fn void(GLenum pname, GLint* params);
PFNglPointParameterivPROC pointParameteriv = null;
alias PFNglPointParameterivNVPROC = fn void(GLenum pname, GLint* params);
PFNglPointParameterivNVPROC pointParameterivNV = null;
alias PFNglPointParameterxPROC = fn void(GLenum pname, GLfixed param);
PFNglPointParameterxPROC pointParameterx = null;
alias PFNglPointParameterxOESPROC = fn void(GLenum pname, GLfixed param);
PFNglPointParameterxOESPROC pointParameterxOES = null;
alias PFNglPointParameterxvPROC = fn void(GLenum pname, GLfixed* params);
PFNglPointParameterxvPROC pointParameterxv = null;
alias PFNglPointParameterxvOESPROC = fn void(GLenum pname, GLfixed* params);
PFNglPointParameterxvOESPROC pointParameterxvOES = null;
alias PFNglPointSizePROC = fn void(GLfloat size);
PFNglPointSizePROC pointSize = null;
alias PFNglPointSizePointerOESPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglPointSizePointerOESPROC pointSizePointerOES = null;
alias PFNglPointSizexPROC = fn void(GLfixed size);
PFNglPointSizexPROC pointSizex = null;
alias PFNglPointSizexOESPROC = fn void(GLfixed size);
PFNglPointSizexOESPROC pointSizexOES = null;
alias PFNglPollAsyncSGIXPROC = fn GLint(GLuint* markerp);
PFNglPollAsyncSGIXPROC pollAsyncSGIX = null;
alias PFNglPollInstrumentsSGIXPROC = fn GLint(GLint* marker_p);
PFNglPollInstrumentsSGIXPROC pollInstrumentsSGIX = null;
alias PFNglPolygonModePROC = fn void(GLenum face, GLenum mode);
PFNglPolygonModePROC polygonMode = null;
alias PFNglPolygonModeNVPROC = fn void(GLenum face, GLenum mode);
PFNglPolygonModeNVPROC polygonModeNV = null;
alias PFNglPolygonOffsetPROC = fn void(GLfloat factor, GLfloat units);
PFNglPolygonOffsetPROC polygonOffset = null;
alias PFNglPolygonOffsetClampPROC = fn void(GLfloat factor, GLfloat units, GLfloat clamp);
PFNglPolygonOffsetClampPROC polygonOffsetClamp = null;
alias PFNglPolygonOffsetClampEXTPROC = fn void(GLfloat factor, GLfloat units, GLfloat clamp);
PFNglPolygonOffsetClampEXTPROC polygonOffsetClampEXT = null;
alias PFNglPolygonOffsetEXTPROC = fn void(GLfloat factor, GLfloat bias);
PFNglPolygonOffsetEXTPROC polygonOffsetEXT = null;
alias PFNglPolygonOffsetxPROC = fn void(GLfixed factor, GLfixed units);
PFNglPolygonOffsetxPROC polygonOffsetx = null;
alias PFNglPolygonOffsetxOESPROC = fn void(GLfixed factor, GLfixed units);
PFNglPolygonOffsetxOESPROC polygonOffsetxOES = null;
alias PFNglPolygonStipplePROC = fn void(GLubyte* mask);
PFNglPolygonStipplePROC polygonStipple = null;
alias PFNglPopAttribPROC = fn void();
PFNglPopAttribPROC popAttrib = null;
alias PFNglPopClientAttribPROC = fn void();
PFNglPopClientAttribPROC popClientAttrib = null;
alias PFNglPopDebugGroupPROC = fn void();
PFNglPopDebugGroupPROC popDebugGroup = null;
alias PFNglPopDebugGroupKHRPROC = fn void();
PFNglPopDebugGroupKHRPROC popDebugGroupKHR = null;
alias PFNglPopGroupMarkerEXTPROC = fn void();
PFNglPopGroupMarkerEXTPROC popGroupMarkerEXT = null;
alias PFNglPopMatrixPROC = fn void();
PFNglPopMatrixPROC popMatrix = null;
alias PFNglPopNamePROC = fn void();
PFNglPopNamePROC popName = null;
alias PFNglPresentFrameDualFillNVPROC = fn void(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
PFNglPresentFrameDualFillNVPROC presentFrameDualFillNV = null;
alias PFNglPresentFrameKeyedNVPROC = fn void(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
PFNglPresentFrameKeyedNVPROC presentFrameKeyedNV = null;
alias PFNglPrimitiveBoundingBoxPROC = fn void(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
PFNglPrimitiveBoundingBoxPROC primitiveBoundingBox = null;
alias PFNglPrimitiveBoundingBoxARBPROC = fn void(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
PFNglPrimitiveBoundingBoxARBPROC primitiveBoundingBoxARB = null;
alias PFNglPrimitiveBoundingBoxEXTPROC = fn void(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
PFNglPrimitiveBoundingBoxEXTPROC primitiveBoundingBoxEXT = null;
alias PFNglPrimitiveBoundingBoxOESPROC = fn void(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
PFNglPrimitiveBoundingBoxOESPROC primitiveBoundingBoxOES = null;
alias PFNglPrimitiveRestartIndexPROC = fn void(GLuint index);
PFNglPrimitiveRestartIndexPROC primitiveRestartIndex = null;
alias PFNglPrimitiveRestartIndexNVPROC = fn void(GLuint index);
PFNglPrimitiveRestartIndexNVPROC primitiveRestartIndexNV = null;
alias PFNglPrimitiveRestartNVPROC = fn void();
PFNglPrimitiveRestartNVPROC primitiveRestartNV = null;
alias PFNglPrioritizeTexturesPROC = fn void(GLsizei n, GLuint* textures, GLfloat* priorities);
PFNglPrioritizeTexturesPROC prioritizeTextures = null;
alias PFNglPrioritizeTexturesEXTPROC = fn void(GLsizei n, GLuint* textures, GLclampf* priorities);
PFNglPrioritizeTexturesEXTPROC prioritizeTexturesEXT = null;
alias PFNglPrioritizeTexturesxOESPROC = fn void(GLsizei n, GLuint* textures, GLfixed* priorities);
PFNglPrioritizeTexturesxOESPROC prioritizeTexturesxOES = null;
alias PFNglProgramBinaryPROC = fn void(GLuint program, GLenum binaryFormat, void* binary, GLsizei length);
PFNglProgramBinaryPROC programBinary = null;
alias PFNglProgramBinaryOESPROC = fn void(GLuint program, GLenum binaryFormat, void* binary, GLint length);
PFNglProgramBinaryOESPROC programBinaryOES = null;
alias PFNglProgramBufferParametersIivNVPROC = fn void(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLint* params);
PFNglProgramBufferParametersIivNVPROC programBufferParametersIivNV = null;
alias PFNglProgramBufferParametersIuivNVPROC = fn void(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLuint* params);
PFNglProgramBufferParametersIuivNVPROC programBufferParametersIuivNV = null;
alias PFNglProgramBufferParametersfvNVPROC = fn void(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLfloat* params);
PFNglProgramBufferParametersfvNVPROC programBufferParametersfvNV = null;
alias PFNglProgramEnvParameter4dARBPROC = fn void(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglProgramEnvParameter4dARBPROC programEnvParameter4dARB = null;
alias PFNglProgramEnvParameter4dvARBPROC = fn void(GLenum target, GLuint index, GLdouble* params);
PFNglProgramEnvParameter4dvARBPROC programEnvParameter4dvARB = null;
alias PFNglProgramEnvParameter4fARBPROC = fn void(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglProgramEnvParameter4fARBPROC programEnvParameter4fARB = null;
alias PFNglProgramEnvParameter4fvARBPROC = fn void(GLenum target, GLuint index, GLfloat* params);
PFNglProgramEnvParameter4fvARBPROC programEnvParameter4fvARB = null;
alias PFNglProgramEnvParameterI4iNVPROC = fn void(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
PFNglProgramEnvParameterI4iNVPROC programEnvParameterI4iNV = null;
alias PFNglProgramEnvParameterI4ivNVPROC = fn void(GLenum target, GLuint index, GLint* params);
PFNglProgramEnvParameterI4ivNVPROC programEnvParameterI4ivNV = null;
alias PFNglProgramEnvParameterI4uiNVPROC = fn void(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
PFNglProgramEnvParameterI4uiNVPROC programEnvParameterI4uiNV = null;
alias PFNglProgramEnvParameterI4uivNVPROC = fn void(GLenum target, GLuint index, GLuint* params);
PFNglProgramEnvParameterI4uivNVPROC programEnvParameterI4uivNV = null;
alias PFNglProgramEnvParameters4fvEXTPROC = fn void(GLenum target, GLuint index, GLsizei count, GLfloat* params);
PFNglProgramEnvParameters4fvEXTPROC programEnvParameters4fvEXT = null;
alias PFNglProgramEnvParametersI4ivNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLint* params);
PFNglProgramEnvParametersI4ivNVPROC programEnvParametersI4ivNV = null;
alias PFNglProgramEnvParametersI4uivNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLuint* params);
PFNglProgramEnvParametersI4uivNVPROC programEnvParametersI4uivNV = null;
alias PFNglProgramLocalParameter4dARBPROC = fn void(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglProgramLocalParameter4dARBPROC programLocalParameter4dARB = null;
alias PFNglProgramLocalParameter4dvARBPROC = fn void(GLenum target, GLuint index, GLdouble* params);
PFNglProgramLocalParameter4dvARBPROC programLocalParameter4dvARB = null;
alias PFNglProgramLocalParameter4fARBPROC = fn void(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglProgramLocalParameter4fARBPROC programLocalParameter4fARB = null;
alias PFNglProgramLocalParameter4fvARBPROC = fn void(GLenum target, GLuint index, GLfloat* params);
PFNglProgramLocalParameter4fvARBPROC programLocalParameter4fvARB = null;
alias PFNglProgramLocalParameterI4iNVPROC = fn void(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
PFNglProgramLocalParameterI4iNVPROC programLocalParameterI4iNV = null;
alias PFNglProgramLocalParameterI4ivNVPROC = fn void(GLenum target, GLuint index, GLint* params);
PFNglProgramLocalParameterI4ivNVPROC programLocalParameterI4ivNV = null;
alias PFNglProgramLocalParameterI4uiNVPROC = fn void(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
PFNglProgramLocalParameterI4uiNVPROC programLocalParameterI4uiNV = null;
alias PFNglProgramLocalParameterI4uivNVPROC = fn void(GLenum target, GLuint index, GLuint* params);
PFNglProgramLocalParameterI4uivNVPROC programLocalParameterI4uivNV = null;
alias PFNglProgramLocalParameters4fvEXTPROC = fn void(GLenum target, GLuint index, GLsizei count, GLfloat* params);
PFNglProgramLocalParameters4fvEXTPROC programLocalParameters4fvEXT = null;
alias PFNglProgramLocalParametersI4ivNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLint* params);
PFNglProgramLocalParametersI4ivNVPROC programLocalParametersI4ivNV = null;
alias PFNglProgramLocalParametersI4uivNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLuint* params);
PFNglProgramLocalParametersI4uivNVPROC programLocalParametersI4uivNV = null;
alias PFNglProgramNamedParameter4dNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglProgramNamedParameter4dNVPROC programNamedParameter4dNV = null;
alias PFNglProgramNamedParameter4dvNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLdouble* v);
PFNglProgramNamedParameter4dvNVPROC programNamedParameter4dvNV = null;
alias PFNglProgramNamedParameter4fNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglProgramNamedParameter4fNVPROC programNamedParameter4fNV = null;
alias PFNglProgramNamedParameter4fvNVPROC = fn void(GLuint id, GLsizei len, GLubyte* name, GLfloat* v);
PFNglProgramNamedParameter4fvNVPROC programNamedParameter4fvNV = null;
alias PFNglProgramParameter4dNVPROC = fn void(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglProgramParameter4dNVPROC programParameter4dNV = null;
alias PFNglProgramParameter4dvNVPROC = fn void(GLenum target, GLuint index, GLdouble* v);
PFNglProgramParameter4dvNVPROC programParameter4dvNV = null;
alias PFNglProgramParameter4fNVPROC = fn void(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglProgramParameter4fNVPROC programParameter4fNV = null;
alias PFNglProgramParameter4fvNVPROC = fn void(GLenum target, GLuint index, GLfloat* v);
PFNglProgramParameter4fvNVPROC programParameter4fvNV = null;
alias PFNglProgramParameteriPROC = fn void(GLuint program, GLenum pname, GLint value);
PFNglProgramParameteriPROC programParameteri = null;
alias PFNglProgramParameteriARBPROC = fn void(GLuint program, GLenum pname, GLint value);
PFNglProgramParameteriARBPROC programParameteriARB = null;
alias PFNglProgramParameteriEXTPROC = fn void(GLuint program, GLenum pname, GLint value);
PFNglProgramParameteriEXTPROC programParameteriEXT = null;
alias PFNglProgramParameters4dvNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLdouble* v);
PFNglProgramParameters4dvNVPROC programParameters4dvNV = null;
alias PFNglProgramParameters4fvNVPROC = fn void(GLenum target, GLuint index, GLsizei count, GLfloat* v);
PFNglProgramParameters4fvNVPROC programParameters4fvNV = null;
alias PFNglProgramPathFragmentInputGenNVPROC = fn void(GLuint program, GLint location, GLenum genMode, GLint components, GLfloat* coeffs);
PFNglProgramPathFragmentInputGenNVPROC programPathFragmentInputGenNV = null;
alias PFNglProgramStringARBPROC = fn void(GLenum target, GLenum format, GLsizei len, void* string);
PFNglProgramStringARBPROC programStringARB = null;
alias PFNglProgramSubroutineParametersuivNVPROC = fn void(GLenum target, GLsizei count, GLuint* params);
PFNglProgramSubroutineParametersuivNVPROC programSubroutineParametersuivNV = null;
alias PFNglProgramUniform1dPROC = fn void(GLuint program, GLint location, GLdouble v0);
PFNglProgramUniform1dPROC programUniform1d = null;
alias PFNglProgramUniform1dEXTPROC = fn void(GLuint program, GLint location, GLdouble x);
PFNglProgramUniform1dEXTPROC programUniform1dEXT = null;
alias PFNglProgramUniform1dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform1dvPROC programUniform1dv = null;
alias PFNglProgramUniform1dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform1dvEXTPROC programUniform1dvEXT = null;
alias PFNglProgramUniform1fPROC = fn void(GLuint program, GLint location, GLfloat v0);
PFNglProgramUniform1fPROC programUniform1f = null;
alias PFNglProgramUniform1fEXTPROC = fn void(GLuint program, GLint location, GLfloat v0);
PFNglProgramUniform1fEXTPROC programUniform1fEXT = null;
alias PFNglProgramUniform1fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform1fvPROC programUniform1fv = null;
alias PFNglProgramUniform1fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform1fvEXTPROC programUniform1fvEXT = null;
alias PFNglProgramUniform1iPROC = fn void(GLuint program, GLint location, GLint v0);
PFNglProgramUniform1iPROC programUniform1i = null;
alias PFNglProgramUniform1i64ARBPROC = fn void(GLuint program, GLint location, GLint64 x);
PFNglProgramUniform1i64ARBPROC programUniform1i64ARB = null;
alias PFNglProgramUniform1i64NVPROC = fn void(GLuint program, GLint location, GLint64EXT x);
PFNglProgramUniform1i64NVPROC programUniform1i64NV = null;
alias PFNglProgramUniform1i64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64* value);
PFNglProgramUniform1i64vARBPROC programUniform1i64vARB = null;
alias PFNglProgramUniform1i64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64EXT* value);
PFNglProgramUniform1i64vNVPROC programUniform1i64vNV = null;
alias PFNglProgramUniform1iEXTPROC = fn void(GLuint program, GLint location, GLint v0);
PFNglProgramUniform1iEXTPROC programUniform1iEXT = null;
alias PFNglProgramUniform1ivPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform1ivPROC programUniform1iv = null;
alias PFNglProgramUniform1ivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform1ivEXTPROC programUniform1ivEXT = null;
alias PFNglProgramUniform1uiPROC = fn void(GLuint program, GLint location, GLuint v0);
PFNglProgramUniform1uiPROC programUniform1ui = null;
alias PFNglProgramUniform1ui64ARBPROC = fn void(GLuint program, GLint location, GLuint64 x);
PFNglProgramUniform1ui64ARBPROC programUniform1ui64ARB = null;
alias PFNglProgramUniform1ui64NVPROC = fn void(GLuint program, GLint location, GLuint64EXT x);
PFNglProgramUniform1ui64NVPROC programUniform1ui64NV = null;
alias PFNglProgramUniform1ui64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* value);
PFNglProgramUniform1ui64vARBPROC programUniform1ui64vARB = null;
alias PFNglProgramUniform1ui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64EXT* value);
PFNglProgramUniform1ui64vNVPROC programUniform1ui64vNV = null;
alias PFNglProgramUniform1uiEXTPROC = fn void(GLuint program, GLint location, GLuint v0);
PFNglProgramUniform1uiEXTPROC programUniform1uiEXT = null;
alias PFNglProgramUniform1uivPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform1uivPROC programUniform1uiv = null;
alias PFNglProgramUniform1uivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform1uivEXTPROC programUniform1uivEXT = null;
alias PFNglProgramUniform2dPROC = fn void(GLuint program, GLint location, GLdouble v0, GLdouble v1);
PFNglProgramUniform2dPROC programUniform2d = null;
alias PFNglProgramUniform2dEXTPROC = fn void(GLuint program, GLint location, GLdouble x, GLdouble y);
PFNglProgramUniform2dEXTPROC programUniform2dEXT = null;
alias PFNglProgramUniform2dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform2dvPROC programUniform2dv = null;
alias PFNglProgramUniform2dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform2dvEXTPROC programUniform2dvEXT = null;
alias PFNglProgramUniform2fPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1);
PFNglProgramUniform2fPROC programUniform2f = null;
alias PFNglProgramUniform2fEXTPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1);
PFNglProgramUniform2fEXTPROC programUniform2fEXT = null;
alias PFNglProgramUniform2fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform2fvPROC programUniform2fv = null;
alias PFNglProgramUniform2fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform2fvEXTPROC programUniform2fvEXT = null;
alias PFNglProgramUniform2iPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1);
PFNglProgramUniform2iPROC programUniform2i = null;
alias PFNglProgramUniform2i64ARBPROC = fn void(GLuint program, GLint location, GLint64 x, GLint64 y);
PFNglProgramUniform2i64ARBPROC programUniform2i64ARB = null;
alias PFNglProgramUniform2i64NVPROC = fn void(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
PFNglProgramUniform2i64NVPROC programUniform2i64NV = null;
alias PFNglProgramUniform2i64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64* value);
PFNglProgramUniform2i64vARBPROC programUniform2i64vARB = null;
alias PFNglProgramUniform2i64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64EXT* value);
PFNglProgramUniform2i64vNVPROC programUniform2i64vNV = null;
alias PFNglProgramUniform2iEXTPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1);
PFNglProgramUniform2iEXTPROC programUniform2iEXT = null;
alias PFNglProgramUniform2ivPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform2ivPROC programUniform2iv = null;
alias PFNglProgramUniform2ivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform2ivEXTPROC programUniform2ivEXT = null;
alias PFNglProgramUniform2uiPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1);
PFNglProgramUniform2uiPROC programUniform2ui = null;
alias PFNglProgramUniform2ui64ARBPROC = fn void(GLuint program, GLint location, GLuint64 x, GLuint64 y);
PFNglProgramUniform2ui64ARBPROC programUniform2ui64ARB = null;
alias PFNglProgramUniform2ui64NVPROC = fn void(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
PFNglProgramUniform2ui64NVPROC programUniform2ui64NV = null;
alias PFNglProgramUniform2ui64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* value);
PFNglProgramUniform2ui64vARBPROC programUniform2ui64vARB = null;
alias PFNglProgramUniform2ui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64EXT* value);
PFNglProgramUniform2ui64vNVPROC programUniform2ui64vNV = null;
alias PFNglProgramUniform2uiEXTPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1);
PFNglProgramUniform2uiEXTPROC programUniform2uiEXT = null;
alias PFNglProgramUniform2uivPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform2uivPROC programUniform2uiv = null;
alias PFNglProgramUniform2uivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform2uivEXTPROC programUniform2uivEXT = null;
alias PFNglProgramUniform3dPROC = fn void(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
PFNglProgramUniform3dPROC programUniform3d = null;
alias PFNglProgramUniform3dEXTPROC = fn void(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
PFNglProgramUniform3dEXTPROC programUniform3dEXT = null;
alias PFNglProgramUniform3dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform3dvPROC programUniform3dv = null;
alias PFNglProgramUniform3dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform3dvEXTPROC programUniform3dvEXT = null;
alias PFNglProgramUniform3fPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
PFNglProgramUniform3fPROC programUniform3f = null;
alias PFNglProgramUniform3fEXTPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
PFNglProgramUniform3fEXTPROC programUniform3fEXT = null;
alias PFNglProgramUniform3fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform3fvPROC programUniform3fv = null;
alias PFNglProgramUniform3fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform3fvEXTPROC programUniform3fvEXT = null;
alias PFNglProgramUniform3iPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
PFNglProgramUniform3iPROC programUniform3i = null;
alias PFNglProgramUniform3i64ARBPROC = fn void(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
PFNglProgramUniform3i64ARBPROC programUniform3i64ARB = null;
alias PFNglProgramUniform3i64NVPROC = fn void(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
PFNglProgramUniform3i64NVPROC programUniform3i64NV = null;
alias PFNglProgramUniform3i64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64* value);
PFNglProgramUniform3i64vARBPROC programUniform3i64vARB = null;
alias PFNglProgramUniform3i64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64EXT* value);
PFNglProgramUniform3i64vNVPROC programUniform3i64vNV = null;
alias PFNglProgramUniform3iEXTPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
PFNglProgramUniform3iEXTPROC programUniform3iEXT = null;
alias PFNglProgramUniform3ivPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform3ivPROC programUniform3iv = null;
alias PFNglProgramUniform3ivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform3ivEXTPROC programUniform3ivEXT = null;
alias PFNglProgramUniform3uiPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
PFNglProgramUniform3uiPROC programUniform3ui = null;
alias PFNglProgramUniform3ui64ARBPROC = fn void(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
PFNglProgramUniform3ui64ARBPROC programUniform3ui64ARB = null;
alias PFNglProgramUniform3ui64NVPROC = fn void(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
PFNglProgramUniform3ui64NVPROC programUniform3ui64NV = null;
alias PFNglProgramUniform3ui64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* value);
PFNglProgramUniform3ui64vARBPROC programUniform3ui64vARB = null;
alias PFNglProgramUniform3ui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64EXT* value);
PFNglProgramUniform3ui64vNVPROC programUniform3ui64vNV = null;
alias PFNglProgramUniform3uiEXTPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
PFNglProgramUniform3uiEXTPROC programUniform3uiEXT = null;
alias PFNglProgramUniform3uivPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform3uivPROC programUniform3uiv = null;
alias PFNglProgramUniform3uivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform3uivEXTPROC programUniform3uivEXT = null;
alias PFNglProgramUniform4dPROC = fn void(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
PFNglProgramUniform4dPROC programUniform4d = null;
alias PFNglProgramUniform4dEXTPROC = fn void(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglProgramUniform4dEXTPROC programUniform4dEXT = null;
alias PFNglProgramUniform4dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform4dvPROC programUniform4dv = null;
alias PFNglProgramUniform4dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLdouble* value);
PFNglProgramUniform4dvEXTPROC programUniform4dvEXT = null;
alias PFNglProgramUniform4fPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
PFNglProgramUniform4fPROC programUniform4f = null;
alias PFNglProgramUniform4fEXTPROC = fn void(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
PFNglProgramUniform4fEXTPROC programUniform4fEXT = null;
alias PFNglProgramUniform4fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform4fvPROC programUniform4fv = null;
alias PFNglProgramUniform4fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLfloat* value);
PFNglProgramUniform4fvEXTPROC programUniform4fvEXT = null;
alias PFNglProgramUniform4iPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
PFNglProgramUniform4iPROC programUniform4i = null;
alias PFNglProgramUniform4i64ARBPROC = fn void(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
PFNglProgramUniform4i64ARBPROC programUniform4i64ARB = null;
alias PFNglProgramUniform4i64NVPROC = fn void(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
PFNglProgramUniform4i64NVPROC programUniform4i64NV = null;
alias PFNglProgramUniform4i64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64* value);
PFNglProgramUniform4i64vARBPROC programUniform4i64vARB = null;
alias PFNglProgramUniform4i64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLint64EXT* value);
PFNglProgramUniform4i64vNVPROC programUniform4i64vNV = null;
alias PFNglProgramUniform4iEXTPROC = fn void(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
PFNglProgramUniform4iEXTPROC programUniform4iEXT = null;
alias PFNglProgramUniform4ivPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform4ivPROC programUniform4iv = null;
alias PFNglProgramUniform4ivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLint* value);
PFNglProgramUniform4ivEXTPROC programUniform4ivEXT = null;
alias PFNglProgramUniform4uiPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
PFNglProgramUniform4uiPROC programUniform4ui = null;
alias PFNglProgramUniform4ui64ARBPROC = fn void(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
PFNglProgramUniform4ui64ARBPROC programUniform4ui64ARB = null;
alias PFNglProgramUniform4ui64NVPROC = fn void(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
PFNglProgramUniform4ui64NVPROC programUniform4ui64NV = null;
alias PFNglProgramUniform4ui64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* value);
PFNglProgramUniform4ui64vARBPROC programUniform4ui64vARB = null;
alias PFNglProgramUniform4ui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64EXT* value);
PFNglProgramUniform4ui64vNVPROC programUniform4ui64vNV = null;
alias PFNglProgramUniform4uiEXTPROC = fn void(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
PFNglProgramUniform4uiEXTPROC programUniform4uiEXT = null;
alias PFNglProgramUniform4uivPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform4uivPROC programUniform4uiv = null;
alias PFNglProgramUniform4uivEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint* value);
PFNglProgramUniform4uivEXTPROC programUniform4uivEXT = null;
alias PFNglProgramUniformHandleui64ARBPROC = fn void(GLuint program, GLint location, GLuint64 value);
PFNglProgramUniformHandleui64ARBPROC programUniformHandleui64ARB = null;
alias PFNglProgramUniformHandleui64IMGPROC = fn void(GLuint program, GLint location, GLuint64 value);
PFNglProgramUniformHandleui64IMGPROC programUniformHandleui64IMG = null;
alias PFNglProgramUniformHandleui64NVPROC = fn void(GLuint program, GLint location, GLuint64 value);
PFNglProgramUniformHandleui64NVPROC programUniformHandleui64NV = null;
alias PFNglProgramUniformHandleui64vARBPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* values);
PFNglProgramUniformHandleui64vARBPROC programUniformHandleui64vARB = null;
alias PFNglProgramUniformHandleui64vIMGPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* values);
PFNglProgramUniformHandleui64vIMGPROC programUniformHandleui64vIMG = null;
alias PFNglProgramUniformHandleui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64* values);
PFNglProgramUniformHandleui64vNVPROC programUniformHandleui64vNV = null;
alias PFNglProgramUniformMatrix2dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2dvPROC programUniformMatrix2dv = null;
alias PFNglProgramUniformMatrix2dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2dvEXTPROC programUniformMatrix2dvEXT = null;
alias PFNglProgramUniformMatrix2fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2fvPROC programUniformMatrix2fv = null;
alias PFNglProgramUniformMatrix2fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2fvEXTPROC programUniformMatrix2fvEXT = null;
alias PFNglProgramUniformMatrix2x3dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2x3dvPROC programUniformMatrix2x3dv = null;
alias PFNglProgramUniformMatrix2x3dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2x3dvEXTPROC programUniformMatrix2x3dvEXT = null;
alias PFNglProgramUniformMatrix2x3fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2x3fvPROC programUniformMatrix2x3fv = null;
alias PFNglProgramUniformMatrix2x3fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2x3fvEXTPROC programUniformMatrix2x3fvEXT = null;
alias PFNglProgramUniformMatrix2x4dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2x4dvPROC programUniformMatrix2x4dv = null;
alias PFNglProgramUniformMatrix2x4dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix2x4dvEXTPROC programUniformMatrix2x4dvEXT = null;
alias PFNglProgramUniformMatrix2x4fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2x4fvPROC programUniformMatrix2x4fv = null;
alias PFNglProgramUniformMatrix2x4fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix2x4fvEXTPROC programUniformMatrix2x4fvEXT = null;
alias PFNglProgramUniformMatrix3dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3dvPROC programUniformMatrix3dv = null;
alias PFNglProgramUniformMatrix3dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3dvEXTPROC programUniformMatrix3dvEXT = null;
alias PFNglProgramUniformMatrix3fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3fvPROC programUniformMatrix3fv = null;
alias PFNglProgramUniformMatrix3fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3fvEXTPROC programUniformMatrix3fvEXT = null;
alias PFNglProgramUniformMatrix3x2dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3x2dvPROC programUniformMatrix3x2dv = null;
alias PFNglProgramUniformMatrix3x2dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3x2dvEXTPROC programUniformMatrix3x2dvEXT = null;
alias PFNglProgramUniformMatrix3x2fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3x2fvPROC programUniformMatrix3x2fv = null;
alias PFNglProgramUniformMatrix3x2fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3x2fvEXTPROC programUniformMatrix3x2fvEXT = null;
alias PFNglProgramUniformMatrix3x4dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3x4dvPROC programUniformMatrix3x4dv = null;
alias PFNglProgramUniformMatrix3x4dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix3x4dvEXTPROC programUniformMatrix3x4dvEXT = null;
alias PFNglProgramUniformMatrix3x4fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3x4fvPROC programUniformMatrix3x4fv = null;
alias PFNglProgramUniformMatrix3x4fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix3x4fvEXTPROC programUniformMatrix3x4fvEXT = null;
alias PFNglProgramUniformMatrix4dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4dvPROC programUniformMatrix4dv = null;
alias PFNglProgramUniformMatrix4dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4dvEXTPROC programUniformMatrix4dvEXT = null;
alias PFNglProgramUniformMatrix4fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4fvPROC programUniformMatrix4fv = null;
alias PFNglProgramUniformMatrix4fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4fvEXTPROC programUniformMatrix4fvEXT = null;
alias PFNglProgramUniformMatrix4x2dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4x2dvPROC programUniformMatrix4x2dv = null;
alias PFNglProgramUniformMatrix4x2dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4x2dvEXTPROC programUniformMatrix4x2dvEXT = null;
alias PFNglProgramUniformMatrix4x2fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4x2fvPROC programUniformMatrix4x2fv = null;
alias PFNglProgramUniformMatrix4x2fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4x2fvEXTPROC programUniformMatrix4x2fvEXT = null;
alias PFNglProgramUniformMatrix4x3dvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4x3dvPROC programUniformMatrix4x3dv = null;
alias PFNglProgramUniformMatrix4x3dvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglProgramUniformMatrix4x3dvEXTPROC programUniformMatrix4x3dvEXT = null;
alias PFNglProgramUniformMatrix4x3fvPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4x3fvPROC programUniformMatrix4x3fv = null;
alias PFNglProgramUniformMatrix4x3fvEXTPROC = fn void(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglProgramUniformMatrix4x3fvEXTPROC programUniformMatrix4x3fvEXT = null;
alias PFNglProgramUniformui64NVPROC = fn void(GLuint program, GLint location, GLuint64EXT value);
PFNglProgramUniformui64NVPROC programUniformui64NV = null;
alias PFNglProgramUniformui64vNVPROC = fn void(GLuint program, GLint location, GLsizei count, GLuint64EXT* value);
PFNglProgramUniformui64vNVPROC programUniformui64vNV = null;
alias PFNglProgramVertexLimitNVPROC = fn void(GLenum target, GLint limit);
PFNglProgramVertexLimitNVPROC programVertexLimitNV = null;
alias PFNglProvokingVertexPROC = fn void(GLenum mode);
PFNglProvokingVertexPROC provokingVertex = null;
alias PFNglProvokingVertexEXTPROC = fn void(GLenum mode);
PFNglProvokingVertexEXTPROC provokingVertexEXT = null;
alias PFNglPushAttribPROC = fn void(GLbitfield mask);
PFNglPushAttribPROC pushAttrib = null;
alias PFNglPushClientAttribPROC = fn void(GLbitfield mask);
PFNglPushClientAttribPROC pushClientAttrib = null;
alias PFNglPushClientAttribDefaultEXTPROC = fn void(GLbitfield mask);
PFNglPushClientAttribDefaultEXTPROC pushClientAttribDefaultEXT = null;
alias PFNglPushDebugGroupPROC = fn void(GLenum source, GLuint id, GLsizei length, GLchar* message);
PFNglPushDebugGroupPROC pushDebugGroup = null;
alias PFNglPushDebugGroupKHRPROC = fn void(GLenum source, GLuint id, GLsizei length, GLchar* message);
PFNglPushDebugGroupKHRPROC pushDebugGroupKHR = null;
alias PFNglPushGroupMarkerEXTPROC = fn void(GLsizei length, GLchar* marker);
PFNglPushGroupMarkerEXTPROC pushGroupMarkerEXT = null;
alias PFNglPushMatrixPROC = fn void();
PFNglPushMatrixPROC pushMatrix = null;
alias PFNglPushNamePROC = fn void(GLuint name);
PFNglPushNamePROC pushName = null;
alias PFNglQueryCounterPROC = fn void(GLuint id, GLenum target);
PFNglQueryCounterPROC queryCounter = null;
alias PFNglQueryCounterEXTPROC = fn void(GLuint id, GLenum target);
PFNglQueryCounterEXTPROC queryCounterEXT = null;
alias PFNglQueryMatrixxOESPROC = fn GLbitfield(GLfixed* mantissa, GLint* exponent);
PFNglQueryMatrixxOESPROC queryMatrixxOES = null;
alias PFNglQueryObjectParameteruiAMDPROC = fn void(GLenum target, GLuint id, GLenum pname, GLuint param);
PFNglQueryObjectParameteruiAMDPROC queryObjectParameteruiAMD = null;
alias PFNglQueryResourceNVPROC = fn GLint(GLenum queryType, GLint tagId, GLuint count, GLint* buffer);
PFNglQueryResourceNVPROC queryResourceNV = null;
alias PFNglQueryResourceTagNVPROC = fn void(GLint tagId, GLchar* tagString);
PFNglQueryResourceTagNVPROC queryResourceTagNV = null;
alias PFNglRasterPos2dPROC = fn void(GLdouble x, GLdouble y);
PFNglRasterPos2dPROC rasterPos2d = null;
alias PFNglRasterPos2dvPROC = fn void(GLdouble* v);
PFNglRasterPos2dvPROC rasterPos2dv = null;
alias PFNglRasterPos2fPROC = fn void(GLfloat x, GLfloat y);
PFNglRasterPos2fPROC rasterPos2f = null;
alias PFNglRasterPos2fvPROC = fn void(GLfloat* v);
PFNglRasterPos2fvPROC rasterPos2fv = null;
alias PFNglRasterPos2iPROC = fn void(GLint x, GLint y);
PFNglRasterPos2iPROC rasterPos2i = null;
alias PFNglRasterPos2ivPROC = fn void(GLint* v);
PFNglRasterPos2ivPROC rasterPos2iv = null;
alias PFNglRasterPos2sPROC = fn void(GLshort x, GLshort y);
PFNglRasterPos2sPROC rasterPos2s = null;
alias PFNglRasterPos2svPROC = fn void(GLshort* v);
PFNglRasterPos2svPROC rasterPos2sv = null;
alias PFNglRasterPos2xOESPROC = fn void(GLfixed x, GLfixed y);
PFNglRasterPos2xOESPROC rasterPos2xOES = null;
alias PFNglRasterPos2xvOESPROC = fn void(GLfixed* coords);
PFNglRasterPos2xvOESPROC rasterPos2xvOES = null;
alias PFNglRasterPos3dPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglRasterPos3dPROC rasterPos3d = null;
alias PFNglRasterPos3dvPROC = fn void(GLdouble* v);
PFNglRasterPos3dvPROC rasterPos3dv = null;
alias PFNglRasterPos3fPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglRasterPos3fPROC rasterPos3f = null;
alias PFNglRasterPos3fvPROC = fn void(GLfloat* v);
PFNglRasterPos3fvPROC rasterPos3fv = null;
alias PFNglRasterPos3iPROC = fn void(GLint x, GLint y, GLint z);
PFNglRasterPos3iPROC rasterPos3i = null;
alias PFNglRasterPos3ivPROC = fn void(GLint* v);
PFNglRasterPos3ivPROC rasterPos3iv = null;
alias PFNglRasterPos3sPROC = fn void(GLshort x, GLshort y, GLshort z);
PFNglRasterPos3sPROC rasterPos3s = null;
alias PFNglRasterPos3svPROC = fn void(GLshort* v);
PFNglRasterPos3svPROC rasterPos3sv = null;
alias PFNglRasterPos3xOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglRasterPos3xOESPROC rasterPos3xOES = null;
alias PFNglRasterPos3xvOESPROC = fn void(GLfixed* coords);
PFNglRasterPos3xvOESPROC rasterPos3xvOES = null;
alias PFNglRasterPos4dPROC = fn void(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglRasterPos4dPROC rasterPos4d = null;
alias PFNglRasterPos4dvPROC = fn void(GLdouble* v);
PFNglRasterPos4dvPROC rasterPos4dv = null;
alias PFNglRasterPos4fPROC = fn void(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglRasterPos4fPROC rasterPos4f = null;
alias PFNglRasterPos4fvPROC = fn void(GLfloat* v);
PFNglRasterPos4fvPROC rasterPos4fv = null;
alias PFNglRasterPos4iPROC = fn void(GLint x, GLint y, GLint z, GLint w);
PFNglRasterPos4iPROC rasterPos4i = null;
alias PFNglRasterPos4ivPROC = fn void(GLint* v);
PFNglRasterPos4ivPROC rasterPos4iv = null;
alias PFNglRasterPos4sPROC = fn void(GLshort x, GLshort y, GLshort z, GLshort w);
PFNglRasterPos4sPROC rasterPos4s = null;
alias PFNglRasterPos4svPROC = fn void(GLshort* v);
PFNglRasterPos4svPROC rasterPos4sv = null;
alias PFNglRasterPos4xOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
PFNglRasterPos4xOESPROC rasterPos4xOES = null;
alias PFNglRasterPos4xvOESPROC = fn void(GLfixed* coords);
PFNglRasterPos4xvOESPROC rasterPos4xvOES = null;
alias PFNglRasterSamplesEXTPROC = fn void(GLuint samples, GLboolean fixedsamplelocations);
PFNglRasterSamplesEXTPROC rasterSamplesEXT = null;
alias PFNglReadBufferPROC = fn void(GLenum src);
PFNglReadBufferPROC readBuffer = null;
alias PFNglReadBufferIndexedEXTPROC = fn void(GLenum src, GLint index);
PFNglReadBufferIndexedEXTPROC readBufferIndexedEXT = null;
alias PFNglReadBufferNVPROC = fn void(GLenum mode);
PFNglReadBufferNVPROC readBufferNV = null;
alias PFNglReadInstrumentsSGIXPROC = fn void(GLint marker);
PFNglReadInstrumentsSGIXPROC readInstrumentsSGIX = null;
alias PFNglReadPixelsPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglReadPixelsPROC readPixels = null;
alias PFNglReadnPixelsPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
PFNglReadnPixelsPROC readnPixels = null;
alias PFNglReadnPixelsARBPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
PFNglReadnPixelsARBPROC readnPixelsARB = null;
alias PFNglReadnPixelsEXTPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
PFNglReadnPixelsEXTPROC readnPixelsEXT = null;
alias PFNglReadnPixelsKHRPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
PFNglReadnPixelsKHRPROC readnPixelsKHR = null;
alias PFNglReleaseKeyedMutexWin32EXTPROC = fn GLboolean(GLuint memory, GLuint64 key);
PFNglReleaseKeyedMutexWin32EXTPROC releaseKeyedMutexWin32EXT = null;
alias PFNglRectdPROC = fn void(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
PFNglRectdPROC rectd = null;
alias PFNglRectdvPROC = fn void(GLdouble* v1, GLdouble* v2);
PFNglRectdvPROC rectdv = null;
alias PFNglRectfPROC = fn void(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
PFNglRectfPROC rectf = null;
alias PFNglRectfvPROC = fn void(GLfloat* v1, GLfloat* v2);
PFNglRectfvPROC rectfv = null;
alias PFNglRectiPROC = fn void(GLint x1, GLint y1, GLint x2, GLint y2);
PFNglRectiPROC recti = null;
alias PFNglRectivPROC = fn void(GLint* v1, GLint* v2);
PFNglRectivPROC rectiv = null;
alias PFNglRectsPROC = fn void(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
PFNglRectsPROC rects = null;
alias PFNglRectsvPROC = fn void(GLshort* v1, GLshort* v2);
PFNglRectsvPROC rectsv = null;
alias PFNglRectxOESPROC = fn void(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
PFNglRectxOESPROC rectxOES = null;
alias PFNglRectxvOESPROC = fn void(GLfixed* v1, GLfixed* v2);
PFNglRectxvOESPROC rectxvOES = null;
alias PFNglReferencePlaneSGIXPROC = fn void(GLdouble* equation);
PFNglReferencePlaneSGIXPROC referencePlaneSGIX = null;
alias PFNglReleaseShaderCompilerPROC = fn void();
PFNglReleaseShaderCompilerPROC releaseShaderCompiler = null;
alias PFNglRenderGpuMaskNVPROC = fn void(GLbitfield mask);
PFNglRenderGpuMaskNVPROC renderGpuMaskNV = null;
alias PFNglRenderModePROC = fn GLint(GLenum mode);
PFNglRenderModePROC renderMode = null;
alias PFNglRenderbufferStoragePROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStoragePROC renderbufferStorage = null;
alias PFNglRenderbufferStorageEXTPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageEXTPROC renderbufferStorageEXT = null;
alias PFNglRenderbufferStorageMultisamplePROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisamplePROC renderbufferStorageMultisample = null;
alias PFNglRenderbufferStorageMultisampleANGLEPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleANGLEPROC renderbufferStorageMultisampleANGLE = null;
alias PFNglRenderbufferStorageMultisampleAPPLEPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleAPPLEPROC renderbufferStorageMultisampleAPPLE = null;
alias PFNglRenderbufferStorageMultisampleAdvancedAMDPROC = fn void(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleAdvancedAMDPROC renderbufferStorageMultisampleAdvancedAMD = null;
alias PFNglRenderbufferStorageMultisampleCoverageNVPROC = fn void(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleCoverageNVPROC renderbufferStorageMultisampleCoverageNV = null;
alias PFNglRenderbufferStorageMultisampleEXTPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleEXTPROC renderbufferStorageMultisampleEXT = null;
alias PFNglRenderbufferStorageMultisampleIMGPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleIMGPROC renderbufferStorageMultisampleIMG = null;
alias PFNglRenderbufferStorageMultisampleNVPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageMultisampleNVPROC renderbufferStorageMultisampleNV = null;
alias PFNglRenderbufferStorageOESPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
PFNglRenderbufferStorageOESPROC renderbufferStorageOES = null;
alias PFNglReplacementCodePointerSUNPROC = fn void(GLenum type, GLsizei stride, void** pointer);
PFNglReplacementCodePointerSUNPROC replacementCodePointerSUN = null;
alias PFNglReplacementCodeubSUNPROC = fn void(GLubyte code);
PFNglReplacementCodeubSUNPROC replacementCodeubSUN = null;
alias PFNglReplacementCodeubvSUNPROC = fn void(GLubyte* code);
PFNglReplacementCodeubvSUNPROC replacementCodeubvSUN = null;
alias PFNglReplacementCodeuiColor3fVertex3fSUNPROC = fn void(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiColor3fVertex3fSUNPROC replacementCodeuiColor3fVertex3fSUN = null;
alias PFNglReplacementCodeuiColor3fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* c, GLfloat* v);
PFNglReplacementCodeuiColor3fVertex3fvSUNPROC replacementCodeuiColor3fVertex3fvSUN = null;
alias PFNglReplacementCodeuiColor4fNormal3fVertex3fSUNPROC = fn void(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiColor4fNormal3fVertex3fSUNPROC replacementCodeuiColor4fNormal3fVertex3fSUN = null;
alias PFNglReplacementCodeuiColor4fNormal3fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* c, GLfloat* n, GLfloat* v);
PFNglReplacementCodeuiColor4fNormal3fVertex3fvSUNPROC replacementCodeuiColor4fNormal3fVertex3fvSUN = null;
alias PFNglReplacementCodeuiColor4ubVertex3fSUNPROC = fn void(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiColor4ubVertex3fSUNPROC replacementCodeuiColor4ubVertex3fSUN = null;
alias PFNglReplacementCodeuiColor4ubVertex3fvSUNPROC = fn void(GLuint* rc, GLubyte* c, GLfloat* v);
PFNglReplacementCodeuiColor4ubVertex3fvSUNPROC replacementCodeuiColor4ubVertex3fvSUN = null;
alias PFNglReplacementCodeuiNormal3fVertex3fSUNPROC = fn void(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiNormal3fVertex3fSUNPROC replacementCodeuiNormal3fVertex3fSUN = null;
alias PFNglReplacementCodeuiNormal3fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* n, GLfloat* v);
PFNglReplacementCodeuiNormal3fVertex3fvSUNPROC replacementCodeuiNormal3fVertex3fvSUN = null;
alias PFNglReplacementCodeuiSUNPROC = fn void(GLuint code);
PFNglReplacementCodeuiSUNPROC replacementCodeuiSUN = null;
alias PFNglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPROC = fn void(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPROC replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = null;
alias PFNglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
PFNglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPROC replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = null;
alias PFNglReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPROC = fn void(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPROC replacementCodeuiTexCoord2fNormal3fVertex3fSUN = null;
alias PFNglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* tc, GLfloat* n, GLfloat* v);
PFNglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPROC replacementCodeuiTexCoord2fNormal3fVertex3fvSUN = null;
alias PFNglReplacementCodeuiTexCoord2fVertex3fSUNPROC = fn void(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiTexCoord2fVertex3fSUNPROC replacementCodeuiTexCoord2fVertex3fSUN = null;
alias PFNglReplacementCodeuiTexCoord2fVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* tc, GLfloat* v);
PFNglReplacementCodeuiTexCoord2fVertex3fvSUNPROC replacementCodeuiTexCoord2fVertex3fvSUN = null;
alias PFNglReplacementCodeuiVertex3fSUNPROC = fn void(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
PFNglReplacementCodeuiVertex3fSUNPROC replacementCodeuiVertex3fSUN = null;
alias PFNglReplacementCodeuiVertex3fvSUNPROC = fn void(GLuint* rc, GLfloat* v);
PFNglReplacementCodeuiVertex3fvSUNPROC replacementCodeuiVertex3fvSUN = null;
alias PFNglReplacementCodeuivSUNPROC = fn void(GLuint* code);
PFNglReplacementCodeuivSUNPROC replacementCodeuivSUN = null;
alias PFNglReplacementCodeusSUNPROC = fn void(GLushort code);
PFNglReplacementCodeusSUNPROC replacementCodeusSUN = null;
alias PFNglReplacementCodeusvSUNPROC = fn void(GLushort* code);
PFNglReplacementCodeusvSUNPROC replacementCodeusvSUN = null;
alias PFNglRequestResidentProgramsNVPROC = fn void(GLsizei n, GLuint* programs);
PFNglRequestResidentProgramsNVPROC requestResidentProgramsNV = null;
alias PFNglResetHistogramPROC = fn void(GLenum target);
PFNglResetHistogramPROC resetHistogram = null;
alias PFNglResetHistogramEXTPROC = fn void(GLenum target);
PFNglResetHistogramEXTPROC resetHistogramEXT = null;
alias PFNglResetMemoryObjectParameterNVPROC = fn void(GLuint memory, GLenum pname);
PFNglResetMemoryObjectParameterNVPROC resetMemoryObjectParameterNV = null;
alias PFNglResetMinmaxPROC = fn void(GLenum target);
PFNglResetMinmaxPROC resetMinmax = null;
alias PFNglResetMinmaxEXTPROC = fn void(GLenum target);
PFNglResetMinmaxEXTPROC resetMinmaxEXT = null;
alias PFNglResizeBuffersMESAPROC = fn void();
PFNglResizeBuffersMESAPROC resizeBuffersMESA = null;
alias PFNglResolveDepthValuesNVPROC = fn void();
PFNglResolveDepthValuesNVPROC resolveDepthValuesNV = null;
alias PFNglResolveMultisampleFramebufferAPPLEPROC = fn void();
PFNglResolveMultisampleFramebufferAPPLEPROC resolveMultisampleFramebufferAPPLE = null;
alias PFNglResumeTransformFeedbackPROC = fn void();
PFNglResumeTransformFeedbackPROC resumeTransformFeedback = null;
alias PFNglResumeTransformFeedbackNVPROC = fn void();
PFNglResumeTransformFeedbackNVPROC resumeTransformFeedbackNV = null;
alias PFNglRotatedPROC = fn void(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
PFNglRotatedPROC rotated = null;
alias PFNglRotatefPROC = fn void(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
PFNglRotatefPROC rotatef = null;
alias PFNglRotatexPROC = fn void(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
PFNglRotatexPROC rotatex = null;
alias PFNglRotatexOESPROC = fn void(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
PFNglRotatexOESPROC rotatexOES = null;
alias PFNglSampleCoveragePROC = fn void(GLfloat value, GLboolean invert);
PFNglSampleCoveragePROC sampleCoverage = null;
alias PFNglSampleCoverageARBPROC = fn void(GLfloat value, GLboolean invert);
PFNglSampleCoverageARBPROC sampleCoverageARB = null;
alias PFNglSampleCoveragexPROC = fn void(GLclampx value, GLboolean invert);
PFNglSampleCoveragexPROC sampleCoveragex = null;
alias PFNglSampleCoveragexOESPROC = fn void(GLclampx value, GLboolean invert);
PFNglSampleCoveragexOESPROC sampleCoveragexOES = null;
alias PFNglSampleMapATIPROC = fn void(GLuint dst, GLuint interp, GLenum swizzle);
PFNglSampleMapATIPROC sampleMapATI = null;
alias PFNglSampleMaskEXTPROC = fn void(GLclampf value, GLboolean invert);
PFNglSampleMaskEXTPROC sampleMaskEXT = null;
alias PFNglSampleMaskIndexedNVPROC = fn void(GLuint index, GLbitfield mask);
PFNglSampleMaskIndexedNVPROC sampleMaskIndexedNV = null;
alias PFNglSampleMaskSGISPROC = fn void(GLclampf value, GLboolean invert);
PFNglSampleMaskSGISPROC sampleMaskSGIS = null;
alias PFNglSampleMaskiPROC = fn void(GLuint maskNumber, GLbitfield mask);
PFNglSampleMaskiPROC sampleMaski = null;
alias PFNglSamplePatternEXTPROC = fn void(GLenum pattern);
PFNglSamplePatternEXTPROC samplePatternEXT = null;
alias PFNglSamplePatternSGISPROC = fn void(GLenum pattern);
PFNglSamplePatternSGISPROC samplePatternSGIS = null;
alias PFNglSamplerParameterIivPROC = fn void(GLuint sampler, GLenum pname, GLint* param);
PFNglSamplerParameterIivPROC samplerParameterIiv = null;
alias PFNglSamplerParameterIivEXTPROC = fn void(GLuint sampler, GLenum pname, GLint* param);
PFNglSamplerParameterIivEXTPROC samplerParameterIivEXT = null;
alias PFNglSamplerParameterIivOESPROC = fn void(GLuint sampler, GLenum pname, GLint* param);
PFNglSamplerParameterIivOESPROC samplerParameterIivOES = null;
alias PFNglSamplerParameterIuivPROC = fn void(GLuint sampler, GLenum pname, GLuint* param);
PFNglSamplerParameterIuivPROC samplerParameterIuiv = null;
alias PFNglSamplerParameterIuivEXTPROC = fn void(GLuint sampler, GLenum pname, GLuint* param);
PFNglSamplerParameterIuivEXTPROC samplerParameterIuivEXT = null;
alias PFNglSamplerParameterIuivOESPROC = fn void(GLuint sampler, GLenum pname, GLuint* param);
PFNglSamplerParameterIuivOESPROC samplerParameterIuivOES = null;
alias PFNglSamplerParameterfPROC = fn void(GLuint sampler, GLenum pname, GLfloat param);
PFNglSamplerParameterfPROC samplerParameterf = null;
alias PFNglSamplerParameterfvPROC = fn void(GLuint sampler, GLenum pname, GLfloat* param);
PFNglSamplerParameterfvPROC samplerParameterfv = null;
alias PFNglSamplerParameteriPROC = fn void(GLuint sampler, GLenum pname, GLint param);
PFNglSamplerParameteriPROC samplerParameteri = null;
alias PFNglSamplerParameterivPROC = fn void(GLuint sampler, GLenum pname, GLint* param);
PFNglSamplerParameterivPROC samplerParameteriv = null;
alias PFNglScaledPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglScaledPROC scaled = null;
alias PFNglScalefPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglScalefPROC scalef = null;
alias PFNglScalexPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglScalexPROC scalex = null;
alias PFNglScalexOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglScalexOESPROC scalexOES = null;
alias PFNglScissorPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height);
PFNglScissorPROC scissor = null;
alias PFNglScissorArrayvPROC = fn void(GLuint first, GLsizei count, GLint* v);
PFNglScissorArrayvPROC scissorArrayv = null;
alias PFNglScissorArrayvNVPROC = fn void(GLuint first, GLsizei count, GLint* v);
PFNglScissorArrayvNVPROC scissorArrayvNV = null;
alias PFNglScissorArrayvOESPROC = fn void(GLuint first, GLsizei count, GLint* v);
PFNglScissorArrayvOESPROC scissorArrayvOES = null;
alias PFNglScissorExclusiveArrayvNVPROC = fn void(GLuint first, GLsizei count, GLint* v);
PFNglScissorExclusiveArrayvNVPROC scissorExclusiveArrayvNV = null;
alias PFNglScissorExclusiveNVPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height);
PFNglScissorExclusiveNVPROC scissorExclusiveNV = null;
alias PFNglScissorIndexedPROC = fn void(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
PFNglScissorIndexedPROC scissorIndexed = null;
alias PFNglScissorIndexedNVPROC = fn void(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
PFNglScissorIndexedNVPROC scissorIndexedNV = null;
alias PFNglScissorIndexedOESPROC = fn void(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
PFNglScissorIndexedOESPROC scissorIndexedOES = null;
alias PFNglScissorIndexedvPROC = fn void(GLuint index, GLint* v);
PFNglScissorIndexedvPROC scissorIndexedv = null;
alias PFNglScissorIndexedvNVPROC = fn void(GLuint index, GLint* v);
PFNglScissorIndexedvNVPROC scissorIndexedvNV = null;
alias PFNglScissorIndexedvOESPROC = fn void(GLuint index, GLint* v);
PFNglScissorIndexedvOESPROC scissorIndexedvOES = null;
alias PFNglSecondaryColor3bPROC = fn void(GLbyte red, GLbyte green, GLbyte blue);
PFNglSecondaryColor3bPROC secondaryColor3b = null;
alias PFNglSecondaryColor3bEXTPROC = fn void(GLbyte red, GLbyte green, GLbyte blue);
PFNglSecondaryColor3bEXTPROC secondaryColor3bEXT = null;
alias PFNglSecondaryColor3bvPROC = fn void(GLbyte* v);
PFNglSecondaryColor3bvPROC secondaryColor3bv = null;
alias PFNglSecondaryColor3bvEXTPROC = fn void(GLbyte* v);
PFNglSecondaryColor3bvEXTPROC secondaryColor3bvEXT = null;
alias PFNglSecondaryColor3dPROC = fn void(GLdouble red, GLdouble green, GLdouble blue);
PFNglSecondaryColor3dPROC secondaryColor3d = null;
alias PFNglSecondaryColor3dEXTPROC = fn void(GLdouble red, GLdouble green, GLdouble blue);
PFNglSecondaryColor3dEXTPROC secondaryColor3dEXT = null;
alias PFNglSecondaryColor3dvPROC = fn void(GLdouble* v);
PFNglSecondaryColor3dvPROC secondaryColor3dv = null;
alias PFNglSecondaryColor3dvEXTPROC = fn void(GLdouble* v);
PFNglSecondaryColor3dvEXTPROC secondaryColor3dvEXT = null;
alias PFNglSecondaryColor3fPROC = fn void(GLfloat red, GLfloat green, GLfloat blue);
PFNglSecondaryColor3fPROC secondaryColor3f = null;
alias PFNglSecondaryColor3fEXTPROC = fn void(GLfloat red, GLfloat green, GLfloat blue);
PFNglSecondaryColor3fEXTPROC secondaryColor3fEXT = null;
alias PFNglSecondaryColor3fvPROC = fn void(GLfloat* v);
PFNglSecondaryColor3fvPROC secondaryColor3fv = null;
alias PFNglSecondaryColor3fvEXTPROC = fn void(GLfloat* v);
PFNglSecondaryColor3fvEXTPROC secondaryColor3fvEXT = null;
alias PFNglSecondaryColor3hNVPROC = fn void(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
PFNglSecondaryColor3hNVPROC secondaryColor3hNV = null;
alias PFNglSecondaryColor3hvNVPROC = fn void(GLhalfNV* v);
PFNglSecondaryColor3hvNVPROC secondaryColor3hvNV = null;
alias PFNglSecondaryColor3iPROC = fn void(GLint red, GLint green, GLint blue);
PFNglSecondaryColor3iPROC secondaryColor3i = null;
alias PFNglSecondaryColor3iEXTPROC = fn void(GLint red, GLint green, GLint blue);
PFNglSecondaryColor3iEXTPROC secondaryColor3iEXT = null;
alias PFNglSecondaryColor3ivPROC = fn void(GLint* v);
PFNglSecondaryColor3ivPROC secondaryColor3iv = null;
alias PFNglSecondaryColor3ivEXTPROC = fn void(GLint* v);
PFNglSecondaryColor3ivEXTPROC secondaryColor3ivEXT = null;
alias PFNglSecondaryColor3sPROC = fn void(GLshort red, GLshort green, GLshort blue);
PFNglSecondaryColor3sPROC secondaryColor3s = null;
alias PFNglSecondaryColor3sEXTPROC = fn void(GLshort red, GLshort green, GLshort blue);
PFNglSecondaryColor3sEXTPROC secondaryColor3sEXT = null;
alias PFNglSecondaryColor3svPROC = fn void(GLshort* v);
PFNglSecondaryColor3svPROC secondaryColor3sv = null;
alias PFNglSecondaryColor3svEXTPROC = fn void(GLshort* v);
PFNglSecondaryColor3svEXTPROC secondaryColor3svEXT = null;
alias PFNglSecondaryColor3ubPROC = fn void(GLubyte red, GLubyte green, GLubyte blue);
PFNglSecondaryColor3ubPROC secondaryColor3ub = null;
alias PFNglSecondaryColor3ubEXTPROC = fn void(GLubyte red, GLubyte green, GLubyte blue);
PFNglSecondaryColor3ubEXTPROC secondaryColor3ubEXT = null;
alias PFNglSecondaryColor3ubvPROC = fn void(GLubyte* v);
PFNglSecondaryColor3ubvPROC secondaryColor3ubv = null;
alias PFNglSecondaryColor3ubvEXTPROC = fn void(GLubyte* v);
PFNglSecondaryColor3ubvEXTPROC secondaryColor3ubvEXT = null;
alias PFNglSecondaryColor3uiPROC = fn void(GLuint red, GLuint green, GLuint blue);
PFNglSecondaryColor3uiPROC secondaryColor3ui = null;
alias PFNglSecondaryColor3uiEXTPROC = fn void(GLuint red, GLuint green, GLuint blue);
PFNglSecondaryColor3uiEXTPROC secondaryColor3uiEXT = null;
alias PFNglSecondaryColor3uivPROC = fn void(GLuint* v);
PFNglSecondaryColor3uivPROC secondaryColor3uiv = null;
alias PFNglSecondaryColor3uivEXTPROC = fn void(GLuint* v);
PFNglSecondaryColor3uivEXTPROC secondaryColor3uivEXT = null;
alias PFNglSecondaryColor3usPROC = fn void(GLushort red, GLushort green, GLushort blue);
PFNglSecondaryColor3usPROC secondaryColor3us = null;
alias PFNglSecondaryColor3usEXTPROC = fn void(GLushort red, GLushort green, GLushort blue);
PFNglSecondaryColor3usEXTPROC secondaryColor3usEXT = null;
alias PFNglSecondaryColor3usvPROC = fn void(GLushort* v);
PFNglSecondaryColor3usvPROC secondaryColor3usv = null;
alias PFNglSecondaryColor3usvEXTPROC = fn void(GLushort* v);
PFNglSecondaryColor3usvEXTPROC secondaryColor3usvEXT = null;
alias PFNglSecondaryColorFormatNVPROC = fn void(GLint size, GLenum type, GLsizei stride);
PFNglSecondaryColorFormatNVPROC secondaryColorFormatNV = null;
alias PFNglSecondaryColorP3uiPROC = fn void(GLenum type, GLuint color);
PFNglSecondaryColorP3uiPROC secondaryColorP3ui = null;
alias PFNglSecondaryColorP3uivPROC = fn void(GLenum type, GLuint* color);
PFNglSecondaryColorP3uivPROC secondaryColorP3uiv = null;
alias PFNglSecondaryColorPointerPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglSecondaryColorPointerPROC secondaryColorPointer = null;
alias PFNglSecondaryColorPointerEXTPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglSecondaryColorPointerEXTPROC secondaryColorPointerEXT = null;
alias PFNglSecondaryColorPointerListIBMPROC = fn void(GLint size, GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglSecondaryColorPointerListIBMPROC secondaryColorPointerListIBM = null;
alias PFNglSelectBufferPROC = fn void(GLsizei size, GLuint* buffer);
PFNglSelectBufferPROC selectBuffer = null;
alias PFNglSelectPerfMonitorCountersAMDPROC = fn void(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
PFNglSelectPerfMonitorCountersAMDPROC selectPerfMonitorCountersAMD = null;
alias PFNglSemaphoreParameterivNVPROC = fn void(GLuint semaphore, GLenum pname, GLint* params);
PFNglSemaphoreParameterivNVPROC semaphoreParameterivNV = null;
alias PFNglSemaphoreParameterui64vEXTPROC = fn void(GLuint semaphore, GLenum pname, GLuint64* params);
PFNglSemaphoreParameterui64vEXTPROC semaphoreParameterui64vEXT = null;
alias PFNglSeparableFilter2DPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, void* row, void* column);
PFNglSeparableFilter2DPROC separableFilter2D = null;
alias PFNglSeparableFilter2DEXTPROC = fn void(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, void* row, void* column);
PFNglSeparableFilter2DEXTPROC separableFilter2DEXT = null;
alias PFNglSetFenceAPPLEPROC = fn void(GLuint fence);
PFNglSetFenceAPPLEPROC setFenceAPPLE = null;
alias PFNglSetFenceNVPROC = fn void(GLuint fence, GLenum condition);
PFNglSetFenceNVPROC setFenceNV = null;
alias PFNglSetFragmentShaderConstantATIPROC = fn void(GLuint dst, GLfloat* value);
PFNglSetFragmentShaderConstantATIPROC setFragmentShaderConstantATI = null;
alias PFNglSetInvariantEXTPROC = fn void(GLuint id, GLenum type, void* addr);
PFNglSetInvariantEXTPROC setInvariantEXT = null;
alias PFNglSetLocalConstantEXTPROC = fn void(GLuint id, GLenum type, void* addr);
PFNglSetLocalConstantEXTPROC setLocalConstantEXT = null;
alias PFNglSetMultisamplefvAMDPROC = fn void(GLenum pname, GLuint index, GLfloat* val);
PFNglSetMultisamplefvAMDPROC setMultisamplefvAMD = null;
alias PFNglShadeModelPROC = fn void(GLenum mode);
PFNglShadeModelPROC shadeModel = null;
alias PFNglShaderBinaryPROC = fn void(GLsizei count, GLuint* shaders, GLenum binaryFormat, void* binary, GLsizei length);
PFNglShaderBinaryPROC shaderBinary = null;
alias PFNglShaderOp1EXTPROC = fn void(GLenum op, GLuint res, GLuint arg1);
PFNglShaderOp1EXTPROC shaderOp1EXT = null;
alias PFNglShaderOp2EXTPROC = fn void(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
PFNglShaderOp2EXTPROC shaderOp2EXT = null;
alias PFNglShaderOp3EXTPROC = fn void(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
PFNglShaderOp3EXTPROC shaderOp3EXT = null;
alias PFNglShaderSourcePROC = fn void(GLuint shader, GLsizei count, GLchar** string, GLint* length);
PFNglShaderSourcePROC shaderSource = null;
alias PFNglShaderSourceARBPROC = fn void(GLhandleARB shaderObj, GLsizei count, GLcharARB** string, GLint* length);
PFNglShaderSourceARBPROC shaderSourceARB = null;
alias PFNglShaderStorageBlockBindingPROC = fn void(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
PFNglShaderStorageBlockBindingPROC shaderStorageBlockBinding = null;
alias PFNglShadingRateEXTPROC = fn void(GLenum rate);
PFNglShadingRateEXTPROC shadingRateEXT = null;
alias PFNglShadingRateCombinerOpsEXTPROC = fn void(GLenum combinerOp0, GLenum combinerOp1);
PFNglShadingRateCombinerOpsEXTPROC shadingRateCombinerOpsEXT = null;
alias PFNglShadingRateImageBarrierNVPROC = fn void(GLboolean synchronize);
PFNglShadingRateImageBarrierNVPROC shadingRateImageBarrierNV = null;
alias PFNglShadingRateQCOMPROC = fn void(GLenum rate);
PFNglShadingRateQCOMPROC shadingRateQCOM = null;
alias PFNglShadingRateImagePaletteNVPROC = fn void(GLuint viewport, GLuint first, GLsizei count, GLenum* rates);
PFNglShadingRateImagePaletteNVPROC shadingRateImagePaletteNV = null;
alias PFNglShadingRateSampleOrderNVPROC = fn void(GLenum order);
PFNglShadingRateSampleOrderNVPROC shadingRateSampleOrderNV = null;
alias PFNglShadingRateSampleOrderCustomNVPROC = fn void(GLenum rate, GLuint samples, GLint* locations);
PFNglShadingRateSampleOrderCustomNVPROC shadingRateSampleOrderCustomNV = null;
alias PFNglSharpenTexFuncSGISPROC = fn void(GLenum target, GLsizei n, GLfloat* points);
PFNglSharpenTexFuncSGISPROC sharpenTexFuncSGIS = null;
alias PFNglSignalSemaphoreEXTPROC = fn void(GLuint semaphore, GLuint numBufferBarriers, GLuint* buffers, GLuint numTextureBarriers, GLuint* textures, GLenum* dstLayouts);
PFNglSignalSemaphoreEXTPROC signalSemaphoreEXT = null;
alias PFNglSignalSemaphoreui64NVXPROC = fn void(GLuint signalGpu, GLsizei fenceObjectCount, GLuint* semaphoreArray, GLuint64* fenceValueArray);
PFNglSignalSemaphoreui64NVXPROC signalSemaphoreui64NVX = null;
alias PFNglSpecializeShaderPROC = fn void(GLuint shader, GLchar* pEntryPoint, GLuint numSpecializationConstants, GLuint* pConstantIndex, GLuint* pConstantValue);
PFNglSpecializeShaderPROC specializeShader = null;
alias PFNglSpecializeShaderARBPROC = fn void(GLuint shader, GLchar* pEntryPoint, GLuint numSpecializationConstants, GLuint* pConstantIndex, GLuint* pConstantValue);
PFNglSpecializeShaderARBPROC specializeShaderARB = null;
alias PFNglSpriteParameterfSGIXPROC = fn void(GLenum pname, GLfloat param);
PFNglSpriteParameterfSGIXPROC spriteParameterfSGIX = null;
alias PFNglSpriteParameterfvSGIXPROC = fn void(GLenum pname, GLfloat* params);
PFNglSpriteParameterfvSGIXPROC spriteParameterfvSGIX = null;
alias PFNglSpriteParameteriSGIXPROC = fn void(GLenum pname, GLint param);
PFNglSpriteParameteriSGIXPROC spriteParameteriSGIX = null;
alias PFNglSpriteParameterivSGIXPROC = fn void(GLenum pname, GLint* params);
PFNglSpriteParameterivSGIXPROC spriteParameterivSGIX = null;
alias PFNglStartInstrumentsSGIXPROC = fn void();
PFNglStartInstrumentsSGIXPROC startInstrumentsSGIX = null;
alias PFNglStartTilingQCOMPROC = fn void(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
PFNglStartTilingQCOMPROC startTilingQCOM = null;
alias PFNglStateCaptureNVPROC = fn void(GLuint state, GLenum mode);
PFNglStateCaptureNVPROC stateCaptureNV = null;
alias PFNglStencilClearTagEXTPROC = fn void(GLsizei stencilTagBits, GLuint stencilClearTag);
PFNglStencilClearTagEXTPROC stencilClearTagEXT = null;
alias PFNglStencilFillPathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, GLfloat* transformValues);
PFNglStencilFillPathInstancedNVPROC stencilFillPathInstancedNV = null;
alias PFNglStencilFillPathNVPROC = fn void(GLuint path, GLenum fillMode, GLuint mask);
PFNglStencilFillPathNVPROC stencilFillPathNV = null;
alias PFNglStencilFuncPROC = fn void(GLenum func, GLint ref, GLuint mask);
PFNglStencilFuncPROC stencilFunc = null;
alias PFNglStencilFuncSeparatePROC = fn void(GLenum face, GLenum func, GLint ref, GLuint mask);
PFNglStencilFuncSeparatePROC stencilFuncSeparate = null;
alias PFNglStencilFuncSeparateATIPROC = fn void(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
PFNglStencilFuncSeparateATIPROC stencilFuncSeparateATI = null;
alias PFNglStencilMaskPROC = fn void(GLuint mask);
PFNglStencilMaskPROC stencilMask = null;
alias PFNglStencilMaskSeparatePROC = fn void(GLenum face, GLuint mask);
PFNglStencilMaskSeparatePROC stencilMaskSeparate = null;
alias PFNglStencilOpPROC = fn void(GLenum fail, GLenum zfail, GLenum zpass);
PFNglStencilOpPROC stencilOp = null;
alias PFNglStencilOpSeparatePROC = fn void(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
PFNglStencilOpSeparatePROC stencilOpSeparate = null;
alias PFNglStencilOpSeparateATIPROC = fn void(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
PFNglStencilOpSeparateATIPROC stencilOpSeparateATI = null;
alias PFNglStencilOpValueAMDPROC = fn void(GLenum face, GLuint value);
PFNglStencilOpValueAMDPROC stencilOpValueAMD = null;
alias PFNglStencilStrokePathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, GLfloat* transformValues);
PFNglStencilStrokePathInstancedNVPROC stencilStrokePathInstancedNV = null;
alias PFNglStencilStrokePathNVPROC = fn void(GLuint path, GLint reference, GLuint mask);
PFNglStencilStrokePathNVPROC stencilStrokePathNV = null;
alias PFNglStencilThenCoverFillPathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, GLfloat* transformValues);
PFNglStencilThenCoverFillPathInstancedNVPROC stencilThenCoverFillPathInstancedNV = null;
alias PFNglStencilThenCoverFillPathNVPROC = fn void(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
PFNglStencilThenCoverFillPathNVPROC stencilThenCoverFillPathNV = null;
alias PFNglStencilThenCoverStrokePathInstancedNVPROC = fn void(GLsizei numPaths, GLenum pathNameType, void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, GLfloat* transformValues);
PFNglStencilThenCoverStrokePathInstancedNVPROC stencilThenCoverStrokePathInstancedNV = null;
alias PFNglStencilThenCoverStrokePathNVPROC = fn void(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
PFNglStencilThenCoverStrokePathNVPROC stencilThenCoverStrokePathNV = null;
alias PFNglStopInstrumentsSGIXPROC = fn void(GLint marker);
PFNglStopInstrumentsSGIXPROC stopInstrumentsSGIX = null;
alias PFNglStringMarkerGREMEDYPROC = fn void(GLsizei len, void* string);
PFNglStringMarkerGREMEDYPROC stringMarkerGREMEDY = null;
alias PFNglSubpixelPrecisionBiasNVPROC = fn void(GLuint xbits, GLuint ybits);
PFNglSubpixelPrecisionBiasNVPROC subpixelPrecisionBiasNV = null;
alias PFNglSwizzleEXTPROC = fn void(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
PFNglSwizzleEXTPROC swizzleEXT = null;
alias PFNglSyncTextureINTELPROC = fn void(GLuint texture);
PFNglSyncTextureINTELPROC syncTextureINTEL = null;
alias PFNglTagSampleBufferSGIXPROC = fn void();
PFNglTagSampleBufferSGIXPROC tagSampleBufferSGIX = null;
alias PFNglTangent3bEXTPROC = fn void(GLbyte tx, GLbyte ty, GLbyte tz);
PFNglTangent3bEXTPROC tangent3bEXT = null;
alias PFNglTangent3bvEXTPROC = fn void(GLbyte* v);
PFNglTangent3bvEXTPROC tangent3bvEXT = null;
alias PFNglTangent3dEXTPROC = fn void(GLdouble tx, GLdouble ty, GLdouble tz);
PFNglTangent3dEXTPROC tangent3dEXT = null;
alias PFNglTangent3dvEXTPROC = fn void(GLdouble* v);
PFNglTangent3dvEXTPROC tangent3dvEXT = null;
alias PFNglTangent3fEXTPROC = fn void(GLfloat tx, GLfloat ty, GLfloat tz);
PFNglTangent3fEXTPROC tangent3fEXT = null;
alias PFNglTangent3fvEXTPROC = fn void(GLfloat* v);
PFNglTangent3fvEXTPROC tangent3fvEXT = null;
alias PFNglTangent3iEXTPROC = fn void(GLint tx, GLint ty, GLint tz);
PFNglTangent3iEXTPROC tangent3iEXT = null;
alias PFNglTangent3ivEXTPROC = fn void(GLint* v);
PFNglTangent3ivEXTPROC tangent3ivEXT = null;
alias PFNglTangent3sEXTPROC = fn void(GLshort tx, GLshort ty, GLshort tz);
PFNglTangent3sEXTPROC tangent3sEXT = null;
alias PFNglTangent3svEXTPROC = fn void(GLshort* v);
PFNglTangent3svEXTPROC tangent3svEXT = null;
alias PFNglTangentPointerEXTPROC = fn void(GLenum type, GLsizei stride, void* pointer);
PFNglTangentPointerEXTPROC tangentPointerEXT = null;
alias PFNglTbufferMask3DFXPROC = fn void(GLuint mask);
PFNglTbufferMask3DFXPROC tbufferMask3DFX = null;
alias PFNglTessellationFactorAMDPROC = fn void(GLfloat factor);
PFNglTessellationFactorAMDPROC tessellationFactorAMD = null;
alias PFNglTessellationModeAMDPROC = fn void(GLenum mode);
PFNglTessellationModeAMDPROC tessellationModeAMD = null;
alias PFNglTestFenceAPPLEPROC = fn GLboolean(GLuint fence);
PFNglTestFenceAPPLEPROC testFenceAPPLE = null;
alias PFNglTestFenceNVPROC = fn GLboolean(GLuint fence);
PFNglTestFenceNVPROC testFenceNV = null;
alias PFNglTestObjectAPPLEPROC = fn GLboolean(GLenum object, GLuint name);
PFNglTestObjectAPPLEPROC testObjectAPPLE = null;
alias PFNglTexAttachMemoryNVPROC = fn void(GLenum target, GLuint memory, GLuint64 offset);
PFNglTexAttachMemoryNVPROC texAttachMemoryNV = null;
alias PFNglTexBufferPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer);
PFNglTexBufferPROC texBuffer = null;
alias PFNglTexBufferARBPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer);
PFNglTexBufferARBPROC texBufferARB = null;
alias PFNglTexBufferEXTPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer);
PFNglTexBufferEXTPROC texBufferEXT = null;
alias PFNglTexBufferOESPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer);
PFNglTexBufferOESPROC texBufferOES = null;
alias PFNglTexBufferRangePROC = fn void(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTexBufferRangePROC texBufferRange = null;
alias PFNglTexBufferRangeEXTPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTexBufferRangeEXTPROC texBufferRangeEXT = null;
alias PFNglTexBufferRangeOESPROC = fn void(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTexBufferRangeOESPROC texBufferRangeOES = null;
alias PFNglTexBumpParameterfvATIPROC = fn void(GLenum pname, GLfloat* param);
PFNglTexBumpParameterfvATIPROC texBumpParameterfvATI = null;
alias PFNglTexBumpParameterivATIPROC = fn void(GLenum pname, GLint* param);
PFNglTexBumpParameterivATIPROC texBumpParameterivATI = null;
alias PFNglTexCoord1bOESPROC = fn void(GLbyte s);
PFNglTexCoord1bOESPROC texCoord1bOES = null;
alias PFNglTexCoord1bvOESPROC = fn void(GLbyte* coords);
PFNglTexCoord1bvOESPROC texCoord1bvOES = null;
alias PFNglTexCoord1dPROC = fn void(GLdouble s);
PFNglTexCoord1dPROC texCoord1d = null;
alias PFNglTexCoord1dvPROC = fn void(GLdouble* v);
PFNglTexCoord1dvPROC texCoord1dv = null;
alias PFNglTexCoord1fPROC = fn void(GLfloat s);
PFNglTexCoord1fPROC texCoord1f = null;
alias PFNglTexCoord1fvPROC = fn void(GLfloat* v);
PFNglTexCoord1fvPROC texCoord1fv = null;
alias PFNglTexCoord1hNVPROC = fn void(GLhalfNV s);
PFNglTexCoord1hNVPROC texCoord1hNV = null;
alias PFNglTexCoord1hvNVPROC = fn void(GLhalfNV* v);
PFNglTexCoord1hvNVPROC texCoord1hvNV = null;
alias PFNglTexCoord1iPROC = fn void(GLint s);
PFNglTexCoord1iPROC texCoord1i = null;
alias PFNglTexCoord1ivPROC = fn void(GLint* v);
PFNglTexCoord1ivPROC texCoord1iv = null;
alias PFNglTexCoord1sPROC = fn void(GLshort s);
PFNglTexCoord1sPROC texCoord1s = null;
alias PFNglTexCoord1svPROC = fn void(GLshort* v);
PFNglTexCoord1svPROC texCoord1sv = null;
alias PFNglTexCoord1xOESPROC = fn void(GLfixed s);
PFNglTexCoord1xOESPROC texCoord1xOES = null;
alias PFNglTexCoord1xvOESPROC = fn void(GLfixed* coords);
PFNglTexCoord1xvOESPROC texCoord1xvOES = null;
alias PFNglTexCoord2bOESPROC = fn void(GLbyte s, GLbyte t);
PFNglTexCoord2bOESPROC texCoord2bOES = null;
alias PFNglTexCoord2bvOESPROC = fn void(GLbyte* coords);
PFNglTexCoord2bvOESPROC texCoord2bvOES = null;
alias PFNglTexCoord2dPROC = fn void(GLdouble s, GLdouble t);
PFNglTexCoord2dPROC texCoord2d = null;
alias PFNglTexCoord2dvPROC = fn void(GLdouble* v);
PFNglTexCoord2dvPROC texCoord2dv = null;
alias PFNglTexCoord2fPROC = fn void(GLfloat s, GLfloat t);
PFNglTexCoord2fPROC texCoord2f = null;
alias PFNglTexCoord2fColor3fVertex3fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
PFNglTexCoord2fColor3fVertex3fSUNPROC texCoord2fColor3fVertex3fSUN = null;
alias PFNglTexCoord2fColor3fVertex3fvSUNPROC = fn void(GLfloat* tc, GLfloat* c, GLfloat* v);
PFNglTexCoord2fColor3fVertex3fvSUNPROC texCoord2fColor3fVertex3fvSUN = null;
alias PFNglTexCoord2fColor4fNormal3fVertex3fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglTexCoord2fColor4fNormal3fVertex3fSUNPROC texCoord2fColor4fNormal3fVertex3fSUN = null;
alias PFNglTexCoord2fColor4fNormal3fVertex3fvSUNPROC = fn void(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
PFNglTexCoord2fColor4fNormal3fVertex3fvSUNPROC texCoord2fColor4fNormal3fVertex3fvSUN = null;
alias PFNglTexCoord2fColor4ubVertex3fSUNPROC = fn void(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
PFNglTexCoord2fColor4ubVertex3fSUNPROC texCoord2fColor4ubVertex3fSUN = null;
alias PFNglTexCoord2fColor4ubVertex3fvSUNPROC = fn void(GLfloat* tc, GLubyte* c, GLfloat* v);
PFNglTexCoord2fColor4ubVertex3fvSUNPROC texCoord2fColor4ubVertex3fvSUN = null;
alias PFNglTexCoord2fNormal3fVertex3fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
PFNglTexCoord2fNormal3fVertex3fSUNPROC texCoord2fNormal3fVertex3fSUN = null;
alias PFNglTexCoord2fNormal3fVertex3fvSUNPROC = fn void(GLfloat* tc, GLfloat* n, GLfloat* v);
PFNglTexCoord2fNormal3fVertex3fvSUNPROC texCoord2fNormal3fVertex3fvSUN = null;
alias PFNglTexCoord2fVertex3fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
PFNglTexCoord2fVertex3fSUNPROC texCoord2fVertex3fSUN = null;
alias PFNglTexCoord2fVertex3fvSUNPROC = fn void(GLfloat* tc, GLfloat* v);
PFNglTexCoord2fVertex3fvSUNPROC texCoord2fVertex3fvSUN = null;
alias PFNglTexCoord2fvPROC = fn void(GLfloat* v);
PFNglTexCoord2fvPROC texCoord2fv = null;
alias PFNglTexCoord2hNVPROC = fn void(GLhalfNV s, GLhalfNV t);
PFNglTexCoord2hNVPROC texCoord2hNV = null;
alias PFNglTexCoord2hvNVPROC = fn void(GLhalfNV* v);
PFNglTexCoord2hvNVPROC texCoord2hvNV = null;
alias PFNglTexCoord2iPROC = fn void(GLint s, GLint t);
PFNglTexCoord2iPROC texCoord2i = null;
alias PFNglTexCoord2ivPROC = fn void(GLint* v);
PFNglTexCoord2ivPROC texCoord2iv = null;
alias PFNglTexCoord2sPROC = fn void(GLshort s, GLshort t);
PFNglTexCoord2sPROC texCoord2s = null;
alias PFNglTexCoord2svPROC = fn void(GLshort* v);
PFNglTexCoord2svPROC texCoord2sv = null;
alias PFNglTexCoord2xOESPROC = fn void(GLfixed s, GLfixed t);
PFNglTexCoord2xOESPROC texCoord2xOES = null;
alias PFNglTexCoord2xvOESPROC = fn void(GLfixed* coords);
PFNglTexCoord2xvOESPROC texCoord2xvOES = null;
alias PFNglTexCoord3bOESPROC = fn void(GLbyte s, GLbyte t, GLbyte r);
PFNglTexCoord3bOESPROC texCoord3bOES = null;
alias PFNglTexCoord3bvOESPROC = fn void(GLbyte* coords);
PFNglTexCoord3bvOESPROC texCoord3bvOES = null;
alias PFNglTexCoord3dPROC = fn void(GLdouble s, GLdouble t, GLdouble r);
PFNglTexCoord3dPROC texCoord3d = null;
alias PFNglTexCoord3dvPROC = fn void(GLdouble* v);
PFNglTexCoord3dvPROC texCoord3dv = null;
alias PFNglTexCoord3fPROC = fn void(GLfloat s, GLfloat t, GLfloat r);
PFNglTexCoord3fPROC texCoord3f = null;
alias PFNglTexCoord3fvPROC = fn void(GLfloat* v);
PFNglTexCoord3fvPROC texCoord3fv = null;
alias PFNglTexCoord3hNVPROC = fn void(GLhalfNV s, GLhalfNV t, GLhalfNV r);
PFNglTexCoord3hNVPROC texCoord3hNV = null;
alias PFNglTexCoord3hvNVPROC = fn void(GLhalfNV* v);
PFNglTexCoord3hvNVPROC texCoord3hvNV = null;
alias PFNglTexCoord3iPROC = fn void(GLint s, GLint t, GLint r);
PFNglTexCoord3iPROC texCoord3i = null;
alias PFNglTexCoord3ivPROC = fn void(GLint* v);
PFNglTexCoord3ivPROC texCoord3iv = null;
alias PFNglTexCoord3sPROC = fn void(GLshort s, GLshort t, GLshort r);
PFNglTexCoord3sPROC texCoord3s = null;
alias PFNglTexCoord3svPROC = fn void(GLshort* v);
PFNglTexCoord3svPROC texCoord3sv = null;
alias PFNglTexCoord3xOESPROC = fn void(GLfixed s, GLfixed t, GLfixed r);
PFNglTexCoord3xOESPROC texCoord3xOES = null;
alias PFNglTexCoord3xvOESPROC = fn void(GLfixed* coords);
PFNglTexCoord3xvOESPROC texCoord3xvOES = null;
alias PFNglTexCoord4bOESPROC = fn void(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
PFNglTexCoord4bOESPROC texCoord4bOES = null;
alias PFNglTexCoord4bvOESPROC = fn void(GLbyte* coords);
PFNglTexCoord4bvOESPROC texCoord4bvOES = null;
alias PFNglTexCoord4dPROC = fn void(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
PFNglTexCoord4dPROC texCoord4d = null;
alias PFNglTexCoord4dvPROC = fn void(GLdouble* v);
PFNglTexCoord4dvPROC texCoord4dv = null;
alias PFNglTexCoord4fPROC = fn void(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
PFNglTexCoord4fPROC texCoord4f = null;
alias PFNglTexCoord4fColor4fNormal3fVertex4fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglTexCoord4fColor4fNormal3fVertex4fSUNPROC texCoord4fColor4fNormal3fVertex4fSUN = null;
alias PFNglTexCoord4fColor4fNormal3fVertex4fvSUNPROC = fn void(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
PFNglTexCoord4fColor4fNormal3fVertex4fvSUNPROC texCoord4fColor4fNormal3fVertex4fvSUN = null;
alias PFNglTexCoord4fVertex4fSUNPROC = fn void(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglTexCoord4fVertex4fSUNPROC texCoord4fVertex4fSUN = null;
alias PFNglTexCoord4fVertex4fvSUNPROC = fn void(GLfloat* tc, GLfloat* v);
PFNglTexCoord4fVertex4fvSUNPROC texCoord4fVertex4fvSUN = null;
alias PFNglTexCoord4fvPROC = fn void(GLfloat* v);
PFNglTexCoord4fvPROC texCoord4fv = null;
alias PFNglTexCoord4hNVPROC = fn void(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
PFNglTexCoord4hNVPROC texCoord4hNV = null;
alias PFNglTexCoord4hvNVPROC = fn void(GLhalfNV* v);
PFNglTexCoord4hvNVPROC texCoord4hvNV = null;
alias PFNglTexCoord4iPROC = fn void(GLint s, GLint t, GLint r, GLint q);
PFNglTexCoord4iPROC texCoord4i = null;
alias PFNglTexCoord4ivPROC = fn void(GLint* v);
PFNglTexCoord4ivPROC texCoord4iv = null;
alias PFNglTexCoord4sPROC = fn void(GLshort s, GLshort t, GLshort r, GLshort q);
PFNglTexCoord4sPROC texCoord4s = null;
alias PFNglTexCoord4svPROC = fn void(GLshort* v);
PFNglTexCoord4svPROC texCoord4sv = null;
alias PFNglTexCoord4xOESPROC = fn void(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
PFNglTexCoord4xOESPROC texCoord4xOES = null;
alias PFNglTexCoord4xvOESPROC = fn void(GLfixed* coords);
PFNglTexCoord4xvOESPROC texCoord4xvOES = null;
alias PFNglTexCoordFormatNVPROC = fn void(GLint size, GLenum type, GLsizei stride);
PFNglTexCoordFormatNVPROC texCoordFormatNV = null;
alias PFNglTexCoordP1uiPROC = fn void(GLenum type, GLuint coords);
PFNglTexCoordP1uiPROC texCoordP1ui = null;
alias PFNglTexCoordP1uivPROC = fn void(GLenum type, GLuint* coords);
PFNglTexCoordP1uivPROC texCoordP1uiv = null;
alias PFNglTexCoordP2uiPROC = fn void(GLenum type, GLuint coords);
PFNglTexCoordP2uiPROC texCoordP2ui = null;
alias PFNglTexCoordP2uivPROC = fn void(GLenum type, GLuint* coords);
PFNglTexCoordP2uivPROC texCoordP2uiv = null;
alias PFNglTexCoordP3uiPROC = fn void(GLenum type, GLuint coords);
PFNglTexCoordP3uiPROC texCoordP3ui = null;
alias PFNglTexCoordP3uivPROC = fn void(GLenum type, GLuint* coords);
PFNglTexCoordP3uivPROC texCoordP3uiv = null;
alias PFNglTexCoordP4uiPROC = fn void(GLenum type, GLuint coords);
PFNglTexCoordP4uiPROC texCoordP4ui = null;
alias PFNglTexCoordP4uivPROC = fn void(GLenum type, GLuint* coords);
PFNglTexCoordP4uivPROC texCoordP4uiv = null;
alias PFNglTexCoordPointerPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglTexCoordPointerPROC texCoordPointer = null;
alias PFNglTexCoordPointerEXTPROC = fn void(GLint size, GLenum type, GLsizei stride, GLsizei count, void* pointer);
PFNglTexCoordPointerEXTPROC texCoordPointerEXT = null;
alias PFNglTexCoordPointerListIBMPROC = fn void(GLint size, GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglTexCoordPointerListIBMPROC texCoordPointerListIBM = null;
alias PFNglTexCoordPointervINTELPROC = fn void(GLint size, GLenum type, void** pointer);
PFNglTexCoordPointervINTELPROC texCoordPointervINTEL = null;
alias PFNglTexEnvfPROC = fn void(GLenum target, GLenum pname, GLfloat param);
PFNglTexEnvfPROC texEnvf = null;
alias PFNglTexEnvfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglTexEnvfvPROC texEnvfv = null;
alias PFNglTexEnviPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglTexEnviPROC texEnvi = null;
alias PFNglTexEnvivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglTexEnvivPROC texEnviv = null;
alias PFNglTexEnvxPROC = fn void(GLenum target, GLenum pname, GLfixed param);
PFNglTexEnvxPROC texEnvx = null;
alias PFNglTexEnvxOESPROC = fn void(GLenum target, GLenum pname, GLfixed param);
PFNglTexEnvxOESPROC texEnvxOES = null;
alias PFNglTexEnvxvPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglTexEnvxvPROC texEnvxv = null;
alias PFNglTexEnvxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglTexEnvxvOESPROC texEnvxvOES = null;
alias PFNglTexEstimateMotionQCOMPROC = fn void(GLuint ref, GLuint target, GLuint output);
PFNglTexEstimateMotionQCOMPROC texEstimateMotionQCOM = null;
alias PFNglTexEstimateMotionRegionsQCOMPROC = fn void(GLuint ref, GLuint target, GLuint output, GLuint mask);
PFNglTexEstimateMotionRegionsQCOMPROC texEstimateMotionRegionsQCOM = null;
alias PFNglExtrapolateTex2DQCOMPROC = fn void(GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor);
PFNglExtrapolateTex2DQCOMPROC extrapolateTex2DQCOM = null;
alias PFNglTexFilterFuncSGISPROC = fn void(GLenum target, GLenum filter, GLsizei n, GLfloat* weights);
PFNglTexFilterFuncSGISPROC texFilterFuncSGIS = null;
alias PFNglTexGendPROC = fn void(GLenum coord, GLenum pname, GLdouble param);
PFNglTexGendPROC texGend = null;
alias PFNglTexGendvPROC = fn void(GLenum coord, GLenum pname, GLdouble* params);
PFNglTexGendvPROC texGendv = null;
alias PFNglTexGenfPROC = fn void(GLenum coord, GLenum pname, GLfloat param);
PFNglTexGenfPROC texGenf = null;
alias PFNglTexGenfOESPROC = fn void(GLenum coord, GLenum pname, GLfloat param);
PFNglTexGenfOESPROC texGenfOES = null;
alias PFNglTexGenfvPROC = fn void(GLenum coord, GLenum pname, GLfloat* params);
PFNglTexGenfvPROC texGenfv = null;
alias PFNglTexGenfvOESPROC = fn void(GLenum coord, GLenum pname, GLfloat* params);
PFNglTexGenfvOESPROC texGenfvOES = null;
alias PFNglTexGeniPROC = fn void(GLenum coord, GLenum pname, GLint param);
PFNglTexGeniPROC texGeni = null;
alias PFNglTexGeniOESPROC = fn void(GLenum coord, GLenum pname, GLint param);
PFNglTexGeniOESPROC texGeniOES = null;
alias PFNglTexGenivPROC = fn void(GLenum coord, GLenum pname, GLint* params);
PFNglTexGenivPROC texGeniv = null;
alias PFNglTexGenivOESPROC = fn void(GLenum coord, GLenum pname, GLint* params);
PFNglTexGenivOESPROC texGenivOES = null;
alias PFNglTexGenxOESPROC = fn void(GLenum coord, GLenum pname, GLfixed param);
PFNglTexGenxOESPROC texGenxOES = null;
alias PFNglTexGenxvOESPROC = fn void(GLenum coord, GLenum pname, GLfixed* params);
PFNglTexGenxvOESPROC texGenxvOES = null;
alias PFNglTexImage1DPROC = fn void(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage1DPROC texImage1D = null;
alias PFNglTexImage2DPROC = fn void(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage2DPROC texImage2D = null;
alias PFNglTexImage2DMultisamplePROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
PFNglTexImage2DMultisamplePROC texImage2DMultisample = null;
alias PFNglTexImage2DMultisampleCoverageNVPROC = fn void(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
PFNglTexImage2DMultisampleCoverageNVPROC texImage2DMultisampleCoverageNV = null;
alias PFNglTexImage3DPROC = fn void(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage3DPROC texImage3D = null;
alias PFNglTexImage3DEXTPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage3DEXTPROC texImage3DEXT = null;
alias PFNglTexImage3DMultisamplePROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
PFNglTexImage3DMultisamplePROC texImage3DMultisample = null;
alias PFNglTexImage3DMultisampleCoverageNVPROC = fn void(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
PFNglTexImage3DMultisampleCoverageNVPROC texImage3DMultisampleCoverageNV = null;
alias PFNglTexImage3DOESPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage3DOESPROC texImage3DOES = null;
alias PFNglTexImage4DSGISPROC = fn void(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTexImage4DSGISPROC texImage4DSGIS = null;
alias PFNglTexPageCommitmentARBPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
PFNglTexPageCommitmentARBPROC texPageCommitmentARB = null;
alias PFNglTexPageCommitmentEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
PFNglTexPageCommitmentEXTPROC texPageCommitmentEXT = null;
alias PFNglTexPageCommitmentMemNVPROC = fn void(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
PFNglTexPageCommitmentMemNVPROC texPageCommitmentMemNV = null;
alias PFNglTexParameterIivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglTexParameterIivPROC texParameterIiv = null;
alias PFNglTexParameterIivEXTPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglTexParameterIivEXTPROC texParameterIivEXT = null;
alias PFNglTexParameterIivOESPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglTexParameterIivOESPROC texParameterIivOES = null;
alias PFNglTexParameterIuivPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglTexParameterIuivPROC texParameterIuiv = null;
alias PFNglTexParameterIuivEXTPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglTexParameterIuivEXTPROC texParameterIuivEXT = null;
alias PFNglTexParameterIuivOESPROC = fn void(GLenum target, GLenum pname, GLuint* params);
PFNglTexParameterIuivOESPROC texParameterIuivOES = null;
alias PFNglTexParameterfPROC = fn void(GLenum target, GLenum pname, GLfloat param);
PFNglTexParameterfPROC texParameterf = null;
alias PFNglTexParameterfvPROC = fn void(GLenum target, GLenum pname, GLfloat* params);
PFNglTexParameterfvPROC texParameterfv = null;
alias PFNglTexParameteriPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglTexParameteriPROC texParameteri = null;
alias PFNglTexParameterivPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglTexParameterivPROC texParameteriv = null;
alias PFNglTexParameterxPROC = fn void(GLenum target, GLenum pname, GLfixed param);
PFNglTexParameterxPROC texParameterx = null;
alias PFNglTexParameterxOESPROC = fn void(GLenum target, GLenum pname, GLfixed param);
PFNglTexParameterxOESPROC texParameterxOES = null;
alias PFNglTexParameterxvPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglTexParameterxvPROC texParameterxv = null;
alias PFNglTexParameterxvOESPROC = fn void(GLenum target, GLenum pname, GLfixed* params);
PFNglTexParameterxvOESPROC texParameterxvOES = null;
alias PFNglTexRenderbufferNVPROC = fn void(GLenum target, GLuint renderbuffer);
PFNglTexRenderbufferNVPROC texRenderbufferNV = null;
alias PFNglTexStorage1DPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
PFNglTexStorage1DPROC texStorage1D = null;
alias PFNglTexStorage1DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
PFNglTexStorage1DEXTPROC texStorage1DEXT = null;
alias PFNglTexStorage2DPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
PFNglTexStorage2DPROC texStorage2D = null;
alias PFNglTexStorage2DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
PFNglTexStorage2DEXTPROC texStorage2DEXT = null;
alias PFNglTexStorage2DMultisamplePROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
PFNglTexStorage2DMultisamplePROC texStorage2DMultisample = null;
alias PFNglTexStorage3DPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
PFNglTexStorage3DPROC texStorage3D = null;
alias PFNglTexStorage3DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
PFNglTexStorage3DEXTPROC texStorage3DEXT = null;
alias PFNglTexStorage3DMultisamplePROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
PFNglTexStorage3DMultisamplePROC texStorage3DMultisample = null;
alias PFNglTexStorage3DMultisampleOESPROC = fn void(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
PFNglTexStorage3DMultisampleOESPROC texStorage3DMultisampleOES = null;
alias PFNglTexStorageAttribs2DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLint* attrib_list);
PFNglTexStorageAttribs2DEXTPROC texStorageAttribs2DEXT = null;
alias PFNglTexStorageAttribs3DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint* attrib_list);
PFNglTexStorageAttribs3DEXTPROC texStorageAttribs3DEXT = null;
alias PFNglTexStorageMem1DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
PFNglTexStorageMem1DEXTPROC texStorageMem1DEXT = null;
alias PFNglTexStorageMem2DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
PFNglTexStorageMem2DEXTPROC texStorageMem2DEXT = null;
alias PFNglTexStorageMem2DMultisampleEXTPROC = fn void(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
PFNglTexStorageMem2DMultisampleEXTPROC texStorageMem2DMultisampleEXT = null;
alias PFNglTexStorageMem3DEXTPROC = fn void(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
PFNglTexStorageMem3DEXTPROC texStorageMem3DEXT = null;
alias PFNglTexStorageMem3DMultisampleEXTPROC = fn void(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
PFNglTexStorageMem3DMultisampleEXTPROC texStorageMem3DMultisampleEXT = null;
alias PFNglTexStorageSparseAMDPROC = fn void(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
PFNglTexStorageSparseAMDPROC texStorageSparseAMD = null;
alias PFNglTexSubImage1DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage1DPROC texSubImage1D = null;
alias PFNglTexSubImage1DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage1DEXTPROC texSubImage1DEXT = null;
alias PFNglTexSubImage2DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage2DPROC texSubImage2D = null;
alias PFNglTexSubImage2DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage2DEXTPROC texSubImage2DEXT = null;
alias PFNglTexSubImage3DPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage3DPROC texSubImage3D = null;
alias PFNglTexSubImage3DEXTPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage3DEXTPROC texSubImage3DEXT = null;
alias PFNglTexSubImage3DOESPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage3DOESPROC texSubImage3DOES = null;
alias PFNglTexSubImage4DSGISPROC = fn void(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, void* pixels);
PFNglTexSubImage4DSGISPROC texSubImage4DSGIS = null;
alias PFNglTextureAttachMemoryNVPROC = fn void(GLuint texture, GLuint memory, GLuint64 offset);
PFNglTextureAttachMemoryNVPROC textureAttachMemoryNV = null;
alias PFNglTextureBarrierPROC = fn void();
PFNglTextureBarrierPROC textureBarrier = null;
alias PFNglTextureBarrierNVPROC = fn void();
PFNglTextureBarrierNVPROC textureBarrierNV = null;
alias PFNglTextureBufferPROC = fn void(GLuint texture, GLenum internalformat, GLuint buffer);
PFNglTextureBufferPROC textureBuffer = null;
alias PFNglTextureBufferEXTPROC = fn void(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
PFNglTextureBufferEXTPROC textureBufferEXT = null;
alias PFNglTextureBufferRangePROC = fn void(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTextureBufferRangePROC textureBufferRange = null;
alias PFNglTextureBufferRangeEXTPROC = fn void(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTextureBufferRangeEXTPROC textureBufferRangeEXT = null;
alias PFNglTextureColorMaskSGISPROC = fn void(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
PFNglTextureColorMaskSGISPROC textureColorMaskSGIS = null;
alias PFNglTextureFoveationParametersQCOMPROC = fn void(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
PFNglTextureFoveationParametersQCOMPROC textureFoveationParametersQCOM = null;
alias PFNglTextureImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTextureImage1DEXTPROC textureImage1DEXT = null;
alias PFNglTextureImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTextureImage2DEXTPROC textureImage2DEXT = null;
alias PFNglTextureImage2DMultisampleCoverageNVPROC = fn void(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
PFNglTextureImage2DMultisampleCoverageNVPROC textureImage2DMultisampleCoverageNV = null;
alias PFNglTextureImage2DMultisampleNVPROC = fn void(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
PFNglTextureImage2DMultisampleNVPROC textureImage2DMultisampleNV = null;
alias PFNglTextureImage3DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
PFNglTextureImage3DEXTPROC textureImage3DEXT = null;
alias PFNglTextureImage3DMultisampleCoverageNVPROC = fn void(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
PFNglTextureImage3DMultisampleCoverageNVPROC textureImage3DMultisampleCoverageNV = null;
alias PFNglTextureImage3DMultisampleNVPROC = fn void(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
PFNglTextureImage3DMultisampleNVPROC textureImage3DMultisampleNV = null;
alias PFNglTextureLightEXTPROC = fn void(GLenum pname);
PFNglTextureLightEXTPROC textureLightEXT = null;
alias PFNglTextureMaterialEXTPROC = fn void(GLenum face, GLenum mode);
PFNglTextureMaterialEXTPROC textureMaterialEXT = null;
alias PFNglTextureNormalEXTPROC = fn void(GLenum mode);
PFNglTextureNormalEXTPROC textureNormalEXT = null;
alias PFNglTexturePageCommitmentEXTPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
PFNglTexturePageCommitmentEXTPROC texturePageCommitmentEXT = null;
alias PFNglTexturePageCommitmentMemNVPROC = fn void(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
PFNglTexturePageCommitmentMemNVPROC texturePageCommitmentMemNV = null;
alias PFNglTextureParameterIivPROC = fn void(GLuint texture, GLenum pname, GLint* params);
PFNglTextureParameterIivPROC textureParameterIiv = null;
alias PFNglTextureParameterIivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLint* params);
PFNglTextureParameterIivEXTPROC textureParameterIivEXT = null;
alias PFNglTextureParameterIuivPROC = fn void(GLuint texture, GLenum pname, GLuint* params);
PFNglTextureParameterIuivPROC textureParameterIuiv = null;
alias PFNglTextureParameterIuivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLuint* params);
PFNglTextureParameterIuivEXTPROC textureParameterIuivEXT = null;
alias PFNglTextureParameterfPROC = fn void(GLuint texture, GLenum pname, GLfloat param);
PFNglTextureParameterfPROC textureParameterf = null;
alias PFNglTextureParameterfEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLfloat param);
PFNglTextureParameterfEXTPROC textureParameterfEXT = null;
alias PFNglTextureParameterfvPROC = fn void(GLuint texture, GLenum pname, GLfloat* param);
PFNglTextureParameterfvPROC textureParameterfv = null;
alias PFNglTextureParameterfvEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
PFNglTextureParameterfvEXTPROC textureParameterfvEXT = null;
alias PFNglTextureParameteriPROC = fn void(GLuint texture, GLenum pname, GLint param);
PFNglTextureParameteriPROC textureParameteri = null;
alias PFNglTextureParameteriEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLint param);
PFNglTextureParameteriEXTPROC textureParameteriEXT = null;
alias PFNglTextureParameterivPROC = fn void(GLuint texture, GLenum pname, GLint* param);
PFNglTextureParameterivPROC textureParameteriv = null;
alias PFNglTextureParameterivEXTPROC = fn void(GLuint texture, GLenum target, GLenum pname, GLint* params);
PFNglTextureParameterivEXTPROC textureParameterivEXT = null;
alias PFNglTextureRangeAPPLEPROC = fn void(GLenum target, GLsizei length, void* pointer);
PFNglTextureRangeAPPLEPROC textureRangeAPPLE = null;
alias PFNglTextureRenderbufferEXTPROC = fn void(GLuint texture, GLenum target, GLuint renderbuffer);
PFNglTextureRenderbufferEXTPROC textureRenderbufferEXT = null;
alias PFNglTextureStorage1DPROC = fn void(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
PFNglTextureStorage1DPROC textureStorage1D = null;
alias PFNglTextureStorage1DEXTPROC = fn void(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
PFNglTextureStorage1DEXTPROC textureStorage1DEXT = null;
alias PFNglTextureStorage2DPROC = fn void(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
PFNglTextureStorage2DPROC textureStorage2D = null;
alias PFNglTextureStorage2DEXTPROC = fn void(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
PFNglTextureStorage2DEXTPROC textureStorage2DEXT = null;
alias PFNglTextureStorage2DMultisamplePROC = fn void(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
PFNglTextureStorage2DMultisamplePROC textureStorage2DMultisample = null;
alias PFNglTextureStorage2DMultisampleEXTPROC = fn void(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
PFNglTextureStorage2DMultisampleEXTPROC textureStorage2DMultisampleEXT = null;
alias PFNglTextureStorage3DPROC = fn void(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
PFNglTextureStorage3DPROC textureStorage3D = null;
alias PFNglTextureStorage3DEXTPROC = fn void(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
PFNglTextureStorage3DEXTPROC textureStorage3DEXT = null;
alias PFNglTextureStorage3DMultisamplePROC = fn void(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
PFNglTextureStorage3DMultisamplePROC textureStorage3DMultisample = null;
alias PFNglTextureStorage3DMultisampleEXTPROC = fn void(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
PFNglTextureStorage3DMultisampleEXTPROC textureStorage3DMultisampleEXT = null;
alias PFNglTextureStorageMem1DEXTPROC = fn void(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
PFNglTextureStorageMem1DEXTPROC textureStorageMem1DEXT = null;
alias PFNglTextureStorageMem2DEXTPROC = fn void(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
PFNglTextureStorageMem2DEXTPROC textureStorageMem2DEXT = null;
alias PFNglTextureStorageMem2DMultisampleEXTPROC = fn void(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
PFNglTextureStorageMem2DMultisampleEXTPROC textureStorageMem2DMultisampleEXT = null;
alias PFNglTextureStorageMem3DEXTPROC = fn void(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
PFNglTextureStorageMem3DEXTPROC textureStorageMem3DEXT = null;
alias PFNglTextureStorageMem3DMultisampleEXTPROC = fn void(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
PFNglTextureStorageMem3DMultisampleEXTPROC textureStorageMem3DMultisampleEXT = null;
alias PFNglTextureStorageSparseAMDPROC = fn void(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
PFNglTextureStorageSparseAMDPROC textureStorageSparseAMD = null;
alias PFNglTextureSubImage1DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage1DPROC textureSubImage1D = null;
alias PFNglTextureSubImage1DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage1DEXTPROC textureSubImage1DEXT = null;
alias PFNglTextureSubImage2DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage2DPROC textureSubImage2D = null;
alias PFNglTextureSubImage2DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage2DEXTPROC textureSubImage2DEXT = null;
alias PFNglTextureSubImage3DPROC = fn void(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage3DPROC textureSubImage3D = null;
alias PFNglTextureSubImage3DEXTPROC = fn void(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
PFNglTextureSubImage3DEXTPROC textureSubImage3DEXT = null;
alias PFNglTextureViewPROC = fn void(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
PFNglTextureViewPROC textureView = null;
alias PFNglTextureViewEXTPROC = fn void(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
PFNglTextureViewEXTPROC textureViewEXT = null;
alias PFNglTextureViewOESPROC = fn void(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
PFNglTextureViewOESPROC textureViewOES = null;
alias PFNglTrackMatrixNVPROC = fn void(GLenum target, GLuint address, GLenum matrix, GLenum transform);
PFNglTrackMatrixNVPROC trackMatrixNV = null;
alias PFNglTransformFeedbackAttribsNVPROC = fn void(GLsizei count, GLint* attribs, GLenum bufferMode);
PFNglTransformFeedbackAttribsNVPROC transformFeedbackAttribsNV = null;
alias PFNglTransformFeedbackBufferBasePROC = fn void(GLuint xfb, GLuint index, GLuint buffer);
PFNglTransformFeedbackBufferBasePROC transformFeedbackBufferBase = null;
alias PFNglTransformFeedbackBufferRangePROC = fn void(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
PFNglTransformFeedbackBufferRangePROC transformFeedbackBufferRange = null;
alias PFNglTransformFeedbackStreamAttribsNVPROC = fn void(GLsizei count, GLint* attribs, GLsizei nbuffers, GLint* bufstreams, GLenum bufferMode);
PFNglTransformFeedbackStreamAttribsNVPROC transformFeedbackStreamAttribsNV = null;
alias PFNglTransformFeedbackVaryingsPROC = fn void(GLuint program, GLsizei count, GLchar** varyings, GLenum bufferMode);
PFNglTransformFeedbackVaryingsPROC transformFeedbackVaryings = null;
alias PFNglTransformFeedbackVaryingsEXTPROC = fn void(GLuint program, GLsizei count, GLchar** varyings, GLenum bufferMode);
PFNglTransformFeedbackVaryingsEXTPROC transformFeedbackVaryingsEXT = null;
alias PFNglTransformFeedbackVaryingsNVPROC = fn void(GLuint program, GLsizei count, GLint* locations, GLenum bufferMode);
PFNglTransformFeedbackVaryingsNVPROC transformFeedbackVaryingsNV = null;
alias PFNglTransformPathNVPROC = fn void(GLuint resultPath, GLuint srcPath, GLenum transformType, GLfloat* transformValues);
PFNglTransformPathNVPROC transformPathNV = null;
alias PFNglTranslatedPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglTranslatedPROC translated = null;
alias PFNglTranslatefPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglTranslatefPROC translatef = null;
alias PFNglTranslatexPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglTranslatexPROC translatex = null;
alias PFNglTranslatexOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglTranslatexOESPROC translatexOES = null;
alias PFNglUniform1dPROC = fn void(GLint location, GLdouble x);
PFNglUniform1dPROC uniform1d = null;
alias PFNglUniform1dvPROC = fn void(GLint location, GLsizei count, GLdouble* value);
PFNglUniform1dvPROC uniform1dv = null;
alias PFNglUniform1fPROC = fn void(GLint location, GLfloat v0);
PFNglUniform1fPROC uniform1f = null;
alias PFNglUniform1fARBPROC = fn void(GLint location, GLfloat v0);
PFNglUniform1fARBPROC uniform1fARB = null;
alias PFNglUniform1fvPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform1fvPROC uniform1fv = null;
alias PFNglUniform1fvARBPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform1fvARBPROC uniform1fvARB = null;
alias PFNglUniform1iPROC = fn void(GLint location, GLint v0);
PFNglUniform1iPROC uniform1i = null;
alias PFNglUniform1i64ARBPROC = fn void(GLint location, GLint64 x);
PFNglUniform1i64ARBPROC uniform1i64ARB = null;
alias PFNglUniform1i64NVPROC = fn void(GLint location, GLint64EXT x);
PFNglUniform1i64NVPROC uniform1i64NV = null;
alias PFNglUniform1i64vARBPROC = fn void(GLint location, GLsizei count, GLint64* value);
PFNglUniform1i64vARBPROC uniform1i64vARB = null;
alias PFNglUniform1i64vNVPROC = fn void(GLint location, GLsizei count, GLint64EXT* value);
PFNglUniform1i64vNVPROC uniform1i64vNV = null;
alias PFNglUniform1iARBPROC = fn void(GLint location, GLint v0);
PFNglUniform1iARBPROC uniform1iARB = null;
alias PFNglUniform1ivPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform1ivPROC uniform1iv = null;
alias PFNglUniform1ivARBPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform1ivARBPROC uniform1ivARB = null;
alias PFNglUniform1uiPROC = fn void(GLint location, GLuint v0);
PFNglUniform1uiPROC uniform1ui = null;
alias PFNglUniform1ui64ARBPROC = fn void(GLint location, GLuint64 x);
PFNglUniform1ui64ARBPROC uniform1ui64ARB = null;
alias PFNglUniform1ui64NVPROC = fn void(GLint location, GLuint64EXT x);
PFNglUniform1ui64NVPROC uniform1ui64NV = null;
alias PFNglUniform1ui64vARBPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniform1ui64vARBPROC uniform1ui64vARB = null;
alias PFNglUniform1ui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64EXT* value);
PFNglUniform1ui64vNVPROC uniform1ui64vNV = null;
alias PFNglUniform1uiEXTPROC = fn void(GLint location, GLuint v0);
PFNglUniform1uiEXTPROC uniform1uiEXT = null;
alias PFNglUniform1uivPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform1uivPROC uniform1uiv = null;
alias PFNglUniform1uivEXTPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform1uivEXTPROC uniform1uivEXT = null;
alias PFNglUniform2dPROC = fn void(GLint location, GLdouble x, GLdouble y);
PFNglUniform2dPROC uniform2d = null;
alias PFNglUniform2dvPROC = fn void(GLint location, GLsizei count, GLdouble* value);
PFNglUniform2dvPROC uniform2dv = null;
alias PFNglUniform2fPROC = fn void(GLint location, GLfloat v0, GLfloat v1);
PFNglUniform2fPROC uniform2f = null;
alias PFNglUniform2fARBPROC = fn void(GLint location, GLfloat v0, GLfloat v1);
PFNglUniform2fARBPROC uniform2fARB = null;
alias PFNglUniform2fvPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform2fvPROC uniform2fv = null;
alias PFNglUniform2fvARBPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform2fvARBPROC uniform2fvARB = null;
alias PFNglUniform2iPROC = fn void(GLint location, GLint v0, GLint v1);
PFNglUniform2iPROC uniform2i = null;
alias PFNglUniform2i64ARBPROC = fn void(GLint location, GLint64 x, GLint64 y);
PFNglUniform2i64ARBPROC uniform2i64ARB = null;
alias PFNglUniform2i64NVPROC = fn void(GLint location, GLint64EXT x, GLint64EXT y);
PFNglUniform2i64NVPROC uniform2i64NV = null;
alias PFNglUniform2i64vARBPROC = fn void(GLint location, GLsizei count, GLint64* value);
PFNglUniform2i64vARBPROC uniform2i64vARB = null;
alias PFNglUniform2i64vNVPROC = fn void(GLint location, GLsizei count, GLint64EXT* value);
PFNglUniform2i64vNVPROC uniform2i64vNV = null;
alias PFNglUniform2iARBPROC = fn void(GLint location, GLint v0, GLint v1);
PFNglUniform2iARBPROC uniform2iARB = null;
alias PFNglUniform2ivPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform2ivPROC uniform2iv = null;
alias PFNglUniform2ivARBPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform2ivARBPROC uniform2ivARB = null;
alias PFNglUniform2uiPROC = fn void(GLint location, GLuint v0, GLuint v1);
PFNglUniform2uiPROC uniform2ui = null;
alias PFNglUniform2ui64ARBPROC = fn void(GLint location, GLuint64 x, GLuint64 y);
PFNglUniform2ui64ARBPROC uniform2ui64ARB = null;
alias PFNglUniform2ui64NVPROC = fn void(GLint location, GLuint64EXT x, GLuint64EXT y);
PFNglUniform2ui64NVPROC uniform2ui64NV = null;
alias PFNglUniform2ui64vARBPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniform2ui64vARBPROC uniform2ui64vARB = null;
alias PFNglUniform2ui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64EXT* value);
PFNglUniform2ui64vNVPROC uniform2ui64vNV = null;
alias PFNglUniform2uiEXTPROC = fn void(GLint location, GLuint v0, GLuint v1);
PFNglUniform2uiEXTPROC uniform2uiEXT = null;
alias PFNglUniform2uivPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform2uivPROC uniform2uiv = null;
alias PFNglUniform2uivEXTPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform2uivEXTPROC uniform2uivEXT = null;
alias PFNglUniform3dPROC = fn void(GLint location, GLdouble x, GLdouble y, GLdouble z);
PFNglUniform3dPROC uniform3d = null;
alias PFNglUniform3dvPROC = fn void(GLint location, GLsizei count, GLdouble* value);
PFNglUniform3dvPROC uniform3dv = null;
alias PFNglUniform3fPROC = fn void(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
PFNglUniform3fPROC uniform3f = null;
alias PFNglUniform3fARBPROC = fn void(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
PFNglUniform3fARBPROC uniform3fARB = null;
alias PFNglUniform3fvPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform3fvPROC uniform3fv = null;
alias PFNglUniform3fvARBPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform3fvARBPROC uniform3fvARB = null;
alias PFNglUniform3iPROC = fn void(GLint location, GLint v0, GLint v1, GLint v2);
PFNglUniform3iPROC uniform3i = null;
alias PFNglUniform3i64ARBPROC = fn void(GLint location, GLint64 x, GLint64 y, GLint64 z);
PFNglUniform3i64ARBPROC uniform3i64ARB = null;
alias PFNglUniform3i64NVPROC = fn void(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
PFNglUniform3i64NVPROC uniform3i64NV = null;
alias PFNglUniform3i64vARBPROC = fn void(GLint location, GLsizei count, GLint64* value);
PFNglUniform3i64vARBPROC uniform3i64vARB = null;
alias PFNglUniform3i64vNVPROC = fn void(GLint location, GLsizei count, GLint64EXT* value);
PFNglUniform3i64vNVPROC uniform3i64vNV = null;
alias PFNglUniform3iARBPROC = fn void(GLint location, GLint v0, GLint v1, GLint v2);
PFNglUniform3iARBPROC uniform3iARB = null;
alias PFNglUniform3ivPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform3ivPROC uniform3iv = null;
alias PFNglUniform3ivARBPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform3ivARBPROC uniform3ivARB = null;
alias PFNglUniform3uiPROC = fn void(GLint location, GLuint v0, GLuint v1, GLuint v2);
PFNglUniform3uiPROC uniform3ui = null;
alias PFNglUniform3ui64ARBPROC = fn void(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
PFNglUniform3ui64ARBPROC uniform3ui64ARB = null;
alias PFNglUniform3ui64NVPROC = fn void(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
PFNglUniform3ui64NVPROC uniform3ui64NV = null;
alias PFNglUniform3ui64vARBPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniform3ui64vARBPROC uniform3ui64vARB = null;
alias PFNglUniform3ui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64EXT* value);
PFNglUniform3ui64vNVPROC uniform3ui64vNV = null;
alias PFNglUniform3uiEXTPROC = fn void(GLint location, GLuint v0, GLuint v1, GLuint v2);
PFNglUniform3uiEXTPROC uniform3uiEXT = null;
alias PFNglUniform3uivPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform3uivPROC uniform3uiv = null;
alias PFNglUniform3uivEXTPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform3uivEXTPROC uniform3uivEXT = null;
alias PFNglUniform4dPROC = fn void(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglUniform4dPROC uniform4d = null;
alias PFNglUniform4dvPROC = fn void(GLint location, GLsizei count, GLdouble* value);
PFNglUniform4dvPROC uniform4dv = null;
alias PFNglUniform4fPROC = fn void(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
PFNglUniform4fPROC uniform4f = null;
alias PFNglUniform4fARBPROC = fn void(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
PFNglUniform4fARBPROC uniform4fARB = null;
alias PFNglUniform4fvPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform4fvPROC uniform4fv = null;
alias PFNglUniform4fvARBPROC = fn void(GLint location, GLsizei count, GLfloat* value);
PFNglUniform4fvARBPROC uniform4fvARB = null;
alias PFNglUniform4iPROC = fn void(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
PFNglUniform4iPROC uniform4i = null;
alias PFNglUniform4i64ARBPROC = fn void(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
PFNglUniform4i64ARBPROC uniform4i64ARB = null;
alias PFNglUniform4i64NVPROC = fn void(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
PFNglUniform4i64NVPROC uniform4i64NV = null;
alias PFNglUniform4i64vARBPROC = fn void(GLint location, GLsizei count, GLint64* value);
PFNglUniform4i64vARBPROC uniform4i64vARB = null;
alias PFNglUniform4i64vNVPROC = fn void(GLint location, GLsizei count, GLint64EXT* value);
PFNglUniform4i64vNVPROC uniform4i64vNV = null;
alias PFNglUniform4iARBPROC = fn void(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
PFNglUniform4iARBPROC uniform4iARB = null;
alias PFNglUniform4ivPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform4ivPROC uniform4iv = null;
alias PFNglUniform4ivARBPROC = fn void(GLint location, GLsizei count, GLint* value);
PFNglUniform4ivARBPROC uniform4ivARB = null;
alias PFNglUniform4uiPROC = fn void(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
PFNglUniform4uiPROC uniform4ui = null;
alias PFNglUniform4ui64ARBPROC = fn void(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
PFNglUniform4ui64ARBPROC uniform4ui64ARB = null;
alias PFNglUniform4ui64NVPROC = fn void(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
PFNglUniform4ui64NVPROC uniform4ui64NV = null;
alias PFNglUniform4ui64vARBPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniform4ui64vARBPROC uniform4ui64vARB = null;
alias PFNglUniform4ui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64EXT* value);
PFNglUniform4ui64vNVPROC uniform4ui64vNV = null;
alias PFNglUniform4uiEXTPROC = fn void(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
PFNglUniform4uiEXTPROC uniform4uiEXT = null;
alias PFNglUniform4uivPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform4uivPROC uniform4uiv = null;
alias PFNglUniform4uivEXTPROC = fn void(GLint location, GLsizei count, GLuint* value);
PFNglUniform4uivEXTPROC uniform4uivEXT = null;
alias PFNglUniformBlockBindingPROC = fn void(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
PFNglUniformBlockBindingPROC uniformBlockBinding = null;
alias PFNglUniformBufferEXTPROC = fn void(GLuint program, GLint location, GLuint buffer);
PFNglUniformBufferEXTPROC uniformBufferEXT = null;
alias PFNglUniformHandleui64ARBPROC = fn void(GLint location, GLuint64 value);
PFNglUniformHandleui64ARBPROC uniformHandleui64ARB = null;
alias PFNglUniformHandleui64IMGPROC = fn void(GLint location, GLuint64 value);
PFNglUniformHandleui64IMGPROC uniformHandleui64IMG = null;
alias PFNglUniformHandleui64NVPROC = fn void(GLint location, GLuint64 value);
PFNglUniformHandleui64NVPROC uniformHandleui64NV = null;
alias PFNglUniformHandleui64vARBPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniformHandleui64vARBPROC uniformHandleui64vARB = null;
alias PFNglUniformHandleui64vIMGPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniformHandleui64vIMGPROC uniformHandleui64vIMG = null;
alias PFNglUniformHandleui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64* value);
PFNglUniformHandleui64vNVPROC uniformHandleui64vNV = null;
alias PFNglUniformMatrix2dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix2dvPROC uniformMatrix2dv = null;
alias PFNglUniformMatrix2fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2fvPROC uniformMatrix2fv = null;
alias PFNglUniformMatrix2fvARBPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2fvARBPROC uniformMatrix2fvARB = null;
alias PFNglUniformMatrix2x3dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix2x3dvPROC uniformMatrix2x3dv = null;
alias PFNglUniformMatrix2x3fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2x3fvPROC uniformMatrix2x3fv = null;
alias PFNglUniformMatrix2x3fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2x3fvNVPROC uniformMatrix2x3fvNV = null;
alias PFNglUniformMatrix2x4dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix2x4dvPROC uniformMatrix2x4dv = null;
alias PFNglUniformMatrix2x4fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2x4fvPROC uniformMatrix2x4fv = null;
alias PFNglUniformMatrix2x4fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix2x4fvNVPROC uniformMatrix2x4fvNV = null;
alias PFNglUniformMatrix3dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix3dvPROC uniformMatrix3dv = null;
alias PFNglUniformMatrix3fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3fvPROC uniformMatrix3fv = null;
alias PFNglUniformMatrix3fvARBPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3fvARBPROC uniformMatrix3fvARB = null;
alias PFNglUniformMatrix3x2dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix3x2dvPROC uniformMatrix3x2dv = null;
alias PFNglUniformMatrix3x2fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3x2fvPROC uniformMatrix3x2fv = null;
alias PFNglUniformMatrix3x2fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3x2fvNVPROC uniformMatrix3x2fvNV = null;
alias PFNglUniformMatrix3x4dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix3x4dvPROC uniformMatrix3x4dv = null;
alias PFNglUniformMatrix3x4fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3x4fvPROC uniformMatrix3x4fv = null;
alias PFNglUniformMatrix3x4fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix3x4fvNVPROC uniformMatrix3x4fvNV = null;
alias PFNglUniformMatrix4dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix4dvPROC uniformMatrix4dv = null;
alias PFNglUniformMatrix4fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4fvPROC uniformMatrix4fv = null;
alias PFNglUniformMatrix4fvARBPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4fvARBPROC uniformMatrix4fvARB = null;
alias PFNglUniformMatrix4x2dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix4x2dvPROC uniformMatrix4x2dv = null;
alias PFNglUniformMatrix4x2fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4x2fvPROC uniformMatrix4x2fv = null;
alias PFNglUniformMatrix4x2fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4x2fvNVPROC uniformMatrix4x2fvNV = null;
alias PFNglUniformMatrix4x3dvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLdouble* value);
PFNglUniformMatrix4x3dvPROC uniformMatrix4x3dv = null;
alias PFNglUniformMatrix4x3fvPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4x3fvPROC uniformMatrix4x3fv = null;
alias PFNglUniformMatrix4x3fvNVPROC = fn void(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
PFNglUniformMatrix4x3fvNVPROC uniformMatrix4x3fvNV = null;
alias PFNglUniformSubroutinesuivPROC = fn void(GLenum shadertype, GLsizei count, GLuint* indices);
PFNglUniformSubroutinesuivPROC uniformSubroutinesuiv = null;
alias PFNglUniformui64NVPROC = fn void(GLint location, GLuint64EXT value);
PFNglUniformui64NVPROC uniformui64NV = null;
alias PFNglUniformui64vNVPROC = fn void(GLint location, GLsizei count, GLuint64EXT* value);
PFNglUniformui64vNVPROC uniformui64vNV = null;
alias PFNglUnlockArraysEXTPROC = fn void();
PFNglUnlockArraysEXTPROC unlockArraysEXT = null;
alias PFNglUnmapBufferPROC = fn GLboolean(GLenum target);
PFNglUnmapBufferPROC unmapBuffer = null;
alias PFNglUnmapBufferARBPROC = fn GLboolean(GLenum target);
PFNglUnmapBufferARBPROC unmapBufferARB = null;
alias PFNglUnmapBufferOESPROC = fn GLboolean(GLenum target);
PFNglUnmapBufferOESPROC unmapBufferOES = null;
alias PFNglUnmapNamedBufferPROC = fn GLboolean(GLuint buffer);
PFNglUnmapNamedBufferPROC unmapNamedBuffer = null;
alias PFNglUnmapNamedBufferEXTPROC = fn GLboolean(GLuint buffer);
PFNglUnmapNamedBufferEXTPROC unmapNamedBufferEXT = null;
alias PFNglUnmapObjectBufferATIPROC = fn void(GLuint buffer);
PFNglUnmapObjectBufferATIPROC unmapObjectBufferATI = null;
alias PFNglUnmapTexture2DINTELPROC = fn void(GLuint texture, GLint level);
PFNglUnmapTexture2DINTELPROC unmapTexture2DINTEL = null;
alias PFNglUpdateObjectBufferATIPROC = fn void(GLuint buffer, GLuint offset, GLsizei size, void* pointer, GLenum preserve);
PFNglUpdateObjectBufferATIPROC updateObjectBufferATI = null;
alias PFNglUploadGpuMaskNVXPROC = fn void(GLbitfield mask);
PFNglUploadGpuMaskNVXPROC uploadGpuMaskNVX = null;
alias PFNglUseProgramPROC = fn void(GLuint program);
PFNglUseProgramPROC useProgram = null;
alias PFNglUseProgramObjectARBPROC = fn void(GLhandleARB programObj);
PFNglUseProgramObjectARBPROC useProgramObjectARB = null;
alias PFNglUseProgramStagesPROC = fn void(GLuint pipeline, GLbitfield stages, GLuint program);
PFNglUseProgramStagesPROC useProgramStages = null;
alias PFNglUseProgramStagesEXTPROC = fn void(GLuint pipeline, GLbitfield stages, GLuint program);
PFNglUseProgramStagesEXTPROC useProgramStagesEXT = null;
alias PFNglUseShaderProgramEXTPROC = fn void(GLenum type, GLuint program);
PFNglUseShaderProgramEXTPROC useShaderProgramEXT = null;
alias PFNglVDPAUFiniNVPROC = fn void();
PFNglVDPAUFiniNVPROC vDPAUFiniNV = null;
alias PFNglVDPAUGetSurfaceivNVPROC = fn void(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
PFNglVDPAUGetSurfaceivNVPROC vDPAUGetSurfaceivNV = null;
alias PFNglVDPAUInitNVPROC = fn void(void* vdpDevice, void* getProcAddress);
PFNglVDPAUInitNVPROC vDPAUInitNV = null;
alias PFNglVDPAUIsSurfaceNVPROC = fn GLboolean(GLvdpauSurfaceNV surface);
PFNglVDPAUIsSurfaceNVPROC vDPAUIsSurfaceNV = null;
alias PFNglVDPAUMapSurfacesNVPROC = fn void(GLsizei numSurfaces, GLvdpauSurfaceNV* surfaces);
PFNglVDPAUMapSurfacesNVPROC vDPAUMapSurfacesNV = null;
alias PFNglVDPAURegisterOutputSurfaceNVPROC = fn GLvdpauSurfaceNV(void* vdpSurface, GLenum target, GLsizei numTextureNames, GLuint* textureNames);
PFNglVDPAURegisterOutputSurfaceNVPROC vDPAURegisterOutputSurfaceNV = null;
alias PFNglVDPAURegisterVideoSurfaceNVPROC = fn GLvdpauSurfaceNV(void* vdpSurface, GLenum target, GLsizei numTextureNames, GLuint* textureNames);
PFNglVDPAURegisterVideoSurfaceNVPROC vDPAURegisterVideoSurfaceNV = null;
alias PFNglVDPAURegisterVideoSurfaceWithPictureStructureNVPROC = fn GLvdpauSurfaceNV(void* vdpSurface, GLenum target, GLsizei numTextureNames, GLuint* textureNames, GLboolean isFrameStructure);
PFNglVDPAURegisterVideoSurfaceWithPictureStructureNVPROC vDPAURegisterVideoSurfaceWithPictureStructureNV = null;
alias PFNglVDPAUSurfaceAccessNVPROC = fn void(GLvdpauSurfaceNV surface, GLenum access);
PFNglVDPAUSurfaceAccessNVPROC vDPAUSurfaceAccessNV = null;
alias PFNglVDPAUUnmapSurfacesNVPROC = fn void(GLsizei numSurface, GLvdpauSurfaceNV* surfaces);
PFNglVDPAUUnmapSurfacesNVPROC vDPAUUnmapSurfacesNV = null;
alias PFNglVDPAUUnregisterSurfaceNVPROC = fn void(GLvdpauSurfaceNV surface);
PFNglVDPAUUnregisterSurfaceNVPROC vDPAUUnregisterSurfaceNV = null;
alias PFNglValidateProgramPROC = fn void(GLuint program);
PFNglValidateProgramPROC validateProgram = null;
alias PFNglValidateProgramARBPROC = fn void(GLhandleARB programObj);
PFNglValidateProgramARBPROC validateProgramARB = null;
alias PFNglValidateProgramPipelinePROC = fn void(GLuint pipeline);
PFNglValidateProgramPipelinePROC validateProgramPipeline = null;
alias PFNglValidateProgramPipelineEXTPROC = fn void(GLuint pipeline);
PFNglValidateProgramPipelineEXTPROC validateProgramPipelineEXT = null;
alias PFNglVariantArrayObjectATIPROC = fn void(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
PFNglVariantArrayObjectATIPROC variantArrayObjectATI = null;
alias PFNglVariantPointerEXTPROC = fn void(GLuint id, GLenum type, GLuint stride, void* addr);
PFNglVariantPointerEXTPROC variantPointerEXT = null;
alias PFNglVariantbvEXTPROC = fn void(GLuint id, GLbyte* addr);
PFNglVariantbvEXTPROC variantbvEXT = null;
alias PFNglVariantdvEXTPROC = fn void(GLuint id, GLdouble* addr);
PFNglVariantdvEXTPROC variantdvEXT = null;
alias PFNglVariantfvEXTPROC = fn void(GLuint id, GLfloat* addr);
PFNglVariantfvEXTPROC variantfvEXT = null;
alias PFNglVariantivEXTPROC = fn void(GLuint id, GLint* addr);
PFNglVariantivEXTPROC variantivEXT = null;
alias PFNglVariantsvEXTPROC = fn void(GLuint id, GLshort* addr);
PFNglVariantsvEXTPROC variantsvEXT = null;
alias PFNglVariantubvEXTPROC = fn void(GLuint id, GLubyte* addr);
PFNglVariantubvEXTPROC variantubvEXT = null;
alias PFNglVariantuivEXTPROC = fn void(GLuint id, GLuint* addr);
PFNglVariantuivEXTPROC variantuivEXT = null;
alias PFNglVariantusvEXTPROC = fn void(GLuint id, GLushort* addr);
PFNglVariantusvEXTPROC variantusvEXT = null;
alias PFNglVertex2bOESPROC = fn void(GLbyte x, GLbyte y);
PFNglVertex2bOESPROC vertex2bOES = null;
alias PFNglVertex2bvOESPROC = fn void(GLbyte* coords);
PFNglVertex2bvOESPROC vertex2bvOES = null;
alias PFNglVertex2dPROC = fn void(GLdouble x, GLdouble y);
PFNglVertex2dPROC vertex2d = null;
alias PFNglVertex2dvPROC = fn void(GLdouble* v);
PFNglVertex2dvPROC vertex2dv = null;
alias PFNglVertex2fPROC = fn void(GLfloat x, GLfloat y);
PFNglVertex2fPROC vertex2f = null;
alias PFNglVertex2fvPROC = fn void(GLfloat* v);
PFNglVertex2fvPROC vertex2fv = null;
alias PFNglVertex2hNVPROC = fn void(GLhalfNV x, GLhalfNV y);
PFNglVertex2hNVPROC vertex2hNV = null;
alias PFNglVertex2hvNVPROC = fn void(GLhalfNV* v);
PFNglVertex2hvNVPROC vertex2hvNV = null;
alias PFNglVertex2iPROC = fn void(GLint x, GLint y);
PFNglVertex2iPROC vertex2i = null;
alias PFNglVertex2ivPROC = fn void(GLint* v);
PFNglVertex2ivPROC vertex2iv = null;
alias PFNglVertex2sPROC = fn void(GLshort x, GLshort y);
PFNglVertex2sPROC vertex2s = null;
alias PFNglVertex2svPROC = fn void(GLshort* v);
PFNglVertex2svPROC vertex2sv = null;
alias PFNglVertex2xOESPROC = fn void(GLfixed x);
PFNglVertex2xOESPROC vertex2xOES = null;
alias PFNglVertex2xvOESPROC = fn void(GLfixed* coords);
PFNglVertex2xvOESPROC vertex2xvOES = null;
alias PFNglVertex3bOESPROC = fn void(GLbyte x, GLbyte y, GLbyte z);
PFNglVertex3bOESPROC vertex3bOES = null;
alias PFNglVertex3bvOESPROC = fn void(GLbyte* coords);
PFNglVertex3bvOESPROC vertex3bvOES = null;
alias PFNglVertex3dPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglVertex3dPROC vertex3d = null;
alias PFNglVertex3dvPROC = fn void(GLdouble* v);
PFNglVertex3dvPROC vertex3dv = null;
alias PFNglVertex3fPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglVertex3fPROC vertex3f = null;
alias PFNglVertex3fvPROC = fn void(GLfloat* v);
PFNglVertex3fvPROC vertex3fv = null;
alias PFNglVertex3hNVPROC = fn void(GLhalfNV x, GLhalfNV y, GLhalfNV z);
PFNglVertex3hNVPROC vertex3hNV = null;
alias PFNglVertex3hvNVPROC = fn void(GLhalfNV* v);
PFNglVertex3hvNVPROC vertex3hvNV = null;
alias PFNglVertex3iPROC = fn void(GLint x, GLint y, GLint z);
PFNglVertex3iPROC vertex3i = null;
alias PFNglVertex3ivPROC = fn void(GLint* v);
PFNglVertex3ivPROC vertex3iv = null;
alias PFNglVertex3sPROC = fn void(GLshort x, GLshort y, GLshort z);
PFNglVertex3sPROC vertex3s = null;
alias PFNglVertex3svPROC = fn void(GLshort* v);
PFNglVertex3svPROC vertex3sv = null;
alias PFNglVertex3xOESPROC = fn void(GLfixed x, GLfixed y);
PFNglVertex3xOESPROC vertex3xOES = null;
alias PFNglVertex3xvOESPROC = fn void(GLfixed* coords);
PFNglVertex3xvOESPROC vertex3xvOES = null;
alias PFNglVertex4bOESPROC = fn void(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
PFNglVertex4bOESPROC vertex4bOES = null;
alias PFNglVertex4bvOESPROC = fn void(GLbyte* coords);
PFNglVertex4bvOESPROC vertex4bvOES = null;
alias PFNglVertex4dPROC = fn void(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertex4dPROC vertex4d = null;
alias PFNglVertex4dvPROC = fn void(GLdouble* v);
PFNglVertex4dvPROC vertex4dv = null;
alias PFNglVertex4fPROC = fn void(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglVertex4fPROC vertex4f = null;
alias PFNglVertex4fvPROC = fn void(GLfloat* v);
PFNglVertex4fvPROC vertex4fv = null;
alias PFNglVertex4hNVPROC = fn void(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
PFNglVertex4hNVPROC vertex4hNV = null;
alias PFNglVertex4hvNVPROC = fn void(GLhalfNV* v);
PFNglVertex4hvNVPROC vertex4hvNV = null;
alias PFNglVertex4iPROC = fn void(GLint x, GLint y, GLint z, GLint w);
PFNglVertex4iPROC vertex4i = null;
alias PFNglVertex4ivPROC = fn void(GLint* v);
PFNglVertex4ivPROC vertex4iv = null;
alias PFNglVertex4sPROC = fn void(GLshort x, GLshort y, GLshort z, GLshort w);
PFNglVertex4sPROC vertex4s = null;
alias PFNglVertex4svPROC = fn void(GLshort* v);
PFNglVertex4svPROC vertex4sv = null;
alias PFNglVertex4xOESPROC = fn void(GLfixed x, GLfixed y, GLfixed z);
PFNglVertex4xOESPROC vertex4xOES = null;
alias PFNglVertex4xvOESPROC = fn void(GLfixed* coords);
PFNglVertex4xvOESPROC vertex4xvOES = null;
alias PFNglVertexArrayAttribBindingPROC = fn void(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
PFNglVertexArrayAttribBindingPROC vertexArrayAttribBinding = null;
alias PFNglVertexArrayAttribFormatPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
PFNglVertexArrayAttribFormatPROC vertexArrayAttribFormat = null;
alias PFNglVertexArrayAttribIFormatPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexArrayAttribIFormatPROC vertexArrayAttribIFormat = null;
alias PFNglVertexArrayAttribLFormatPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexArrayAttribLFormatPROC vertexArrayAttribLFormat = null;
alias PFNglVertexArrayBindVertexBufferEXTPROC = fn void(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
PFNglVertexArrayBindVertexBufferEXTPROC vertexArrayBindVertexBufferEXT = null;
alias PFNglVertexArrayBindingDivisorPROC = fn void(GLuint vaobj, GLuint bindingindex, GLuint divisor);
PFNglVertexArrayBindingDivisorPROC vertexArrayBindingDivisor = null;
alias PFNglVertexArrayColorOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayColorOffsetEXTPROC vertexArrayColorOffsetEXT = null;
alias PFNglVertexArrayEdgeFlagOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
PFNglVertexArrayEdgeFlagOffsetEXTPROC vertexArrayEdgeFlagOffsetEXT = null;
alias PFNglVertexArrayElementBufferPROC = fn void(GLuint vaobj, GLuint buffer);
PFNglVertexArrayElementBufferPROC vertexArrayElementBuffer = null;
alias PFNglVertexArrayFogCoordOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayFogCoordOffsetEXTPROC vertexArrayFogCoordOffsetEXT = null;
alias PFNglVertexArrayIndexOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayIndexOffsetEXTPROC vertexArrayIndexOffsetEXT = null;
alias PFNglVertexArrayMultiTexCoordOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayMultiTexCoordOffsetEXTPROC vertexArrayMultiTexCoordOffsetEXT = null;
alias PFNglVertexArrayNormalOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayNormalOffsetEXTPROC vertexArrayNormalOffsetEXT = null;
alias PFNglVertexArrayParameteriAPPLEPROC = fn void(GLenum pname, GLint param);
PFNglVertexArrayParameteriAPPLEPROC vertexArrayParameteriAPPLE = null;
alias PFNglVertexArrayRangeAPPLEPROC = fn void(GLsizei length, void* pointer);
PFNglVertexArrayRangeAPPLEPROC vertexArrayRangeAPPLE = null;
alias PFNglVertexArrayRangeNVPROC = fn void(GLsizei length, void* pointer);
PFNglVertexArrayRangeNVPROC vertexArrayRangeNV = null;
alias PFNglVertexArraySecondaryColorOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArraySecondaryColorOffsetEXTPROC vertexArraySecondaryColorOffsetEXT = null;
alias PFNglVertexArrayTexCoordOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayTexCoordOffsetEXTPROC vertexArrayTexCoordOffsetEXT = null;
alias PFNglVertexArrayVertexAttribBindingEXTPROC = fn void(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
PFNglVertexArrayVertexAttribBindingEXTPROC vertexArrayVertexAttribBindingEXT = null;
alias PFNglVertexArrayVertexAttribDivisorEXTPROC = fn void(GLuint vaobj, GLuint index, GLuint divisor);
PFNglVertexArrayVertexAttribDivisorEXTPROC vertexArrayVertexAttribDivisorEXT = null;
alias PFNglVertexArrayVertexAttribFormatEXTPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
PFNglVertexArrayVertexAttribFormatEXTPROC vertexArrayVertexAttribFormatEXT = null;
alias PFNglVertexArrayVertexAttribIFormatEXTPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexArrayVertexAttribIFormatEXTPROC vertexArrayVertexAttribIFormatEXT = null;
alias PFNglVertexArrayVertexAttribIOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayVertexAttribIOffsetEXTPROC vertexArrayVertexAttribIOffsetEXT = null;
alias PFNglVertexArrayVertexAttribLFormatEXTPROC = fn void(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexArrayVertexAttribLFormatEXTPROC vertexArrayVertexAttribLFormatEXT = null;
alias PFNglVertexArrayVertexAttribLOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayVertexAttribLOffsetEXTPROC vertexArrayVertexAttribLOffsetEXT = null;
alias PFNglVertexArrayVertexAttribOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
PFNglVertexArrayVertexAttribOffsetEXTPROC vertexArrayVertexAttribOffsetEXT = null;
alias PFNglVertexArrayVertexBindingDivisorEXTPROC = fn void(GLuint vaobj, GLuint bindingindex, GLuint divisor);
PFNglVertexArrayVertexBindingDivisorEXTPROC vertexArrayVertexBindingDivisorEXT = null;
alias PFNglVertexArrayVertexBufferPROC = fn void(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
PFNglVertexArrayVertexBufferPROC vertexArrayVertexBuffer = null;
alias PFNglVertexArrayVertexBuffersPROC = fn void(GLuint vaobj, GLuint first, GLsizei count, GLuint* buffers, GLintptr* offsets, GLsizei* strides);
PFNglVertexArrayVertexBuffersPROC vertexArrayVertexBuffers = null;
alias PFNglVertexArrayVertexOffsetEXTPROC = fn void(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
PFNglVertexArrayVertexOffsetEXTPROC vertexArrayVertexOffsetEXT = null;
alias PFNglVertexAttrib1dPROC = fn void(GLuint index, GLdouble x);
PFNglVertexAttrib1dPROC vertexAttrib1d = null;
alias PFNglVertexAttrib1dARBPROC = fn void(GLuint index, GLdouble x);
PFNglVertexAttrib1dARBPROC vertexAttrib1dARB = null;
alias PFNglVertexAttrib1dNVPROC = fn void(GLuint index, GLdouble x);
PFNglVertexAttrib1dNVPROC vertexAttrib1dNV = null;
alias PFNglVertexAttrib1dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib1dvPROC vertexAttrib1dv = null;
alias PFNglVertexAttrib1dvARBPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib1dvARBPROC vertexAttrib1dvARB = null;
alias PFNglVertexAttrib1dvNVPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib1dvNVPROC vertexAttrib1dvNV = null;
alias PFNglVertexAttrib1fPROC = fn void(GLuint index, GLfloat x);
PFNglVertexAttrib1fPROC vertexAttrib1f = null;
alias PFNglVertexAttrib1fARBPROC = fn void(GLuint index, GLfloat x);
PFNglVertexAttrib1fARBPROC vertexAttrib1fARB = null;
alias PFNglVertexAttrib1fNVPROC = fn void(GLuint index, GLfloat x);
PFNglVertexAttrib1fNVPROC vertexAttrib1fNV = null;
alias PFNglVertexAttrib1fvPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib1fvPROC vertexAttrib1fv = null;
alias PFNglVertexAttrib1fvARBPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib1fvARBPROC vertexAttrib1fvARB = null;
alias PFNglVertexAttrib1fvNVPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib1fvNVPROC vertexAttrib1fvNV = null;
alias PFNglVertexAttrib1hNVPROC = fn void(GLuint index, GLhalfNV x);
PFNglVertexAttrib1hNVPROC vertexAttrib1hNV = null;
alias PFNglVertexAttrib1hvNVPROC = fn void(GLuint index, GLhalfNV* v);
PFNglVertexAttrib1hvNVPROC vertexAttrib1hvNV = null;
alias PFNglVertexAttrib1sPROC = fn void(GLuint index, GLshort x);
PFNglVertexAttrib1sPROC vertexAttrib1s = null;
alias PFNglVertexAttrib1sARBPROC = fn void(GLuint index, GLshort x);
PFNglVertexAttrib1sARBPROC vertexAttrib1sARB = null;
alias PFNglVertexAttrib1sNVPROC = fn void(GLuint index, GLshort x);
PFNglVertexAttrib1sNVPROC vertexAttrib1sNV = null;
alias PFNglVertexAttrib1svPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib1svPROC vertexAttrib1sv = null;
alias PFNglVertexAttrib1svARBPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib1svARBPROC vertexAttrib1svARB = null;
alias PFNglVertexAttrib1svNVPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib1svNVPROC vertexAttrib1svNV = null;
alias PFNglVertexAttrib2dPROC = fn void(GLuint index, GLdouble x, GLdouble y);
PFNglVertexAttrib2dPROC vertexAttrib2d = null;
alias PFNglVertexAttrib2dARBPROC = fn void(GLuint index, GLdouble x, GLdouble y);
PFNglVertexAttrib2dARBPROC vertexAttrib2dARB = null;
alias PFNglVertexAttrib2dNVPROC = fn void(GLuint index, GLdouble x, GLdouble y);
PFNglVertexAttrib2dNVPROC vertexAttrib2dNV = null;
alias PFNglVertexAttrib2dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib2dvPROC vertexAttrib2dv = null;
alias PFNglVertexAttrib2dvARBPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib2dvARBPROC vertexAttrib2dvARB = null;
alias PFNglVertexAttrib2dvNVPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib2dvNVPROC vertexAttrib2dvNV = null;
alias PFNglVertexAttrib2fPROC = fn void(GLuint index, GLfloat x, GLfloat y);
PFNglVertexAttrib2fPROC vertexAttrib2f = null;
alias PFNglVertexAttrib2fARBPROC = fn void(GLuint index, GLfloat x, GLfloat y);
PFNglVertexAttrib2fARBPROC vertexAttrib2fARB = null;
alias PFNglVertexAttrib2fNVPROC = fn void(GLuint index, GLfloat x, GLfloat y);
PFNglVertexAttrib2fNVPROC vertexAttrib2fNV = null;
alias PFNglVertexAttrib2fvPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib2fvPROC vertexAttrib2fv = null;
alias PFNglVertexAttrib2fvARBPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib2fvARBPROC vertexAttrib2fvARB = null;
alias PFNglVertexAttrib2fvNVPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib2fvNVPROC vertexAttrib2fvNV = null;
alias PFNglVertexAttrib2hNVPROC = fn void(GLuint index, GLhalfNV x, GLhalfNV y);
PFNglVertexAttrib2hNVPROC vertexAttrib2hNV = null;
alias PFNglVertexAttrib2hvNVPROC = fn void(GLuint index, GLhalfNV* v);
PFNglVertexAttrib2hvNVPROC vertexAttrib2hvNV = null;
alias PFNglVertexAttrib2sPROC = fn void(GLuint index, GLshort x, GLshort y);
PFNglVertexAttrib2sPROC vertexAttrib2s = null;
alias PFNglVertexAttrib2sARBPROC = fn void(GLuint index, GLshort x, GLshort y);
PFNglVertexAttrib2sARBPROC vertexAttrib2sARB = null;
alias PFNglVertexAttrib2sNVPROC = fn void(GLuint index, GLshort x, GLshort y);
PFNglVertexAttrib2sNVPROC vertexAttrib2sNV = null;
alias PFNglVertexAttrib2svPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib2svPROC vertexAttrib2sv = null;
alias PFNglVertexAttrib2svARBPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib2svARBPROC vertexAttrib2svARB = null;
alias PFNglVertexAttrib2svNVPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib2svNVPROC vertexAttrib2svNV = null;
alias PFNglVertexAttrib3dPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexAttrib3dPROC vertexAttrib3d = null;
alias PFNglVertexAttrib3dARBPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexAttrib3dARBPROC vertexAttrib3dARB = null;
alias PFNglVertexAttrib3dNVPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexAttrib3dNVPROC vertexAttrib3dNV = null;
alias PFNglVertexAttrib3dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib3dvPROC vertexAttrib3dv = null;
alias PFNglVertexAttrib3dvARBPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib3dvARBPROC vertexAttrib3dvARB = null;
alias PFNglVertexAttrib3dvNVPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib3dvNVPROC vertexAttrib3dvNV = null;
alias PFNglVertexAttrib3fPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z);
PFNglVertexAttrib3fPROC vertexAttrib3f = null;
alias PFNglVertexAttrib3fARBPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z);
PFNglVertexAttrib3fARBPROC vertexAttrib3fARB = null;
alias PFNglVertexAttrib3fNVPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z);
PFNglVertexAttrib3fNVPROC vertexAttrib3fNV = null;
alias PFNglVertexAttrib3fvPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib3fvPROC vertexAttrib3fv = null;
alias PFNglVertexAttrib3fvARBPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib3fvARBPROC vertexAttrib3fvARB = null;
alias PFNglVertexAttrib3fvNVPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib3fvNVPROC vertexAttrib3fvNV = null;
alias PFNglVertexAttrib3hNVPROC = fn void(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
PFNglVertexAttrib3hNVPROC vertexAttrib3hNV = null;
alias PFNglVertexAttrib3hvNVPROC = fn void(GLuint index, GLhalfNV* v);
PFNglVertexAttrib3hvNVPROC vertexAttrib3hvNV = null;
alias PFNglVertexAttrib3sPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z);
PFNglVertexAttrib3sPROC vertexAttrib3s = null;
alias PFNglVertexAttrib3sARBPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z);
PFNglVertexAttrib3sARBPROC vertexAttrib3sARB = null;
alias PFNglVertexAttrib3sNVPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z);
PFNglVertexAttrib3sNVPROC vertexAttrib3sNV = null;
alias PFNglVertexAttrib3svPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib3svPROC vertexAttrib3sv = null;
alias PFNglVertexAttrib3svARBPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib3svARBPROC vertexAttrib3svARB = null;
alias PFNglVertexAttrib3svNVPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib3svNVPROC vertexAttrib3svNV = null;
alias PFNglVertexAttrib4NbvPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttrib4NbvPROC vertexAttrib4Nbv = null;
alias PFNglVertexAttrib4NbvARBPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttrib4NbvARBPROC vertexAttrib4NbvARB = null;
alias PFNglVertexAttrib4NivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttrib4NivPROC vertexAttrib4Niv = null;
alias PFNglVertexAttrib4NivARBPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttrib4NivARBPROC vertexAttrib4NivARB = null;
alias PFNglVertexAttrib4NsvPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib4NsvPROC vertexAttrib4Nsv = null;
alias PFNglVertexAttrib4NsvARBPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib4NsvARBPROC vertexAttrib4NsvARB = null;
alias PFNglVertexAttrib4NubPROC = fn void(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
PFNglVertexAttrib4NubPROC vertexAttrib4Nub = null;
alias PFNglVertexAttrib4NubARBPROC = fn void(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
PFNglVertexAttrib4NubARBPROC vertexAttrib4NubARB = null;
alias PFNglVertexAttrib4NubvPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttrib4NubvPROC vertexAttrib4Nubv = null;
alias PFNglVertexAttrib4NubvARBPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttrib4NubvARBPROC vertexAttrib4NubvARB = null;
alias PFNglVertexAttrib4NuivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttrib4NuivPROC vertexAttrib4Nuiv = null;
alias PFNglVertexAttrib4NuivARBPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttrib4NuivARBPROC vertexAttrib4NuivARB = null;
alias PFNglVertexAttrib4NusvPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttrib4NusvPROC vertexAttrib4Nusv = null;
alias PFNglVertexAttrib4NusvARBPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttrib4NusvARBPROC vertexAttrib4NusvARB = null;
alias PFNglVertexAttrib4bvPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttrib4bvPROC vertexAttrib4bv = null;
alias PFNglVertexAttrib4bvARBPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttrib4bvARBPROC vertexAttrib4bvARB = null;
alias PFNglVertexAttrib4dPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexAttrib4dPROC vertexAttrib4d = null;
alias PFNglVertexAttrib4dARBPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexAttrib4dARBPROC vertexAttrib4dARB = null;
alias PFNglVertexAttrib4dNVPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexAttrib4dNVPROC vertexAttrib4dNV = null;
alias PFNglVertexAttrib4dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib4dvPROC vertexAttrib4dv = null;
alias PFNglVertexAttrib4dvARBPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib4dvARBPROC vertexAttrib4dvARB = null;
alias PFNglVertexAttrib4dvNVPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttrib4dvNVPROC vertexAttrib4dvNV = null;
alias PFNglVertexAttrib4fPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglVertexAttrib4fPROC vertexAttrib4f = null;
alias PFNglVertexAttrib4fARBPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglVertexAttrib4fARBPROC vertexAttrib4fARB = null;
alias PFNglVertexAttrib4fNVPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglVertexAttrib4fNVPROC vertexAttrib4fNV = null;
alias PFNglVertexAttrib4fvPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib4fvPROC vertexAttrib4fv = null;
alias PFNglVertexAttrib4fvARBPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib4fvARBPROC vertexAttrib4fvARB = null;
alias PFNglVertexAttrib4fvNVPROC = fn void(GLuint index, GLfloat* v);
PFNglVertexAttrib4fvNVPROC vertexAttrib4fvNV = null;
alias PFNglVertexAttrib4hNVPROC = fn void(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
PFNglVertexAttrib4hNVPROC vertexAttrib4hNV = null;
alias PFNglVertexAttrib4hvNVPROC = fn void(GLuint index, GLhalfNV* v);
PFNglVertexAttrib4hvNVPROC vertexAttrib4hvNV = null;
alias PFNglVertexAttrib4ivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttrib4ivPROC vertexAttrib4iv = null;
alias PFNglVertexAttrib4ivARBPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttrib4ivARBPROC vertexAttrib4ivARB = null;
alias PFNglVertexAttrib4sPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
PFNglVertexAttrib4sPROC vertexAttrib4s = null;
alias PFNglVertexAttrib4sARBPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
PFNglVertexAttrib4sARBPROC vertexAttrib4sARB = null;
alias PFNglVertexAttrib4sNVPROC = fn void(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
PFNglVertexAttrib4sNVPROC vertexAttrib4sNV = null;
alias PFNglVertexAttrib4svPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib4svPROC vertexAttrib4sv = null;
alias PFNglVertexAttrib4svARBPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib4svARBPROC vertexAttrib4svARB = null;
alias PFNglVertexAttrib4svNVPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttrib4svNVPROC vertexAttrib4svNV = null;
alias PFNglVertexAttrib4ubNVPROC = fn void(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
PFNglVertexAttrib4ubNVPROC vertexAttrib4ubNV = null;
alias PFNglVertexAttrib4ubvPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttrib4ubvPROC vertexAttrib4ubv = null;
alias PFNglVertexAttrib4ubvARBPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttrib4ubvARBPROC vertexAttrib4ubvARB = null;
alias PFNglVertexAttrib4ubvNVPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttrib4ubvNVPROC vertexAttrib4ubvNV = null;
alias PFNglVertexAttrib4uivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttrib4uivPROC vertexAttrib4uiv = null;
alias PFNglVertexAttrib4uivARBPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttrib4uivARBPROC vertexAttrib4uivARB = null;
alias PFNglVertexAttrib4usvPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttrib4usvPROC vertexAttrib4usv = null;
alias PFNglVertexAttrib4usvARBPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttrib4usvARBPROC vertexAttrib4usvARB = null;
alias PFNglVertexAttribArrayObjectATIPROC = fn void(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
PFNglVertexAttribArrayObjectATIPROC vertexAttribArrayObjectATI = null;
alias PFNglVertexAttribBindingPROC = fn void(GLuint attribindex, GLuint bindingindex);
PFNglVertexAttribBindingPROC vertexAttribBinding = null;
alias PFNglVertexAttribDivisorPROC = fn void(GLuint index, GLuint divisor);
PFNglVertexAttribDivisorPROC vertexAttribDivisor = null;
alias PFNglVertexAttribDivisorANGLEPROC = fn void(GLuint index, GLuint divisor);
PFNglVertexAttribDivisorANGLEPROC vertexAttribDivisorANGLE = null;
alias PFNglVertexAttribDivisorARBPROC = fn void(GLuint index, GLuint divisor);
PFNglVertexAttribDivisorARBPROC vertexAttribDivisorARB = null;
alias PFNglVertexAttribDivisorEXTPROC = fn void(GLuint index, GLuint divisor);
PFNglVertexAttribDivisorEXTPROC vertexAttribDivisorEXT = null;
alias PFNglVertexAttribDivisorNVPROC = fn void(GLuint index, GLuint divisor);
PFNglVertexAttribDivisorNVPROC vertexAttribDivisorNV = null;
alias PFNglVertexAttribFormatPROC = fn void(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
PFNglVertexAttribFormatPROC vertexAttribFormat = null;
alias PFNglVertexAttribFormatNVPROC = fn void(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
PFNglVertexAttribFormatNVPROC vertexAttribFormatNV = null;
alias PFNglVertexAttribI1iPROC = fn void(GLuint index, GLint x);
PFNglVertexAttribI1iPROC vertexAttribI1i = null;
alias PFNglVertexAttribI1iEXTPROC = fn void(GLuint index, GLint x);
PFNglVertexAttribI1iEXTPROC vertexAttribI1iEXT = null;
alias PFNglVertexAttribI1ivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI1ivPROC vertexAttribI1iv = null;
alias PFNglVertexAttribI1ivEXTPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI1ivEXTPROC vertexAttribI1ivEXT = null;
alias PFNglVertexAttribI1uiPROC = fn void(GLuint index, GLuint x);
PFNglVertexAttribI1uiPROC vertexAttribI1ui = null;
alias PFNglVertexAttribI1uiEXTPROC = fn void(GLuint index, GLuint x);
PFNglVertexAttribI1uiEXTPROC vertexAttribI1uiEXT = null;
alias PFNglVertexAttribI1uivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI1uivPROC vertexAttribI1uiv = null;
alias PFNglVertexAttribI1uivEXTPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI1uivEXTPROC vertexAttribI1uivEXT = null;
alias PFNglVertexAttribI2iPROC = fn void(GLuint index, GLint x, GLint y);
PFNglVertexAttribI2iPROC vertexAttribI2i = null;
alias PFNglVertexAttribI2iEXTPROC = fn void(GLuint index, GLint x, GLint y);
PFNglVertexAttribI2iEXTPROC vertexAttribI2iEXT = null;
alias PFNglVertexAttribI2ivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI2ivPROC vertexAttribI2iv = null;
alias PFNglVertexAttribI2ivEXTPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI2ivEXTPROC vertexAttribI2ivEXT = null;
alias PFNglVertexAttribI2uiPROC = fn void(GLuint index, GLuint x, GLuint y);
PFNglVertexAttribI2uiPROC vertexAttribI2ui = null;
alias PFNglVertexAttribI2uiEXTPROC = fn void(GLuint index, GLuint x, GLuint y);
PFNglVertexAttribI2uiEXTPROC vertexAttribI2uiEXT = null;
alias PFNglVertexAttribI2uivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI2uivPROC vertexAttribI2uiv = null;
alias PFNglVertexAttribI2uivEXTPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI2uivEXTPROC vertexAttribI2uivEXT = null;
alias PFNglVertexAttribI3iPROC = fn void(GLuint index, GLint x, GLint y, GLint z);
PFNglVertexAttribI3iPROC vertexAttribI3i = null;
alias PFNglVertexAttribI3iEXTPROC = fn void(GLuint index, GLint x, GLint y, GLint z);
PFNglVertexAttribI3iEXTPROC vertexAttribI3iEXT = null;
alias PFNglVertexAttribI3ivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI3ivPROC vertexAttribI3iv = null;
alias PFNglVertexAttribI3ivEXTPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI3ivEXTPROC vertexAttribI3ivEXT = null;
alias PFNglVertexAttribI3uiPROC = fn void(GLuint index, GLuint x, GLuint y, GLuint z);
PFNglVertexAttribI3uiPROC vertexAttribI3ui = null;
alias PFNglVertexAttribI3uiEXTPROC = fn void(GLuint index, GLuint x, GLuint y, GLuint z);
PFNglVertexAttribI3uiEXTPROC vertexAttribI3uiEXT = null;
alias PFNglVertexAttribI3uivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI3uivPROC vertexAttribI3uiv = null;
alias PFNglVertexAttribI3uivEXTPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI3uivEXTPROC vertexAttribI3uivEXT = null;
alias PFNglVertexAttribI4bvPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttribI4bvPROC vertexAttribI4bv = null;
alias PFNglVertexAttribI4bvEXTPROC = fn void(GLuint index, GLbyte* v);
PFNglVertexAttribI4bvEXTPROC vertexAttribI4bvEXT = null;
alias PFNglVertexAttribI4iPROC = fn void(GLuint index, GLint x, GLint y, GLint z, GLint w);
PFNglVertexAttribI4iPROC vertexAttribI4i = null;
alias PFNglVertexAttribI4iEXTPROC = fn void(GLuint index, GLint x, GLint y, GLint z, GLint w);
PFNglVertexAttribI4iEXTPROC vertexAttribI4iEXT = null;
alias PFNglVertexAttribI4ivPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI4ivPROC vertexAttribI4iv = null;
alias PFNglVertexAttribI4ivEXTPROC = fn void(GLuint index, GLint* v);
PFNglVertexAttribI4ivEXTPROC vertexAttribI4ivEXT = null;
alias PFNglVertexAttribI4svPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttribI4svPROC vertexAttribI4sv = null;
alias PFNglVertexAttribI4svEXTPROC = fn void(GLuint index, GLshort* v);
PFNglVertexAttribI4svEXTPROC vertexAttribI4svEXT = null;
alias PFNglVertexAttribI4ubvPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttribI4ubvPROC vertexAttribI4ubv = null;
alias PFNglVertexAttribI4ubvEXTPROC = fn void(GLuint index, GLubyte* v);
PFNglVertexAttribI4ubvEXTPROC vertexAttribI4ubvEXT = null;
alias PFNglVertexAttribI4uiPROC = fn void(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
PFNglVertexAttribI4uiPROC vertexAttribI4ui = null;
alias PFNglVertexAttribI4uiEXTPROC = fn void(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
PFNglVertexAttribI4uiEXTPROC vertexAttribI4uiEXT = null;
alias PFNglVertexAttribI4uivPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI4uivPROC vertexAttribI4uiv = null;
alias PFNglVertexAttribI4uivEXTPROC = fn void(GLuint index, GLuint* v);
PFNglVertexAttribI4uivEXTPROC vertexAttribI4uivEXT = null;
alias PFNglVertexAttribI4usvPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttribI4usvPROC vertexAttribI4usv = null;
alias PFNglVertexAttribI4usvEXTPROC = fn void(GLuint index, GLushort* v);
PFNglVertexAttribI4usvEXTPROC vertexAttribI4usvEXT = null;
alias PFNglVertexAttribIFormatPROC = fn void(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexAttribIFormatPROC vertexAttribIFormat = null;
alias PFNglVertexAttribIFormatNVPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride);
PFNglVertexAttribIFormatNVPROC vertexAttribIFormatNV = null;
alias PFNglVertexAttribIPointerPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexAttribIPointerPROC vertexAttribIPointer = null;
alias PFNglVertexAttribIPointerEXTPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexAttribIPointerEXTPROC vertexAttribIPointerEXT = null;
alias PFNglVertexAttribL1dPROC = fn void(GLuint index, GLdouble x);
PFNglVertexAttribL1dPROC vertexAttribL1d = null;
alias PFNglVertexAttribL1dEXTPROC = fn void(GLuint index, GLdouble x);
PFNglVertexAttribL1dEXTPROC vertexAttribL1dEXT = null;
alias PFNglVertexAttribL1dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL1dvPROC vertexAttribL1dv = null;
alias PFNglVertexAttribL1dvEXTPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL1dvEXTPROC vertexAttribL1dvEXT = null;
alias PFNglVertexAttribL1i64NVPROC = fn void(GLuint index, GLint64EXT x);
PFNglVertexAttribL1i64NVPROC vertexAttribL1i64NV = null;
alias PFNglVertexAttribL1i64vNVPROC = fn void(GLuint index, GLint64EXT* v);
PFNglVertexAttribL1i64vNVPROC vertexAttribL1i64vNV = null;
alias PFNglVertexAttribL1ui64ARBPROC = fn void(GLuint index, GLuint64EXT x);
PFNglVertexAttribL1ui64ARBPROC vertexAttribL1ui64ARB = null;
alias PFNglVertexAttribL1ui64NVPROC = fn void(GLuint index, GLuint64EXT x);
PFNglVertexAttribL1ui64NVPROC vertexAttribL1ui64NV = null;
alias PFNglVertexAttribL1ui64vARBPROC = fn void(GLuint index, GLuint64EXT* v);
PFNglVertexAttribL1ui64vARBPROC vertexAttribL1ui64vARB = null;
alias PFNglVertexAttribL1ui64vNVPROC = fn void(GLuint index, GLuint64EXT* v);
PFNglVertexAttribL1ui64vNVPROC vertexAttribL1ui64vNV = null;
alias PFNglVertexAttribL2dPROC = fn void(GLuint index, GLdouble x, GLdouble y);
PFNglVertexAttribL2dPROC vertexAttribL2d = null;
alias PFNglVertexAttribL2dEXTPROC = fn void(GLuint index, GLdouble x, GLdouble y);
PFNglVertexAttribL2dEXTPROC vertexAttribL2dEXT = null;
alias PFNglVertexAttribL2dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL2dvPROC vertexAttribL2dv = null;
alias PFNglVertexAttribL2dvEXTPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL2dvEXTPROC vertexAttribL2dvEXT = null;
alias PFNglVertexAttribL2i64NVPROC = fn void(GLuint index, GLint64EXT x, GLint64EXT y);
PFNglVertexAttribL2i64NVPROC vertexAttribL2i64NV = null;
alias PFNglVertexAttribL2i64vNVPROC = fn void(GLuint index, GLint64EXT* v);
PFNglVertexAttribL2i64vNVPROC vertexAttribL2i64vNV = null;
alias PFNglVertexAttribL2ui64NVPROC = fn void(GLuint index, GLuint64EXT x, GLuint64EXT y);
PFNglVertexAttribL2ui64NVPROC vertexAttribL2ui64NV = null;
alias PFNglVertexAttribL2ui64vNVPROC = fn void(GLuint index, GLuint64EXT* v);
PFNglVertexAttribL2ui64vNVPROC vertexAttribL2ui64vNV = null;
alias PFNglVertexAttribL3dPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexAttribL3dPROC vertexAttribL3d = null;
alias PFNglVertexAttribL3dEXTPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexAttribL3dEXTPROC vertexAttribL3dEXT = null;
alias PFNglVertexAttribL3dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL3dvPROC vertexAttribL3dv = null;
alias PFNglVertexAttribL3dvEXTPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL3dvEXTPROC vertexAttribL3dvEXT = null;
alias PFNglVertexAttribL3i64NVPROC = fn void(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
PFNglVertexAttribL3i64NVPROC vertexAttribL3i64NV = null;
alias PFNglVertexAttribL3i64vNVPROC = fn void(GLuint index, GLint64EXT* v);
PFNglVertexAttribL3i64vNVPROC vertexAttribL3i64vNV = null;
alias PFNglVertexAttribL3ui64NVPROC = fn void(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
PFNglVertexAttribL3ui64NVPROC vertexAttribL3ui64NV = null;
alias PFNglVertexAttribL3ui64vNVPROC = fn void(GLuint index, GLuint64EXT* v);
PFNglVertexAttribL3ui64vNVPROC vertexAttribL3ui64vNV = null;
alias PFNglVertexAttribL4dPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexAttribL4dPROC vertexAttribL4d = null;
alias PFNglVertexAttribL4dEXTPROC = fn void(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexAttribL4dEXTPROC vertexAttribL4dEXT = null;
alias PFNglVertexAttribL4dvPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL4dvPROC vertexAttribL4dv = null;
alias PFNglVertexAttribL4dvEXTPROC = fn void(GLuint index, GLdouble* v);
PFNglVertexAttribL4dvEXTPROC vertexAttribL4dvEXT = null;
alias PFNglVertexAttribL4i64NVPROC = fn void(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
PFNglVertexAttribL4i64NVPROC vertexAttribL4i64NV = null;
alias PFNglVertexAttribL4i64vNVPROC = fn void(GLuint index, GLint64EXT* v);
PFNglVertexAttribL4i64vNVPROC vertexAttribL4i64vNV = null;
alias PFNglVertexAttribL4ui64NVPROC = fn void(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
PFNglVertexAttribL4ui64NVPROC vertexAttribL4ui64NV = null;
alias PFNglVertexAttribL4ui64vNVPROC = fn void(GLuint index, GLuint64EXT* v);
PFNglVertexAttribL4ui64vNVPROC vertexAttribL4ui64vNV = null;
alias PFNglVertexAttribLFormatPROC = fn void(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
PFNglVertexAttribLFormatPROC vertexAttribLFormat = null;
alias PFNglVertexAttribLFormatNVPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride);
PFNglVertexAttribLFormatNVPROC vertexAttribLFormatNV = null;
alias PFNglVertexAttribLPointerPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexAttribLPointerPROC vertexAttribLPointer = null;
alias PFNglVertexAttribLPointerEXTPROC = fn void(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexAttribLPointerEXTPROC vertexAttribLPointerEXT = null;
alias PFNglVertexAttribP1uiPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint value);
PFNglVertexAttribP1uiPROC vertexAttribP1ui = null;
alias PFNglVertexAttribP1uivPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
PFNglVertexAttribP1uivPROC vertexAttribP1uiv = null;
alias PFNglVertexAttribP2uiPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint value);
PFNglVertexAttribP2uiPROC vertexAttribP2ui = null;
alias PFNglVertexAttribP2uivPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
PFNglVertexAttribP2uivPROC vertexAttribP2uiv = null;
alias PFNglVertexAttribP3uiPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint value);
PFNglVertexAttribP3uiPROC vertexAttribP3ui = null;
alias PFNglVertexAttribP3uivPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
PFNglVertexAttribP3uivPROC vertexAttribP3uiv = null;
alias PFNglVertexAttribP4uiPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint value);
PFNglVertexAttribP4uiPROC vertexAttribP4ui = null;
alias PFNglVertexAttribP4uivPROC = fn void(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
PFNglVertexAttribP4uivPROC vertexAttribP4uiv = null;
alias PFNglVertexAttribParameteriAMDPROC = fn void(GLuint index, GLenum pname, GLint param);
PFNglVertexAttribParameteriAMDPROC vertexAttribParameteriAMD = null;
alias PFNglVertexAttribPointerPROC = fn void(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* pointer);
PFNglVertexAttribPointerPROC vertexAttribPointer = null;
alias PFNglVertexAttribPointerARBPROC = fn void(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* pointer);
PFNglVertexAttribPointerARBPROC vertexAttribPointerARB = null;
alias PFNglVertexAttribPointerNVPROC = fn void(GLuint index, GLint fsize, GLenum type, GLsizei stride, void* pointer);
PFNglVertexAttribPointerNVPROC vertexAttribPointerNV = null;
alias PFNglVertexAttribs1dvNVPROC = fn void(GLuint index, GLsizei count, GLdouble* v);
PFNglVertexAttribs1dvNVPROC vertexAttribs1dvNV = null;
alias PFNglVertexAttribs1fvNVPROC = fn void(GLuint index, GLsizei count, GLfloat* v);
PFNglVertexAttribs1fvNVPROC vertexAttribs1fvNV = null;
alias PFNglVertexAttribs1hvNVPROC = fn void(GLuint index, GLsizei n, GLhalfNV* v);
PFNglVertexAttribs1hvNVPROC vertexAttribs1hvNV = null;
alias PFNglVertexAttribs1svNVPROC = fn void(GLuint index, GLsizei count, GLshort* v);
PFNglVertexAttribs1svNVPROC vertexAttribs1svNV = null;
alias PFNglVertexAttribs2dvNVPROC = fn void(GLuint index, GLsizei count, GLdouble* v);
PFNglVertexAttribs2dvNVPROC vertexAttribs2dvNV = null;
alias PFNglVertexAttribs2fvNVPROC = fn void(GLuint index, GLsizei count, GLfloat* v);
PFNglVertexAttribs2fvNVPROC vertexAttribs2fvNV = null;
alias PFNglVertexAttribs2hvNVPROC = fn void(GLuint index, GLsizei n, GLhalfNV* v);
PFNglVertexAttribs2hvNVPROC vertexAttribs2hvNV = null;
alias PFNglVertexAttribs2svNVPROC = fn void(GLuint index, GLsizei count, GLshort* v);
PFNglVertexAttribs2svNVPROC vertexAttribs2svNV = null;
alias PFNglVertexAttribs3dvNVPROC = fn void(GLuint index, GLsizei count, GLdouble* v);
PFNglVertexAttribs3dvNVPROC vertexAttribs3dvNV = null;
alias PFNglVertexAttribs3fvNVPROC = fn void(GLuint index, GLsizei count, GLfloat* v);
PFNglVertexAttribs3fvNVPROC vertexAttribs3fvNV = null;
alias PFNglVertexAttribs3hvNVPROC = fn void(GLuint index, GLsizei n, GLhalfNV* v);
PFNglVertexAttribs3hvNVPROC vertexAttribs3hvNV = null;
alias PFNglVertexAttribs3svNVPROC = fn void(GLuint index, GLsizei count, GLshort* v);
PFNglVertexAttribs3svNVPROC vertexAttribs3svNV = null;
alias PFNglVertexAttribs4dvNVPROC = fn void(GLuint index, GLsizei count, GLdouble* v);
PFNglVertexAttribs4dvNVPROC vertexAttribs4dvNV = null;
alias PFNglVertexAttribs4fvNVPROC = fn void(GLuint index, GLsizei count, GLfloat* v);
PFNglVertexAttribs4fvNVPROC vertexAttribs4fvNV = null;
alias PFNglVertexAttribs4hvNVPROC = fn void(GLuint index, GLsizei n, GLhalfNV* v);
PFNglVertexAttribs4hvNVPROC vertexAttribs4hvNV = null;
alias PFNglVertexAttribs4svNVPROC = fn void(GLuint index, GLsizei count, GLshort* v);
PFNglVertexAttribs4svNVPROC vertexAttribs4svNV = null;
alias PFNglVertexAttribs4ubvNVPROC = fn void(GLuint index, GLsizei count, GLubyte* v);
PFNglVertexAttribs4ubvNVPROC vertexAttribs4ubvNV = null;
alias PFNglVertexBindingDivisorPROC = fn void(GLuint bindingindex, GLuint divisor);
PFNglVertexBindingDivisorPROC vertexBindingDivisor = null;
alias PFNglVertexBlendARBPROC = fn void(GLint count);
PFNglVertexBlendARBPROC vertexBlendARB = null;
alias PFNglVertexBlendEnvfATIPROC = fn void(GLenum pname, GLfloat param);
PFNglVertexBlendEnvfATIPROC vertexBlendEnvfATI = null;
alias PFNglVertexBlendEnviATIPROC = fn void(GLenum pname, GLint param);
PFNglVertexBlendEnviATIPROC vertexBlendEnviATI = null;
alias PFNglVertexFormatNVPROC = fn void(GLint size, GLenum type, GLsizei stride);
PFNglVertexFormatNVPROC vertexFormatNV = null;
alias PFNglVertexP2uiPROC = fn void(GLenum type, GLuint value);
PFNglVertexP2uiPROC vertexP2ui = null;
alias PFNglVertexP2uivPROC = fn void(GLenum type, GLuint* value);
PFNglVertexP2uivPROC vertexP2uiv = null;
alias PFNglVertexP3uiPROC = fn void(GLenum type, GLuint value);
PFNglVertexP3uiPROC vertexP3ui = null;
alias PFNglVertexP3uivPROC = fn void(GLenum type, GLuint* value);
PFNglVertexP3uivPROC vertexP3uiv = null;
alias PFNglVertexP4uiPROC = fn void(GLenum type, GLuint value);
PFNglVertexP4uiPROC vertexP4ui = null;
alias PFNglVertexP4uivPROC = fn void(GLenum type, GLuint* value);
PFNglVertexP4uivPROC vertexP4uiv = null;
alias PFNglVertexPointerPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexPointerPROC vertexPointer = null;
alias PFNglVertexPointerEXTPROC = fn void(GLint size, GLenum type, GLsizei stride, GLsizei count, void* pointer);
PFNglVertexPointerEXTPROC vertexPointerEXT = null;
alias PFNglVertexPointerListIBMPROC = fn void(GLint size, GLenum type, GLint stride, void** pointer, GLint ptrstride);
PFNglVertexPointerListIBMPROC vertexPointerListIBM = null;
alias PFNglVertexPointervINTELPROC = fn void(GLint size, GLenum type, void** pointer);
PFNglVertexPointervINTELPROC vertexPointervINTEL = null;
alias PFNglVertexStream1dATIPROC = fn void(GLenum stream, GLdouble x);
PFNglVertexStream1dATIPROC vertexStream1dATI = null;
alias PFNglVertexStream1dvATIPROC = fn void(GLenum stream, GLdouble* coords);
PFNglVertexStream1dvATIPROC vertexStream1dvATI = null;
alias PFNglVertexStream1fATIPROC = fn void(GLenum stream, GLfloat x);
PFNglVertexStream1fATIPROC vertexStream1fATI = null;
alias PFNglVertexStream1fvATIPROC = fn void(GLenum stream, GLfloat* coords);
PFNglVertexStream1fvATIPROC vertexStream1fvATI = null;
alias PFNglVertexStream1iATIPROC = fn void(GLenum stream, GLint x);
PFNglVertexStream1iATIPROC vertexStream1iATI = null;
alias PFNglVertexStream1ivATIPROC = fn void(GLenum stream, GLint* coords);
PFNglVertexStream1ivATIPROC vertexStream1ivATI = null;
alias PFNglVertexStream1sATIPROC = fn void(GLenum stream, GLshort x);
PFNglVertexStream1sATIPROC vertexStream1sATI = null;
alias PFNglVertexStream1svATIPROC = fn void(GLenum stream, GLshort* coords);
PFNglVertexStream1svATIPROC vertexStream1svATI = null;
alias PFNglVertexStream2dATIPROC = fn void(GLenum stream, GLdouble x, GLdouble y);
PFNglVertexStream2dATIPROC vertexStream2dATI = null;
alias PFNglVertexStream2dvATIPROC = fn void(GLenum stream, GLdouble* coords);
PFNglVertexStream2dvATIPROC vertexStream2dvATI = null;
alias PFNglVertexStream2fATIPROC = fn void(GLenum stream, GLfloat x, GLfloat y);
PFNglVertexStream2fATIPROC vertexStream2fATI = null;
alias PFNglVertexStream2fvATIPROC = fn void(GLenum stream, GLfloat* coords);
PFNglVertexStream2fvATIPROC vertexStream2fvATI = null;
alias PFNglVertexStream2iATIPROC = fn void(GLenum stream, GLint x, GLint y);
PFNglVertexStream2iATIPROC vertexStream2iATI = null;
alias PFNglVertexStream2ivATIPROC = fn void(GLenum stream, GLint* coords);
PFNglVertexStream2ivATIPROC vertexStream2ivATI = null;
alias PFNglVertexStream2sATIPROC = fn void(GLenum stream, GLshort x, GLshort y);
PFNglVertexStream2sATIPROC vertexStream2sATI = null;
alias PFNglVertexStream2svATIPROC = fn void(GLenum stream, GLshort* coords);
PFNglVertexStream2svATIPROC vertexStream2svATI = null;
alias PFNglVertexStream3dATIPROC = fn void(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
PFNglVertexStream3dATIPROC vertexStream3dATI = null;
alias PFNglVertexStream3dvATIPROC = fn void(GLenum stream, GLdouble* coords);
PFNglVertexStream3dvATIPROC vertexStream3dvATI = null;
alias PFNglVertexStream3fATIPROC = fn void(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
PFNglVertexStream3fATIPROC vertexStream3fATI = null;
alias PFNglVertexStream3fvATIPROC = fn void(GLenum stream, GLfloat* coords);
PFNglVertexStream3fvATIPROC vertexStream3fvATI = null;
alias PFNglVertexStream3iATIPROC = fn void(GLenum stream, GLint x, GLint y, GLint z);
PFNglVertexStream3iATIPROC vertexStream3iATI = null;
alias PFNglVertexStream3ivATIPROC = fn void(GLenum stream, GLint* coords);
PFNglVertexStream3ivATIPROC vertexStream3ivATI = null;
alias PFNglVertexStream3sATIPROC = fn void(GLenum stream, GLshort x, GLshort y, GLshort z);
PFNglVertexStream3sATIPROC vertexStream3sATI = null;
alias PFNglVertexStream3svATIPROC = fn void(GLenum stream, GLshort* coords);
PFNglVertexStream3svATIPROC vertexStream3svATI = null;
alias PFNglVertexStream4dATIPROC = fn void(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglVertexStream4dATIPROC vertexStream4dATI = null;
alias PFNglVertexStream4dvATIPROC = fn void(GLenum stream, GLdouble* coords);
PFNglVertexStream4dvATIPROC vertexStream4dvATI = null;
alias PFNglVertexStream4fATIPROC = fn void(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglVertexStream4fATIPROC vertexStream4fATI = null;
alias PFNglVertexStream4fvATIPROC = fn void(GLenum stream, GLfloat* coords);
PFNglVertexStream4fvATIPROC vertexStream4fvATI = null;
alias PFNglVertexStream4iATIPROC = fn void(GLenum stream, GLint x, GLint y, GLint z, GLint w);
PFNglVertexStream4iATIPROC vertexStream4iATI = null;
alias PFNglVertexStream4ivATIPROC = fn void(GLenum stream, GLint* coords);
PFNglVertexStream4ivATIPROC vertexStream4ivATI = null;
alias PFNglVertexStream4sATIPROC = fn void(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
PFNglVertexStream4sATIPROC vertexStream4sATI = null;
alias PFNglVertexStream4svATIPROC = fn void(GLenum stream, GLshort* coords);
PFNglVertexStream4svATIPROC vertexStream4svATI = null;
alias PFNglVertexWeightPointerEXTPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglVertexWeightPointerEXTPROC vertexWeightPointerEXT = null;
alias PFNglVertexWeightfEXTPROC = fn void(GLfloat weight);
PFNglVertexWeightfEXTPROC vertexWeightfEXT = null;
alias PFNglVertexWeightfvEXTPROC = fn void(GLfloat* weight);
PFNglVertexWeightfvEXTPROC vertexWeightfvEXT = null;
alias PFNglVertexWeighthNVPROC = fn void(GLhalfNV weight);
PFNglVertexWeighthNVPROC vertexWeighthNV = null;
alias PFNglVertexWeighthvNVPROC = fn void(GLhalfNV* weight);
PFNglVertexWeighthvNVPROC vertexWeighthvNV = null;
alias PFNglVideoCaptureNVPROC = fn GLenum(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time);
PFNglVideoCaptureNVPROC videoCaptureNV = null;
alias PFNglVideoCaptureStreamParameterdvNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
PFNglVideoCaptureStreamParameterdvNVPROC videoCaptureStreamParameterdvNV = null;
alias PFNglVideoCaptureStreamParameterfvNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
PFNglVideoCaptureStreamParameterfvNVPROC videoCaptureStreamParameterfvNV = null;
alias PFNglVideoCaptureStreamParameterivNVPROC = fn void(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
PFNglVideoCaptureStreamParameterivNVPROC videoCaptureStreamParameterivNV = null;
alias PFNglViewportPROC = fn void(GLint x, GLint y, GLsizei width, GLsizei height);
PFNglViewportPROC viewport = null;
alias PFNglViewportArrayvPROC = fn void(GLuint first, GLsizei count, GLfloat* v);
PFNglViewportArrayvPROC viewportArrayv = null;
alias PFNglViewportArrayvNVPROC = fn void(GLuint first, GLsizei count, GLfloat* v);
PFNglViewportArrayvNVPROC viewportArrayvNV = null;
alias PFNglViewportArrayvOESPROC = fn void(GLuint first, GLsizei count, GLfloat* v);
PFNglViewportArrayvOESPROC viewportArrayvOES = null;
alias PFNglViewportIndexedfPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
PFNglViewportIndexedfPROC viewportIndexedf = null;
alias PFNglViewportIndexedfOESPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
PFNglViewportIndexedfOESPROC viewportIndexedfOES = null;
alias PFNglViewportIndexedfNVPROC = fn void(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
PFNglViewportIndexedfNVPROC viewportIndexedfNV = null;
alias PFNglViewportIndexedfvPROC = fn void(GLuint index, GLfloat* v);
PFNglViewportIndexedfvPROC viewportIndexedfv = null;
alias PFNglViewportIndexedfvOESPROC = fn void(GLuint index, GLfloat* v);
PFNglViewportIndexedfvOESPROC viewportIndexedfvOES = null;
alias PFNglViewportIndexedfvNVPROC = fn void(GLuint index, GLfloat* v);
PFNglViewportIndexedfvNVPROC viewportIndexedfvNV = null;
alias PFNglViewportPositionWScaleNVPROC = fn void(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
PFNglViewportPositionWScaleNVPROC viewportPositionWScaleNV = null;
alias PFNglViewportSwizzleNVPROC = fn void(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
PFNglViewportSwizzleNVPROC viewportSwizzleNV = null;
alias PFNglWaitSemaphoreEXTPROC = fn void(GLuint semaphore, GLuint numBufferBarriers, GLuint* buffers, GLuint numTextureBarriers, GLuint* textures, GLenum* srcLayouts);
PFNglWaitSemaphoreEXTPROC waitSemaphoreEXT = null;
alias PFNglWaitSemaphoreui64NVXPROC = fn void(GLuint waitGpu, GLsizei fenceObjectCount, GLuint* semaphoreArray, GLuint64* fenceValueArray);
PFNglWaitSemaphoreui64NVXPROC waitSemaphoreui64NVX = null;
alias PFNglWaitSyncPROC = fn void(GLsync sync, GLbitfield flags, GLuint64 timeout);
PFNglWaitSyncPROC waitSync = null;
alias PFNglWaitSyncAPPLEPROC = fn void(GLsync sync, GLbitfield flags, GLuint64 timeout);
PFNglWaitSyncAPPLEPROC waitSyncAPPLE = null;
alias PFNglWeightPathsNVPROC = fn void(GLuint resultPath, GLsizei numPaths, GLuint* paths, GLfloat* weights);
PFNglWeightPathsNVPROC weightPathsNV = null;
alias PFNglWeightPointerARBPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglWeightPointerARBPROC weightPointerARB = null;
alias PFNglWeightPointerOESPROC = fn void(GLint size, GLenum type, GLsizei stride, void* pointer);
PFNglWeightPointerOESPROC weightPointerOES = null;
alias PFNglWeightbvARBPROC = fn void(GLint size, GLbyte* weights);
PFNglWeightbvARBPROC weightbvARB = null;
alias PFNglWeightdvARBPROC = fn void(GLint size, GLdouble* weights);
PFNglWeightdvARBPROC weightdvARB = null;
alias PFNglWeightfvARBPROC = fn void(GLint size, GLfloat* weights);
PFNglWeightfvARBPROC weightfvARB = null;
alias PFNglWeightivARBPROC = fn void(GLint size, GLint* weights);
PFNglWeightivARBPROC weightivARB = null;
alias PFNglWeightsvARBPROC = fn void(GLint size, GLshort* weights);
PFNglWeightsvARBPROC weightsvARB = null;
alias PFNglWeightubvARBPROC = fn void(GLint size, GLubyte* weights);
PFNglWeightubvARBPROC weightubvARB = null;
alias PFNglWeightuivARBPROC = fn void(GLint size, GLuint* weights);
PFNglWeightuivARBPROC weightuivARB = null;
alias PFNglWeightusvARBPROC = fn void(GLint size, GLushort* weights);
PFNglWeightusvARBPROC weightusvARB = null;
alias PFNglWindowPos2dPROC = fn void(GLdouble x, GLdouble y);
PFNglWindowPos2dPROC windowPos2d = null;
alias PFNglWindowPos2dARBPROC = fn void(GLdouble x, GLdouble y);
PFNglWindowPos2dARBPROC windowPos2dARB = null;
alias PFNglWindowPos2dMESAPROC = fn void(GLdouble x, GLdouble y);
PFNglWindowPos2dMESAPROC windowPos2dMESA = null;
alias PFNglWindowPos2dvPROC = fn void(GLdouble* v);
PFNglWindowPos2dvPROC windowPos2dv = null;
alias PFNglWindowPos2dvARBPROC = fn void(GLdouble* v);
PFNglWindowPos2dvARBPROC windowPos2dvARB = null;
alias PFNglWindowPos2dvMESAPROC = fn void(GLdouble* v);
PFNglWindowPos2dvMESAPROC windowPos2dvMESA = null;
alias PFNglWindowPos2fPROC = fn void(GLfloat x, GLfloat y);
PFNglWindowPos2fPROC windowPos2f = null;
alias PFNglWindowPos2fARBPROC = fn void(GLfloat x, GLfloat y);
PFNglWindowPos2fARBPROC windowPos2fARB = null;
alias PFNglWindowPos2fMESAPROC = fn void(GLfloat x, GLfloat y);
PFNglWindowPos2fMESAPROC windowPos2fMESA = null;
alias PFNglWindowPos2fvPROC = fn void(GLfloat* v);
PFNglWindowPos2fvPROC windowPos2fv = null;
alias PFNglWindowPos2fvARBPROC = fn void(GLfloat* v);
PFNglWindowPos2fvARBPROC windowPos2fvARB = null;
alias PFNglWindowPos2fvMESAPROC = fn void(GLfloat* v);
PFNglWindowPos2fvMESAPROC windowPos2fvMESA = null;
alias PFNglWindowPos2iPROC = fn void(GLint x, GLint y);
PFNglWindowPos2iPROC windowPos2i = null;
alias PFNglWindowPos2iARBPROC = fn void(GLint x, GLint y);
PFNglWindowPos2iARBPROC windowPos2iARB = null;
alias PFNglWindowPos2iMESAPROC = fn void(GLint x, GLint y);
PFNglWindowPos2iMESAPROC windowPos2iMESA = null;
alias PFNglWindowPos2ivPROC = fn void(GLint* v);
PFNglWindowPos2ivPROC windowPos2iv = null;
alias PFNglWindowPos2ivARBPROC = fn void(GLint* v);
PFNglWindowPos2ivARBPROC windowPos2ivARB = null;
alias PFNglWindowPos2ivMESAPROC = fn void(GLint* v);
PFNglWindowPos2ivMESAPROC windowPos2ivMESA = null;
alias PFNglWindowPos2sPROC = fn void(GLshort x, GLshort y);
PFNglWindowPos2sPROC windowPos2s = null;
alias PFNglWindowPos2sARBPROC = fn void(GLshort x, GLshort y);
PFNglWindowPos2sARBPROC windowPos2sARB = null;
alias PFNglWindowPos2sMESAPROC = fn void(GLshort x, GLshort y);
PFNglWindowPos2sMESAPROC windowPos2sMESA = null;
alias PFNglWindowPos2svPROC = fn void(GLshort* v);
PFNglWindowPos2svPROC windowPos2sv = null;
alias PFNglWindowPos2svARBPROC = fn void(GLshort* v);
PFNglWindowPos2svARBPROC windowPos2svARB = null;
alias PFNglWindowPos2svMESAPROC = fn void(GLshort* v);
PFNglWindowPos2svMESAPROC windowPos2svMESA = null;
alias PFNglWindowPos3dPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglWindowPos3dPROC windowPos3d = null;
alias PFNglWindowPos3dARBPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglWindowPos3dARBPROC windowPos3dARB = null;
alias PFNglWindowPos3dMESAPROC = fn void(GLdouble x, GLdouble y, GLdouble z);
PFNglWindowPos3dMESAPROC windowPos3dMESA = null;
alias PFNglWindowPos3dvPROC = fn void(GLdouble* v);
PFNglWindowPos3dvPROC windowPos3dv = null;
alias PFNglWindowPos3dvARBPROC = fn void(GLdouble* v);
PFNglWindowPos3dvARBPROC windowPos3dvARB = null;
alias PFNglWindowPos3dvMESAPROC = fn void(GLdouble* v);
PFNglWindowPos3dvMESAPROC windowPos3dvMESA = null;
alias PFNglWindowPos3fPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglWindowPos3fPROC windowPos3f = null;
alias PFNglWindowPos3fARBPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglWindowPos3fARBPROC windowPos3fARB = null;
alias PFNglWindowPos3fMESAPROC = fn void(GLfloat x, GLfloat y, GLfloat z);
PFNglWindowPos3fMESAPROC windowPos3fMESA = null;
alias PFNglWindowPos3fvPROC = fn void(GLfloat* v);
PFNglWindowPos3fvPROC windowPos3fv = null;
alias PFNglWindowPos3fvARBPROC = fn void(GLfloat* v);
PFNglWindowPos3fvARBPROC windowPos3fvARB = null;
alias PFNglWindowPos3fvMESAPROC = fn void(GLfloat* v);
PFNglWindowPos3fvMESAPROC windowPos3fvMESA = null;
alias PFNglWindowPos3iPROC = fn void(GLint x, GLint y, GLint z);
PFNglWindowPos3iPROC windowPos3i = null;
alias PFNglWindowPos3iARBPROC = fn void(GLint x, GLint y, GLint z);
PFNglWindowPos3iARBPROC windowPos3iARB = null;
alias PFNglWindowPos3iMESAPROC = fn void(GLint x, GLint y, GLint z);
PFNglWindowPos3iMESAPROC windowPos3iMESA = null;
alias PFNglWindowPos3ivPROC = fn void(GLint* v);
PFNglWindowPos3ivPROC windowPos3iv = null;
alias PFNglWindowPos3ivARBPROC = fn void(GLint* v);
PFNglWindowPos3ivARBPROC windowPos3ivARB = null;
alias PFNglWindowPos3ivMESAPROC = fn void(GLint* v);
PFNglWindowPos3ivMESAPROC windowPos3ivMESA = null;
alias PFNglWindowPos3sPROC = fn void(GLshort x, GLshort y, GLshort z);
PFNglWindowPos3sPROC windowPos3s = null;
alias PFNglWindowPos3sARBPROC = fn void(GLshort x, GLshort y, GLshort z);
PFNglWindowPos3sARBPROC windowPos3sARB = null;
alias PFNglWindowPos3sMESAPROC = fn void(GLshort x, GLshort y, GLshort z);
PFNglWindowPos3sMESAPROC windowPos3sMESA = null;
alias PFNglWindowPos3svPROC = fn void(GLshort* v);
PFNglWindowPos3svPROC windowPos3sv = null;
alias PFNglWindowPos3svARBPROC = fn void(GLshort* v);
PFNglWindowPos3svARBPROC windowPos3svARB = null;
alias PFNglWindowPos3svMESAPROC = fn void(GLshort* v);
PFNglWindowPos3svMESAPROC windowPos3svMESA = null;
alias PFNglWindowPos4dMESAPROC = fn void(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
PFNglWindowPos4dMESAPROC windowPos4dMESA = null;
alias PFNglWindowPos4dvMESAPROC = fn void(GLdouble* v);
PFNglWindowPos4dvMESAPROC windowPos4dvMESA = null;
alias PFNglWindowPos4fMESAPROC = fn void(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
PFNglWindowPos4fMESAPROC windowPos4fMESA = null;
alias PFNglWindowPos4fvMESAPROC = fn void(GLfloat* v);
PFNglWindowPos4fvMESAPROC windowPos4fvMESA = null;
alias PFNglWindowPos4iMESAPROC = fn void(GLint x, GLint y, GLint z, GLint w);
PFNglWindowPos4iMESAPROC windowPos4iMESA = null;
alias PFNglWindowPos4ivMESAPROC = fn void(GLint* v);
PFNglWindowPos4ivMESAPROC windowPos4ivMESA = null;
alias PFNglWindowPos4sMESAPROC = fn void(GLshort x, GLshort y, GLshort z, GLshort w);
PFNglWindowPos4sMESAPROC windowPos4sMESA = null;
alias PFNglWindowPos4svMESAPROC = fn void(GLshort* v);
PFNglWindowPos4svMESAPROC windowPos4svMESA = null;
alias PFNglWindowRectanglesEXTPROC = fn void(GLenum mode, GLsizei count, GLint* box);
PFNglWindowRectanglesEXTPROC windowRectanglesEXT = null;
alias PFNglWriteMaskEXTPROC = fn void(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
PFNglWriteMaskEXTPROC writeMaskEXT = null;
alias PFNglDrawVkImageNVPROC = fn void(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
PFNglDrawVkImageNVPROC drawVkImageNV = null;
alias PFNglGetVkProcAddrNVPROC = fn Ext_GLVULKANPROCNV(GLchar* name);
PFNglGetVkProcAddrNVPROC getVkProcAddrNV = null;
alias PFNglWaitVkSemaphoreNVPROC = fn void(GLuint64 vkSemaphore);
PFNglWaitVkSemaphoreNVPROC waitVkSemaphoreNV = null;
alias PFNglSignalVkSemaphoreNVPROC = fn void(GLuint64 vkSemaphore);
PFNglSignalVkSemaphoreNVPROC signalVkSemaphoreNV = null;
alias PFNglSignalVkFenceNVPROC = fn void(GLuint64 vkFence);
PFNglSignalVkFenceNVPROC signalVkFenceNV = null;
alias PFNglFramebufferParameteriMESAPROC = fn void(GLenum target, GLenum pname, GLint param);
PFNglFramebufferParameteriMESAPROC framebufferParameteriMESA = null;
alias PFNglGetFramebufferParameterivMESAPROC = fn void(GLenum target, GLenum pname, GLint* params);
PFNglGetFramebufferParameterivMESAPROC getFramebufferParameterivMESA = null;
fn void load_gl_GL_VERSION_1_0(GLLoadFn load)
{
	cullFace = load("glCullFace");
	frontFace = load("glFrontFace");
	hint = load("glHint");
	lineWidth = load("glLineWidth");
	pointSize = load("glPointSize");
	polygonMode = load("glPolygonMode");
	scissor = load("glScissor");
	texParameterf = load("glTexParameterf");
	texParameterfv = load("glTexParameterfv");
	texParameteri = load("glTexParameteri");
	texParameteriv = load("glTexParameteriv");
	texImage1D = load("glTexImage1D");
	texImage2D = load("glTexImage2D");
	drawBuffer = load("glDrawBuffer");
	clear = load("glClear");
	clearColor = load("glClearColor");
	clearStencil = load("glClearStencil");
	clearDepth = load("glClearDepth");
	stencilMask = load("glStencilMask");
	colorMask = load("glColorMask");
	depthMask = load("glDepthMask");
	disable = load("glDisable");
	enable = load("glEnable");
	finish = load("glFinish");
	flush = load("glFlush");
	blendFunc = load("glBlendFunc");
	logicOp = load("glLogicOp");
	stencilFunc = load("glStencilFunc");
	stencilOp = load("glStencilOp");
	depthFunc = load("glDepthFunc");
	pixelStoref = load("glPixelStoref");
	pixelStorei = load("glPixelStorei");
	readBuffer = load("glReadBuffer");
	readPixels = load("glReadPixels");
	getBooleanv = load("glGetBooleanv");
	getDoublev = load("glGetDoublev");
	getError = load("glGetError");
	getFloatv = load("glGetFloatv");
	getIntegerv = load("glGetIntegerv");
	getString = load("glGetString");
	getTexImage = load("glGetTexImage");
	getTexParameterfv = load("glGetTexParameterfv");
	getTexParameteriv = load("glGetTexParameteriv");
	getTexLevelParameterfv = load("glGetTexLevelParameterfv");
	getTexLevelParameteriv = load("glGetTexLevelParameteriv");
	isEnabled = load("glIsEnabled");
	depthRange = load("glDepthRange");
	viewport = load("glViewport");
	newList = load("glNewList");
	endList = load("glEndList");
	callList = load("glCallList");
	callLists = load("glCallLists");
	deleteLists = load("glDeleteLists");
	genLists = load("glGenLists");
	listBase = load("glListBase");
	begin = load("glBegin");
	bitmap = load("glBitmap");
	color3b = load("glColor3b");
	color3bv = load("glColor3bv");
	color3d = load("glColor3d");
	color3dv = load("glColor3dv");
	color3f = load("glColor3f");
	color3fv = load("glColor3fv");
	color3i = load("glColor3i");
	color3iv = load("glColor3iv");
	color3s = load("glColor3s");
	color3sv = load("glColor3sv");
	color3ub = load("glColor3ub");
	color3ubv = load("glColor3ubv");
	color3ui = load("glColor3ui");
	color3uiv = load("glColor3uiv");
	color3us = load("glColor3us");
	color3usv = load("glColor3usv");
	color4b = load("glColor4b");
	color4bv = load("glColor4bv");
	color4d = load("glColor4d");
	color4dv = load("glColor4dv");
	color4f = load("glColor4f");
	color4fv = load("glColor4fv");
	color4i = load("glColor4i");
	color4iv = load("glColor4iv");
	color4s = load("glColor4s");
	color4sv = load("glColor4sv");
	color4ub = load("glColor4ub");
	color4ubv = load("glColor4ubv");
	color4ui = load("glColor4ui");
	color4uiv = load("glColor4uiv");
	color4us = load("glColor4us");
	color4usv = load("glColor4usv");
	edgeFlag = load("glEdgeFlag");
	edgeFlagv = load("glEdgeFlagv");
	end = load("glEnd");
	indexd = load("glIndexd");
	indexdv = load("glIndexdv");
	indexf = load("glIndexf");
	indexfv = load("glIndexfv");
	indexi = load("glIndexi");
	indexiv = load("glIndexiv");
	indexs = load("glIndexs");
	indexsv = load("glIndexsv");
	normal3b = load("glNormal3b");
	normal3bv = load("glNormal3bv");
	normal3d = load("glNormal3d");
	normal3dv = load("glNormal3dv");
	normal3f = load("glNormal3f");
	normal3fv = load("glNormal3fv");
	normal3i = load("glNormal3i");
	normal3iv = load("glNormal3iv");
	normal3s = load("glNormal3s");
	normal3sv = load("glNormal3sv");
	rasterPos2d = load("glRasterPos2d");
	rasterPos2dv = load("glRasterPos2dv");
	rasterPos2f = load("glRasterPos2f");
	rasterPos2fv = load("glRasterPos2fv");
	rasterPos2i = load("glRasterPos2i");
	rasterPos2iv = load("glRasterPos2iv");
	rasterPos2s = load("glRasterPos2s");
	rasterPos2sv = load("glRasterPos2sv");
	rasterPos3d = load("glRasterPos3d");
	rasterPos3dv = load("glRasterPos3dv");
	rasterPos3f = load("glRasterPos3f");
	rasterPos3fv = load("glRasterPos3fv");
	rasterPos3i = load("glRasterPos3i");
	rasterPos3iv = load("glRasterPos3iv");
	rasterPos3s = load("glRasterPos3s");
	rasterPos3sv = load("glRasterPos3sv");
	rasterPos4d = load("glRasterPos4d");
	rasterPos4dv = load("glRasterPos4dv");
	rasterPos4f = load("glRasterPos4f");
	rasterPos4fv = load("glRasterPos4fv");
	rasterPos4i = load("glRasterPos4i");
	rasterPos4iv = load("glRasterPos4iv");
	rasterPos4s = load("glRasterPos4s");
	rasterPos4sv = load("glRasterPos4sv");
	rectd = load("glRectd");
	rectdv = load("glRectdv");
	rectf = load("glRectf");
	rectfv = load("glRectfv");
	recti = load("glRecti");
	rectiv = load("glRectiv");
	rects = load("glRects");
	rectsv = load("glRectsv");
	texCoord1d = load("glTexCoord1d");
	texCoord1dv = load("glTexCoord1dv");
	texCoord1f = load("glTexCoord1f");
	texCoord1fv = load("glTexCoord1fv");
	texCoord1i = load("glTexCoord1i");
	texCoord1iv = load("glTexCoord1iv");
	texCoord1s = load("glTexCoord1s");
	texCoord1sv = load("glTexCoord1sv");
	texCoord2d = load("glTexCoord2d");
	texCoord2dv = load("glTexCoord2dv");
	texCoord2f = load("glTexCoord2f");
	texCoord2fv = load("glTexCoord2fv");
	texCoord2i = load("glTexCoord2i");
	texCoord2iv = load("glTexCoord2iv");
	texCoord2s = load("glTexCoord2s");
	texCoord2sv = load("glTexCoord2sv");
	texCoord3d = load("glTexCoord3d");
	texCoord3dv = load("glTexCoord3dv");
	texCoord3f = load("glTexCoord3f");
	texCoord3fv = load("glTexCoord3fv");
	texCoord3i = load("glTexCoord3i");
	texCoord3iv = load("glTexCoord3iv");
	texCoord3s = load("glTexCoord3s");
	texCoord3sv = load("glTexCoord3sv");
	texCoord4d = load("glTexCoord4d");
	texCoord4dv = load("glTexCoord4dv");
	texCoord4f = load("glTexCoord4f");
	texCoord4fv = load("glTexCoord4fv");
	texCoord4i = load("glTexCoord4i");
	texCoord4iv = load("glTexCoord4iv");
	texCoord4s = load("glTexCoord4s");
	texCoord4sv = load("glTexCoord4sv");
	vertex2d = load("glVertex2d");
	vertex2dv = load("glVertex2dv");
	vertex2f = load("glVertex2f");
	vertex2fv = load("glVertex2fv");
	vertex2i = load("glVertex2i");
	vertex2iv = load("glVertex2iv");
	vertex2s = load("glVertex2s");
	vertex2sv = load("glVertex2sv");
	vertex3d = load("glVertex3d");
	vertex3dv = load("glVertex3dv");
	vertex3f = load("glVertex3f");
	vertex3fv = load("glVertex3fv");
	vertex3i = load("glVertex3i");
	vertex3iv = load("glVertex3iv");
	vertex3s = load("glVertex3s");
	vertex3sv = load("glVertex3sv");
	vertex4d = load("glVertex4d");
	vertex4dv = load("glVertex4dv");
	vertex4f = load("glVertex4f");
	vertex4fv = load("glVertex4fv");
	vertex4i = load("glVertex4i");
	vertex4iv = load("glVertex4iv");
	vertex4s = load("glVertex4s");
	vertex4sv = load("glVertex4sv");
	clipPlane = load("glClipPlane");
	colorMaterial = load("glColorMaterial");
	fogf = load("glFogf");
	fogfv = load("glFogfv");
	fogi = load("glFogi");
	fogiv = load("glFogiv");
	lightf = load("glLightf");
	lightfv = load("glLightfv");
	lighti = load("glLighti");
	lightiv = load("glLightiv");
	lightModelf = load("glLightModelf");
	lightModelfv = load("glLightModelfv");
	lightModeli = load("glLightModeli");
	lightModeliv = load("glLightModeliv");
	lineStipple = load("glLineStipple");
	materialf = load("glMaterialf");
	materialfv = load("glMaterialfv");
	materiali = load("glMateriali");
	materialiv = load("glMaterialiv");
	polygonStipple = load("glPolygonStipple");
	shadeModel = load("glShadeModel");
	texEnvf = load("glTexEnvf");
	texEnvfv = load("glTexEnvfv");
	texEnvi = load("glTexEnvi");
	texEnviv = load("glTexEnviv");
	texGend = load("glTexGend");
	texGendv = load("glTexGendv");
	texGenf = load("glTexGenf");
	texGenfv = load("glTexGenfv");
	texGeni = load("glTexGeni");
	texGeniv = load("glTexGeniv");
	feedbackBuffer = load("glFeedbackBuffer");
	selectBuffer = load("glSelectBuffer");
	renderMode = load("glRenderMode");
	initNames = load("glInitNames");
	loadName = load("glLoadName");
	passThrough = load("glPassThrough");
	popName = load("glPopName");
	pushName = load("glPushName");
	clearAccum = load("glClearAccum");
	clearIndex = load("glClearIndex");
	indexMask = load("glIndexMask");
	accum = load("glAccum");
	popAttrib = load("glPopAttrib");
	pushAttrib = load("glPushAttrib");
	map1d = load("glMap1d");
	map1f = load("glMap1f");
	map2d = load("glMap2d");
	map2f = load("glMap2f");
	mapGrid1d = load("glMapGrid1d");
	mapGrid1f = load("glMapGrid1f");
	mapGrid2d = load("glMapGrid2d");
	mapGrid2f = load("glMapGrid2f");
	evalCoord1d = load("glEvalCoord1d");
	evalCoord1dv = load("glEvalCoord1dv");
	evalCoord1f = load("glEvalCoord1f");
	evalCoord1fv = load("glEvalCoord1fv");
	evalCoord2d = load("glEvalCoord2d");
	evalCoord2dv = load("glEvalCoord2dv");
	evalCoord2f = load("glEvalCoord2f");
	evalCoord2fv = load("glEvalCoord2fv");
	evalMesh1 = load("glEvalMesh1");
	evalPoint1 = load("glEvalPoint1");
	evalMesh2 = load("glEvalMesh2");
	evalPoint2 = load("glEvalPoint2");
	alphaFunc = load("glAlphaFunc");
	pixelZoom = load("glPixelZoom");
	pixelTransferf = load("glPixelTransferf");
	pixelTransferi = load("glPixelTransferi");
	pixelMapfv = load("glPixelMapfv");
	pixelMapuiv = load("glPixelMapuiv");
	pixelMapusv = load("glPixelMapusv");
	copyPixels = load("glCopyPixels");
	drawPixels = load("glDrawPixels");
	getClipPlane = load("glGetClipPlane");
	getLightfv = load("glGetLightfv");
	getLightiv = load("glGetLightiv");
	getMapdv = load("glGetMapdv");
	getMapfv = load("glGetMapfv");
	getMapiv = load("glGetMapiv");
	getMaterialfv = load("glGetMaterialfv");
	getMaterialiv = load("glGetMaterialiv");
	getPixelMapfv = load("glGetPixelMapfv");
	getPixelMapuiv = load("glGetPixelMapuiv");
	getPixelMapusv = load("glGetPixelMapusv");
	getPolygonStipple = load("glGetPolygonStipple");
	getTexEnvfv = load("glGetTexEnvfv");
	getTexEnviv = load("glGetTexEnviv");
	getTexGendv = load("glGetTexGendv");
	getTexGenfv = load("glGetTexGenfv");
	getTexGeniv = load("glGetTexGeniv");
	isList = load("glIsList");
	frustum = load("glFrustum");
	loadIdentity = load("glLoadIdentity");
	loadMatrixf = load("glLoadMatrixf");
	loadMatrixd = load("glLoadMatrixd");
	matrixMode = load("glMatrixMode");
	multMatrixf = load("glMultMatrixf");
	multMatrixd = load("glMultMatrixd");
	ortho = load("glOrtho");
	popMatrix = load("glPopMatrix");
	pushMatrix = load("glPushMatrix");
	rotated = load("glRotated");
	rotatef = load("glRotatef");
	scaled = load("glScaled");
	scalef = load("glScalef");
	translated = load("glTranslated");
	translatef = load("glTranslatef");
}

fn void load_gl_GL_VERSION_1_1(GLLoadFn load)
{
	drawArrays = load("glDrawArrays");
	drawElements = load("glDrawElements");
	getPointerv = load("glGetPointerv");
	polygonOffset = load("glPolygonOffset");
	copyTexImage1D = load("glCopyTexImage1D");
	copyTexImage2D = load("glCopyTexImage2D");
	copyTexSubImage1D = load("glCopyTexSubImage1D");
	copyTexSubImage2D = load("glCopyTexSubImage2D");
	texSubImage1D = load("glTexSubImage1D");
	texSubImage2D = load("glTexSubImage2D");
	bindTexture = load("glBindTexture");
	deleteTextures = load("glDeleteTextures");
	genTextures = load("glGenTextures");
	isTexture = load("glIsTexture");
	arrayElement = load("glArrayElement");
	colorPointer = load("glColorPointer");
	disableClientState = load("glDisableClientState");
	edgeFlagPointer = load("glEdgeFlagPointer");
	enableClientState = load("glEnableClientState");
	indexPointer = load("glIndexPointer");
	interleavedArrays = load("glInterleavedArrays");
	normalPointer = load("glNormalPointer");
	texCoordPointer = load("glTexCoordPointer");
	vertexPointer = load("glVertexPointer");
	areTexturesResident = load("glAreTexturesResident");
	prioritizeTextures = load("glPrioritizeTextures");
	indexub = load("glIndexub");
	indexubv = load("glIndexubv");
	popClientAttrib = load("glPopClientAttrib");
	pushClientAttrib = load("glPushClientAttrib");
}

fn void load_gl_GL_VERSION_1_2(GLLoadFn load)
{
	drawRangeElements = load("glDrawRangeElements");
	texImage3D = load("glTexImage3D");
	texSubImage3D = load("glTexSubImage3D");
	copyTexSubImage3D = load("glCopyTexSubImage3D");
}

fn void load_gl_GL_VERSION_1_3(GLLoadFn load)
{
	activeTexture = load("glActiveTexture");
	sampleCoverage = load("glSampleCoverage");
	compressedTexImage3D = load("glCompressedTexImage3D");
	compressedTexImage2D = load("glCompressedTexImage2D");
	compressedTexImage1D = load("glCompressedTexImage1D");
	compressedTexSubImage3D = load("glCompressedTexSubImage3D");
	compressedTexSubImage2D = load("glCompressedTexSubImage2D");
	compressedTexSubImage1D = load("glCompressedTexSubImage1D");
	getCompressedTexImage = load("glGetCompressedTexImage");
	clientActiveTexture = load("glClientActiveTexture");
	multiTexCoord1d = load("glMultiTexCoord1d");
	multiTexCoord1dv = load("glMultiTexCoord1dv");
	multiTexCoord1f = load("glMultiTexCoord1f");
	multiTexCoord1fv = load("glMultiTexCoord1fv");
	multiTexCoord1i = load("glMultiTexCoord1i");
	multiTexCoord1iv = load("glMultiTexCoord1iv");
	multiTexCoord1s = load("glMultiTexCoord1s");
	multiTexCoord1sv = load("glMultiTexCoord1sv");
	multiTexCoord2d = load("glMultiTexCoord2d");
	multiTexCoord2dv = load("glMultiTexCoord2dv");
	multiTexCoord2f = load("glMultiTexCoord2f");
	multiTexCoord2fv = load("glMultiTexCoord2fv");
	multiTexCoord2i = load("glMultiTexCoord2i");
	multiTexCoord2iv = load("glMultiTexCoord2iv");
	multiTexCoord2s = load("glMultiTexCoord2s");
	multiTexCoord2sv = load("glMultiTexCoord2sv");
	multiTexCoord3d = load("glMultiTexCoord3d");
	multiTexCoord3dv = load("glMultiTexCoord3dv");
	multiTexCoord3f = load("glMultiTexCoord3f");
	multiTexCoord3fv = load("glMultiTexCoord3fv");
	multiTexCoord3i = load("glMultiTexCoord3i");
	multiTexCoord3iv = load("glMultiTexCoord3iv");
	multiTexCoord3s = load("glMultiTexCoord3s");
	multiTexCoord3sv = load("glMultiTexCoord3sv");
	multiTexCoord4d = load("glMultiTexCoord4d");
	multiTexCoord4dv = load("glMultiTexCoord4dv");
	multiTexCoord4f = load("glMultiTexCoord4f");
	multiTexCoord4fv = load("glMultiTexCoord4fv");
	multiTexCoord4i = load("glMultiTexCoord4i");
	multiTexCoord4iv = load("glMultiTexCoord4iv");
	multiTexCoord4s = load("glMultiTexCoord4s");
	multiTexCoord4sv = load("glMultiTexCoord4sv");
	loadTransposeMatrixf = load("glLoadTransposeMatrixf");
	loadTransposeMatrixd = load("glLoadTransposeMatrixd");
	multTransposeMatrixf = load("glMultTransposeMatrixf");
	multTransposeMatrixd = load("glMultTransposeMatrixd");
}

fn void load_gl_GL_VERSION_1_4(GLLoadFn load)
{
	blendFuncSeparate = load("glBlendFuncSeparate");
	multiDrawArrays = load("glMultiDrawArrays");
	multiDrawElements = load("glMultiDrawElements");
	pointParameterf = load("glPointParameterf");
	pointParameterfv = load("glPointParameterfv");
	pointParameteri = load("glPointParameteri");
	pointParameteriv = load("glPointParameteriv");
	fogCoordf = load("glFogCoordf");
	fogCoordfv = load("glFogCoordfv");
	fogCoordd = load("glFogCoordd");
	fogCoorddv = load("glFogCoorddv");
	fogCoordPointer = load("glFogCoordPointer");
	secondaryColor3b = load("glSecondaryColor3b");
	secondaryColor3bv = load("glSecondaryColor3bv");
	secondaryColor3d = load("glSecondaryColor3d");
	secondaryColor3dv = load("glSecondaryColor3dv");
	secondaryColor3f = load("glSecondaryColor3f");
	secondaryColor3fv = load("glSecondaryColor3fv");
	secondaryColor3i = load("glSecondaryColor3i");
	secondaryColor3iv = load("glSecondaryColor3iv");
	secondaryColor3s = load("glSecondaryColor3s");
	secondaryColor3sv = load("glSecondaryColor3sv");
	secondaryColor3ub = load("glSecondaryColor3ub");
	secondaryColor3ubv = load("glSecondaryColor3ubv");
	secondaryColor3ui = load("glSecondaryColor3ui");
	secondaryColor3uiv = load("glSecondaryColor3uiv");
	secondaryColor3us = load("glSecondaryColor3us");
	secondaryColor3usv = load("glSecondaryColor3usv");
	secondaryColorPointer = load("glSecondaryColorPointer");
	windowPos2d = load("glWindowPos2d");
	windowPos2dv = load("glWindowPos2dv");
	windowPos2f = load("glWindowPos2f");
	windowPos2fv = load("glWindowPos2fv");
	windowPos2i = load("glWindowPos2i");
	windowPos2iv = load("glWindowPos2iv");
	windowPos2s = load("glWindowPos2s");
	windowPos2sv = load("glWindowPos2sv");
	windowPos3d = load("glWindowPos3d");
	windowPos3dv = load("glWindowPos3dv");
	windowPos3f = load("glWindowPos3f");
	windowPos3fv = load("glWindowPos3fv");
	windowPos3i = load("glWindowPos3i");
	windowPos3iv = load("glWindowPos3iv");
	windowPos3s = load("glWindowPos3s");
	windowPos3sv = load("glWindowPos3sv");
	blendColor = load("glBlendColor");
	blendEquation = load("glBlendEquation");
}

fn void load_gl_GL_VERSION_1_5(GLLoadFn load)
{
	genQueries = load("glGenQueries");
	deleteQueries = load("glDeleteQueries");
	isQuery = load("glIsQuery");
	beginQuery = load("glBeginQuery");
	endQuery = load("glEndQuery");
	getQueryiv = load("glGetQueryiv");
	getQueryObjectiv = load("glGetQueryObjectiv");
	getQueryObjectuiv = load("glGetQueryObjectuiv");
	bindBuffer = load("glBindBuffer");
	deleteBuffers = load("glDeleteBuffers");
	genBuffers = load("glGenBuffers");
	isBuffer = load("glIsBuffer");
	bufferData = load("glBufferData");
	bufferSubData = load("glBufferSubData");
	getBufferSubData = load("glGetBufferSubData");
	mapBuffer = load("glMapBuffer");
	unmapBuffer = load("glUnmapBuffer");
	getBufferParameteriv = load("glGetBufferParameteriv");
	getBufferPointerv = load("glGetBufferPointerv");
}

fn void load_gl_GL_VERSION_2_0(GLLoadFn load)
{
	blendEquationSeparate = load("glBlendEquationSeparate");
	drawBuffers = load("glDrawBuffers");
	stencilOpSeparate = load("glStencilOpSeparate");
	stencilFuncSeparate = load("glStencilFuncSeparate");
	stencilMaskSeparate = load("glStencilMaskSeparate");
	attachShader = load("glAttachShader");
	bindAttribLocation = load("glBindAttribLocation");
	compileShader = load("glCompileShader");
	createProgram = load("glCreateProgram");
	createShader = load("glCreateShader");
	deleteProgram = load("glDeleteProgram");
	deleteShader = load("glDeleteShader");
	detachShader = load("glDetachShader");
	disableVertexAttribArray = load("glDisableVertexAttribArray");
	enableVertexAttribArray = load("glEnableVertexAttribArray");
	getActiveAttrib = load("glGetActiveAttrib");
	getActiveUniform = load("glGetActiveUniform");
	getAttachedShaders = load("glGetAttachedShaders");
	getAttribLocation = load("glGetAttribLocation");
	getProgramiv = load("glGetProgramiv");
	getProgramInfoLog = load("glGetProgramInfoLog");
	getShaderiv = load("glGetShaderiv");
	getShaderInfoLog = load("glGetShaderInfoLog");
	getShaderSource = load("glGetShaderSource");
	getUniformLocation = load("glGetUniformLocation");
	getUniformfv = load("glGetUniformfv");
	getUniformiv = load("glGetUniformiv");
	getVertexAttribdv = load("glGetVertexAttribdv");
	getVertexAttribfv = load("glGetVertexAttribfv");
	getVertexAttribiv = load("glGetVertexAttribiv");
	getVertexAttribPointerv = load("glGetVertexAttribPointerv");
	isProgram = load("glIsProgram");
	isShader = load("glIsShader");
	linkProgram = load("glLinkProgram");
	shaderSource = load("glShaderSource");
	useProgram = load("glUseProgram");
	uniform1f = load("glUniform1f");
	uniform2f = load("glUniform2f");
	uniform3f = load("glUniform3f");
	uniform4f = load("glUniform4f");
	uniform1i = load("glUniform1i");
	uniform2i = load("glUniform2i");
	uniform3i = load("glUniform3i");
	uniform4i = load("glUniform4i");
	uniform1fv = load("glUniform1fv");
	uniform2fv = load("glUniform2fv");
	uniform3fv = load("glUniform3fv");
	uniform4fv = load("glUniform4fv");
	uniform1iv = load("glUniform1iv");
	uniform2iv = load("glUniform2iv");
	uniform3iv = load("glUniform3iv");
	uniform4iv = load("glUniform4iv");
	uniformMatrix2fv = load("glUniformMatrix2fv");
	uniformMatrix3fv = load("glUniformMatrix3fv");
	uniformMatrix4fv = load("glUniformMatrix4fv");
	validateProgram = load("glValidateProgram");
	vertexAttrib1d = load("glVertexAttrib1d");
	vertexAttrib1dv = load("glVertexAttrib1dv");
	vertexAttrib1f = load("glVertexAttrib1f");
	vertexAttrib1fv = load("glVertexAttrib1fv");
	vertexAttrib1s = load("glVertexAttrib1s");
	vertexAttrib1sv = load("glVertexAttrib1sv");
	vertexAttrib2d = load("glVertexAttrib2d");
	vertexAttrib2dv = load("glVertexAttrib2dv");
	vertexAttrib2f = load("glVertexAttrib2f");
	vertexAttrib2fv = load("glVertexAttrib2fv");
	vertexAttrib2s = load("glVertexAttrib2s");
	vertexAttrib2sv = load("glVertexAttrib2sv");
	vertexAttrib3d = load("glVertexAttrib3d");
	vertexAttrib3dv = load("glVertexAttrib3dv");
	vertexAttrib3f = load("glVertexAttrib3f");
	vertexAttrib3fv = load("glVertexAttrib3fv");
	vertexAttrib3s = load("glVertexAttrib3s");
	vertexAttrib3sv = load("glVertexAttrib3sv");
	vertexAttrib4Nbv = load("glVertexAttrib4Nbv");
	vertexAttrib4Niv = load("glVertexAttrib4Niv");
	vertexAttrib4Nsv = load("glVertexAttrib4Nsv");
	vertexAttrib4Nub = load("glVertexAttrib4Nub");
	vertexAttrib4Nubv = load("glVertexAttrib4Nubv");
	vertexAttrib4Nuiv = load("glVertexAttrib4Nuiv");
	vertexAttrib4Nusv = load("glVertexAttrib4Nusv");
	vertexAttrib4bv = load("glVertexAttrib4bv");
	vertexAttrib4d = load("glVertexAttrib4d");
	vertexAttrib4dv = load("glVertexAttrib4dv");
	vertexAttrib4f = load("glVertexAttrib4f");
	vertexAttrib4fv = load("glVertexAttrib4fv");
	vertexAttrib4iv = load("glVertexAttrib4iv");
	vertexAttrib4s = load("glVertexAttrib4s");
	vertexAttrib4sv = load("glVertexAttrib4sv");
	vertexAttrib4ubv = load("glVertexAttrib4ubv");
	vertexAttrib4uiv = load("glVertexAttrib4uiv");
	vertexAttrib4usv = load("glVertexAttrib4usv");
	vertexAttribPointer = load("glVertexAttribPointer");
}

fn void load_gl_GL_VERSION_2_1(GLLoadFn load)
{
	uniformMatrix2x3fv = load("glUniformMatrix2x3fv");
	uniformMatrix3x2fv = load("glUniformMatrix3x2fv");
	uniformMatrix2x4fv = load("glUniformMatrix2x4fv");
	uniformMatrix4x2fv = load("glUniformMatrix4x2fv");
	uniformMatrix3x4fv = load("glUniformMatrix3x4fv");
	uniformMatrix4x3fv = load("glUniformMatrix4x3fv");
}

fn void load_gl_GL_VERSION_3_0(GLLoadFn load)
{
	colorMaski = load("glColorMaski");
	getBooleani_v = load("glGetBooleani_v");
	getIntegeri_v = load("glGetIntegeri_v");
	enablei = load("glEnablei");
	disablei = load("glDisablei");
	isEnabledi = load("glIsEnabledi");
	beginTransformFeedback = load("glBeginTransformFeedback");
	endTransformFeedback = load("glEndTransformFeedback");
	bindBufferRange = load("glBindBufferRange");
	bindBufferBase = load("glBindBufferBase");
	transformFeedbackVaryings = load("glTransformFeedbackVaryings");
	getTransformFeedbackVarying = load("glGetTransformFeedbackVarying");
	clampColor = load("glClampColor");
	beginConditionalRender = load("glBeginConditionalRender");
	endConditionalRender = load("glEndConditionalRender");
	vertexAttribIPointer = load("glVertexAttribIPointer");
	getVertexAttribIiv = load("glGetVertexAttribIiv");
	getVertexAttribIuiv = load("glGetVertexAttribIuiv");
	vertexAttribI1i = load("glVertexAttribI1i");
	vertexAttribI2i = load("glVertexAttribI2i");
	vertexAttribI3i = load("glVertexAttribI3i");
	vertexAttribI4i = load("glVertexAttribI4i");
	vertexAttribI1ui = load("glVertexAttribI1ui");
	vertexAttribI2ui = load("glVertexAttribI2ui");
	vertexAttribI3ui = load("glVertexAttribI3ui");
	vertexAttribI4ui = load("glVertexAttribI4ui");
	vertexAttribI1iv = load("glVertexAttribI1iv");
	vertexAttribI2iv = load("glVertexAttribI2iv");
	vertexAttribI3iv = load("glVertexAttribI3iv");
	vertexAttribI4iv = load("glVertexAttribI4iv");
	vertexAttribI1uiv = load("glVertexAttribI1uiv");
	vertexAttribI2uiv = load("glVertexAttribI2uiv");
	vertexAttribI3uiv = load("glVertexAttribI3uiv");
	vertexAttribI4uiv = load("glVertexAttribI4uiv");
	vertexAttribI4bv = load("glVertexAttribI4bv");
	vertexAttribI4sv = load("glVertexAttribI4sv");
	vertexAttribI4ubv = load("glVertexAttribI4ubv");
	vertexAttribI4usv = load("glVertexAttribI4usv");
	getUniformuiv = load("glGetUniformuiv");
	bindFragDataLocation = load("glBindFragDataLocation");
	getFragDataLocation = load("glGetFragDataLocation");
	uniform1ui = load("glUniform1ui");
	uniform2ui = load("glUniform2ui");
	uniform3ui = load("glUniform3ui");
	uniform4ui = load("glUniform4ui");
	uniform1uiv = load("glUniform1uiv");
	uniform2uiv = load("glUniform2uiv");
	uniform3uiv = load("glUniform3uiv");
	uniform4uiv = load("glUniform4uiv");
	texParameterIiv = load("glTexParameterIiv");
	texParameterIuiv = load("glTexParameterIuiv");
	getTexParameterIiv = load("glGetTexParameterIiv");
	getTexParameterIuiv = load("glGetTexParameterIuiv");
	clearBufferiv = load("glClearBufferiv");
	clearBufferuiv = load("glClearBufferuiv");
	clearBufferfv = load("glClearBufferfv");
	clearBufferfi = load("glClearBufferfi");
	getStringi = load("glGetStringi");
	isRenderbuffer = load("glIsRenderbuffer");
	bindRenderbuffer = load("glBindRenderbuffer");
	deleteRenderbuffers = load("glDeleteRenderbuffers");
	genRenderbuffers = load("glGenRenderbuffers");
	renderbufferStorage = load("glRenderbufferStorage");
	getRenderbufferParameteriv = load("glGetRenderbufferParameteriv");
	isFramebuffer = load("glIsFramebuffer");
	bindFramebuffer = load("glBindFramebuffer");
	deleteFramebuffers = load("glDeleteFramebuffers");
	genFramebuffers = load("glGenFramebuffers");
	checkFramebufferStatus = load("glCheckFramebufferStatus");
	framebufferTexture1D = load("glFramebufferTexture1D");
	framebufferTexture2D = load("glFramebufferTexture2D");
	framebufferTexture3D = load("glFramebufferTexture3D");
	framebufferRenderbuffer = load("glFramebufferRenderbuffer");
	getFramebufferAttachmentParameteriv = load("glGetFramebufferAttachmentParameteriv");
	generateMipmap = load("glGenerateMipmap");
	blitFramebuffer = load("glBlitFramebuffer");
	renderbufferStorageMultisample = load("glRenderbufferStorageMultisample");
	framebufferTextureLayer = load("glFramebufferTextureLayer");
	mapBufferRange = load("glMapBufferRange");
	flushMappedBufferRange = load("glFlushMappedBufferRange");
	bindVertexArray = load("glBindVertexArray");
	deleteVertexArrays = load("glDeleteVertexArrays");
	genVertexArrays = load("glGenVertexArrays");
	isVertexArray = load("glIsVertexArray");
}

fn void load_gl_GL_VERSION_3_1(GLLoadFn load)
{
	drawArraysInstanced = load("glDrawArraysInstanced");
	drawElementsInstanced = load("glDrawElementsInstanced");
	texBuffer = load("glTexBuffer");
	primitiveRestartIndex = load("glPrimitiveRestartIndex");
	copyBufferSubData = load("glCopyBufferSubData");
	getUniformIndices = load("glGetUniformIndices");
	getActiveUniformsiv = load("glGetActiveUniformsiv");
	getActiveUniformName = load("glGetActiveUniformName");
	getUniformBlockIndex = load("glGetUniformBlockIndex");
	getActiveUniformBlockiv = load("glGetActiveUniformBlockiv");
	getActiveUniformBlockName = load("glGetActiveUniformBlockName");
	uniformBlockBinding = load("glUniformBlockBinding");
	bindBufferRange = load("glBindBufferRange");
	bindBufferBase = load("glBindBufferBase");
	getIntegeri_v = load("glGetIntegeri_v");
}

fn void load_gl_GL_VERSION_3_2(GLLoadFn load)
{
	drawElementsBaseVertex = load("glDrawElementsBaseVertex");
	drawRangeElementsBaseVertex = load("glDrawRangeElementsBaseVertex");
	drawElementsInstancedBaseVertex = load("glDrawElementsInstancedBaseVertex");
	multiDrawElementsBaseVertex = load("glMultiDrawElementsBaseVertex");
	provokingVertex = load("glProvokingVertex");
	fenceSync = load("glFenceSync");
	isSync = load("glIsSync");
	deleteSync = load("glDeleteSync");
	clientWaitSync = load("glClientWaitSync");
	waitSync = load("glWaitSync");
	getInteger64v = load("glGetInteger64v");
	getSynciv = load("glGetSynciv");
	getInteger64i_v = load("glGetInteger64i_v");
	getBufferParameteri64v = load("glGetBufferParameteri64v");
	framebufferTexture = load("glFramebufferTexture");
	texImage2DMultisample = load("glTexImage2DMultisample");
	texImage3DMultisample = load("glTexImage3DMultisample");
	getMultisamplefv = load("glGetMultisamplefv");
	sampleMaski = load("glSampleMaski");
}

fn void load_gl_GL_VERSION_3_3(GLLoadFn load)
{
	bindFragDataLocationIndexed = load("glBindFragDataLocationIndexed");
	getFragDataIndex = load("glGetFragDataIndex");
	genSamplers = load("glGenSamplers");
	deleteSamplers = load("glDeleteSamplers");
	isSampler = load("glIsSampler");
	bindSampler = load("glBindSampler");
	samplerParameteri = load("glSamplerParameteri");
	samplerParameteriv = load("glSamplerParameteriv");
	samplerParameterf = load("glSamplerParameterf");
	samplerParameterfv = load("glSamplerParameterfv");
	samplerParameterIiv = load("glSamplerParameterIiv");
	samplerParameterIuiv = load("glSamplerParameterIuiv");
	getSamplerParameteriv = load("glGetSamplerParameteriv");
	getSamplerParameterIiv = load("glGetSamplerParameterIiv");
	getSamplerParameterfv = load("glGetSamplerParameterfv");
	getSamplerParameterIuiv = load("glGetSamplerParameterIuiv");
	queryCounter = load("glQueryCounter");
	getQueryObjecti64v = load("glGetQueryObjecti64v");
	getQueryObjectui64v = load("glGetQueryObjectui64v");
	vertexAttribDivisor = load("glVertexAttribDivisor");
	vertexAttribP1ui = load("glVertexAttribP1ui");
	vertexAttribP1uiv = load("glVertexAttribP1uiv");
	vertexAttribP2ui = load("glVertexAttribP2ui");
	vertexAttribP2uiv = load("glVertexAttribP2uiv");
	vertexAttribP3ui = load("glVertexAttribP3ui");
	vertexAttribP3uiv = load("glVertexAttribP3uiv");
	vertexAttribP4ui = load("glVertexAttribP4ui");
	vertexAttribP4uiv = load("glVertexAttribP4uiv");
	vertexP2ui = load("glVertexP2ui");
	vertexP2uiv = load("glVertexP2uiv");
	vertexP3ui = load("glVertexP3ui");
	vertexP3uiv = load("glVertexP3uiv");
	vertexP4ui = load("glVertexP4ui");
	vertexP4uiv = load("glVertexP4uiv");
	texCoordP1ui = load("glTexCoordP1ui");
	texCoordP1uiv = load("glTexCoordP1uiv");
	texCoordP2ui = load("glTexCoordP2ui");
	texCoordP2uiv = load("glTexCoordP2uiv");
	texCoordP3ui = load("glTexCoordP3ui");
	texCoordP3uiv = load("glTexCoordP3uiv");
	texCoordP4ui = load("glTexCoordP4ui");
	texCoordP4uiv = load("glTexCoordP4uiv");
	multiTexCoordP1ui = load("glMultiTexCoordP1ui");
	multiTexCoordP1uiv = load("glMultiTexCoordP1uiv");
	multiTexCoordP2ui = load("glMultiTexCoordP2ui");
	multiTexCoordP2uiv = load("glMultiTexCoordP2uiv");
	multiTexCoordP3ui = load("glMultiTexCoordP3ui");
	multiTexCoordP3uiv = load("glMultiTexCoordP3uiv");
	multiTexCoordP4ui = load("glMultiTexCoordP4ui");
	multiTexCoordP4uiv = load("glMultiTexCoordP4uiv");
	normalP3ui = load("glNormalP3ui");
	normalP3uiv = load("glNormalP3uiv");
	colorP3ui = load("glColorP3ui");
	colorP3uiv = load("glColorP3uiv");
	colorP4ui = load("glColorP4ui");
	colorP4uiv = load("glColorP4uiv");
	secondaryColorP3ui = load("glSecondaryColorP3ui");
	secondaryColorP3uiv = load("glSecondaryColorP3uiv");
}

fn void load_gl_GL_VERSION_4_0(GLLoadFn load)
{
	minSampleShading = load("glMinSampleShading");
	blendEquationi = load("glBlendEquationi");
	blendEquationSeparatei = load("glBlendEquationSeparatei");
	blendFunci = load("glBlendFunci");
	blendFuncSeparatei = load("glBlendFuncSeparatei");
	drawArraysIndirect = load("glDrawArraysIndirect");
	drawElementsIndirect = load("glDrawElementsIndirect");
	uniform1d = load("glUniform1d");
	uniform2d = load("glUniform2d");
	uniform3d = load("glUniform3d");
	uniform4d = load("glUniform4d");
	uniform1dv = load("glUniform1dv");
	uniform2dv = load("glUniform2dv");
	uniform3dv = load("glUniform3dv");
	uniform4dv = load("glUniform4dv");
	uniformMatrix2dv = load("glUniformMatrix2dv");
	uniformMatrix3dv = load("glUniformMatrix3dv");
	uniformMatrix4dv = load("glUniformMatrix4dv");
	uniformMatrix2x3dv = load("glUniformMatrix2x3dv");
	uniformMatrix2x4dv = load("glUniformMatrix2x4dv");
	uniformMatrix3x2dv = load("glUniformMatrix3x2dv");
	uniformMatrix3x4dv = load("glUniformMatrix3x4dv");
	uniformMatrix4x2dv = load("glUniformMatrix4x2dv");
	uniformMatrix4x3dv = load("glUniformMatrix4x3dv");
	getUniformdv = load("glGetUniformdv");
	getSubroutineUniformLocation = load("glGetSubroutineUniformLocation");
	getSubroutineIndex = load("glGetSubroutineIndex");
	getActiveSubroutineUniformiv = load("glGetActiveSubroutineUniformiv");
	getActiveSubroutineUniformName = load("glGetActiveSubroutineUniformName");
	getActiveSubroutineName = load("glGetActiveSubroutineName");
	uniformSubroutinesuiv = load("glUniformSubroutinesuiv");
	getUniformSubroutineuiv = load("glGetUniformSubroutineuiv");
	getProgramStageiv = load("glGetProgramStageiv");
	patchParameteri = load("glPatchParameteri");
	patchParameterfv = load("glPatchParameterfv");
	bindTransformFeedback = load("glBindTransformFeedback");
	deleteTransformFeedbacks = load("glDeleteTransformFeedbacks");
	genTransformFeedbacks = load("glGenTransformFeedbacks");
	isTransformFeedback = load("glIsTransformFeedback");
	pauseTransformFeedback = load("glPauseTransformFeedback");
	resumeTransformFeedback = load("glResumeTransformFeedback");
	drawTransformFeedback = load("glDrawTransformFeedback");
	drawTransformFeedbackStream = load("glDrawTransformFeedbackStream");
	beginQueryIndexed = load("glBeginQueryIndexed");
	endQueryIndexed = load("glEndQueryIndexed");
	getQueryIndexediv = load("glGetQueryIndexediv");
}

fn void load_gl_GL_VERSION_4_1(GLLoadFn load)
{
	releaseShaderCompiler = load("glReleaseShaderCompiler");
	shaderBinary = load("glShaderBinary");
	getShaderPrecisionFormat = load("glGetShaderPrecisionFormat");
	depthRangef = load("glDepthRangef");
	clearDepthf = load("glClearDepthf");
	getProgramBinary = load("glGetProgramBinary");
	programBinary = load("glProgramBinary");
	programParameteri = load("glProgramParameteri");
	useProgramStages = load("glUseProgramStages");
	activeShaderProgram = load("glActiveShaderProgram");
	createShaderProgramv = load("glCreateShaderProgramv");
	bindProgramPipeline = load("glBindProgramPipeline");
	deleteProgramPipelines = load("glDeleteProgramPipelines");
	genProgramPipelines = load("glGenProgramPipelines");
	isProgramPipeline = load("glIsProgramPipeline");
	getProgramPipelineiv = load("glGetProgramPipelineiv");
	programParameteri = load("glProgramParameteri");
	programUniform1i = load("glProgramUniform1i");
	programUniform1iv = load("glProgramUniform1iv");
	programUniform1f = load("glProgramUniform1f");
	programUniform1fv = load("glProgramUniform1fv");
	programUniform1d = load("glProgramUniform1d");
	programUniform1dv = load("glProgramUniform1dv");
	programUniform1ui = load("glProgramUniform1ui");
	programUniform1uiv = load("glProgramUniform1uiv");
	programUniform2i = load("glProgramUniform2i");
	programUniform2iv = load("glProgramUniform2iv");
	programUniform2f = load("glProgramUniform2f");
	programUniform2fv = load("glProgramUniform2fv");
	programUniform2d = load("glProgramUniform2d");
	programUniform2dv = load("glProgramUniform2dv");
	programUniform2ui = load("glProgramUniform2ui");
	programUniform2uiv = load("glProgramUniform2uiv");
	programUniform3i = load("glProgramUniform3i");
	programUniform3iv = load("glProgramUniform3iv");
	programUniform3f = load("glProgramUniform3f");
	programUniform3fv = load("glProgramUniform3fv");
	programUniform3d = load("glProgramUniform3d");
	programUniform3dv = load("glProgramUniform3dv");
	programUniform3ui = load("glProgramUniform3ui");
	programUniform3uiv = load("glProgramUniform3uiv");
	programUniform4i = load("glProgramUniform4i");
	programUniform4iv = load("glProgramUniform4iv");
	programUniform4f = load("glProgramUniform4f");
	programUniform4fv = load("glProgramUniform4fv");
	programUniform4d = load("glProgramUniform4d");
	programUniform4dv = load("glProgramUniform4dv");
	programUniform4ui = load("glProgramUniform4ui");
	programUniform4uiv = load("glProgramUniform4uiv");
	programUniformMatrix2fv = load("glProgramUniformMatrix2fv");
	programUniformMatrix3fv = load("glProgramUniformMatrix3fv");
	programUniformMatrix4fv = load("glProgramUniformMatrix4fv");
	programUniformMatrix2dv = load("glProgramUniformMatrix2dv");
	programUniformMatrix3dv = load("glProgramUniformMatrix3dv");
	programUniformMatrix4dv = load("glProgramUniformMatrix4dv");
	programUniformMatrix2x3fv = load("glProgramUniformMatrix2x3fv");
	programUniformMatrix3x2fv = load("glProgramUniformMatrix3x2fv");
	programUniformMatrix2x4fv = load("glProgramUniformMatrix2x4fv");
	programUniformMatrix4x2fv = load("glProgramUniformMatrix4x2fv");
	programUniformMatrix3x4fv = load("glProgramUniformMatrix3x4fv");
	programUniformMatrix4x3fv = load("glProgramUniformMatrix4x3fv");
	programUniformMatrix2x3dv = load("glProgramUniformMatrix2x3dv");
	programUniformMatrix3x2dv = load("glProgramUniformMatrix3x2dv");
	programUniformMatrix2x4dv = load("glProgramUniformMatrix2x4dv");
	programUniformMatrix4x2dv = load("glProgramUniformMatrix4x2dv");
	programUniformMatrix3x4dv = load("glProgramUniformMatrix3x4dv");
	programUniformMatrix4x3dv = load("glProgramUniformMatrix4x3dv");
	validateProgramPipeline = load("glValidateProgramPipeline");
	getProgramPipelineInfoLog = load("glGetProgramPipelineInfoLog");
	vertexAttribL1d = load("glVertexAttribL1d");
	vertexAttribL2d = load("glVertexAttribL2d");
	vertexAttribL3d = load("glVertexAttribL3d");
	vertexAttribL4d = load("glVertexAttribL4d");
	vertexAttribL1dv = load("glVertexAttribL1dv");
	vertexAttribL2dv = load("glVertexAttribL2dv");
	vertexAttribL3dv = load("glVertexAttribL3dv");
	vertexAttribL4dv = load("glVertexAttribL4dv");
	vertexAttribLPointer = load("glVertexAttribLPointer");
	getVertexAttribLdv = load("glGetVertexAttribLdv");
	viewportArrayv = load("glViewportArrayv");
	viewportIndexedf = load("glViewportIndexedf");
	viewportIndexedfv = load("glViewportIndexedfv");
	scissorArrayv = load("glScissorArrayv");
	scissorIndexed = load("glScissorIndexed");
	scissorIndexedv = load("glScissorIndexedv");
	depthRangeArrayv = load("glDepthRangeArrayv");
	depthRangeIndexed = load("glDepthRangeIndexed");
	getFloati_v = load("glGetFloati_v");
	getDoublei_v = load("glGetDoublei_v");
}

fn void load_gl_GL_VERSION_4_2(GLLoadFn load)
{
	drawArraysInstancedBaseInstance = load("glDrawArraysInstancedBaseInstance");
	drawElementsInstancedBaseInstance = load("glDrawElementsInstancedBaseInstance");
	drawElementsInstancedBaseVertexBaseInstance = load("glDrawElementsInstancedBaseVertexBaseInstance");
	getInternalformativ = load("glGetInternalformativ");
	getActiveAtomicCounterBufferiv = load("glGetActiveAtomicCounterBufferiv");
	bindImageTexture = load("glBindImageTexture");
	memoryBarrier = load("glMemoryBarrier");
	texStorage1D = load("glTexStorage1D");
	texStorage2D = load("glTexStorage2D");
	texStorage3D = load("glTexStorage3D");
	drawTransformFeedbackInstanced = load("glDrawTransformFeedbackInstanced");
	drawTransformFeedbackStreamInstanced = load("glDrawTransformFeedbackStreamInstanced");
}

fn void load_gl_GL_VERSION_4_3(GLLoadFn load)
{
	clearBufferData = load("glClearBufferData");
	clearBufferSubData = load("glClearBufferSubData");
	dispatchCompute = load("glDispatchCompute");
	dispatchComputeIndirect = load("glDispatchComputeIndirect");
	copyImageSubData = load("glCopyImageSubData");
	framebufferParameteri = load("glFramebufferParameteri");
	getFramebufferParameteriv = load("glGetFramebufferParameteriv");
	getInternalformati64v = load("glGetInternalformati64v");
	invalidateTexSubImage = load("glInvalidateTexSubImage");
	invalidateTexImage = load("glInvalidateTexImage");
	invalidateBufferSubData = load("glInvalidateBufferSubData");
	invalidateBufferData = load("glInvalidateBufferData");
	invalidateFramebuffer = load("glInvalidateFramebuffer");
	invalidateSubFramebuffer = load("glInvalidateSubFramebuffer");
	multiDrawArraysIndirect = load("glMultiDrawArraysIndirect");
	multiDrawElementsIndirect = load("glMultiDrawElementsIndirect");
	getProgramInterfaceiv = load("glGetProgramInterfaceiv");
	getProgramResourceIndex = load("glGetProgramResourceIndex");
	getProgramResourceName = load("glGetProgramResourceName");
	getProgramResourceiv = load("glGetProgramResourceiv");
	getProgramResourceLocation = load("glGetProgramResourceLocation");
	getProgramResourceLocationIndex = load("glGetProgramResourceLocationIndex");
	shaderStorageBlockBinding = load("glShaderStorageBlockBinding");
	texBufferRange = load("glTexBufferRange");
	texStorage2DMultisample = load("glTexStorage2DMultisample");
	texStorage3DMultisample = load("glTexStorage3DMultisample");
	textureView = load("glTextureView");
	bindVertexBuffer = load("glBindVertexBuffer");
	vertexAttribFormat = load("glVertexAttribFormat");
	vertexAttribIFormat = load("glVertexAttribIFormat");
	vertexAttribLFormat = load("glVertexAttribLFormat");
	vertexAttribBinding = load("glVertexAttribBinding");
	vertexBindingDivisor = load("glVertexBindingDivisor");
	debugMessageControl = load("glDebugMessageControl");
	debugMessageInsert = load("glDebugMessageInsert");
	debugMessageCallback = load("glDebugMessageCallback");
	getDebugMessageLog = load("glGetDebugMessageLog");
	pushDebugGroup = load("glPushDebugGroup");
	popDebugGroup = load("glPopDebugGroup");
	objectLabel = load("glObjectLabel");
	getObjectLabel = load("glGetObjectLabel");
	objectPtrLabel = load("glObjectPtrLabel");
	getObjectPtrLabel = load("glGetObjectPtrLabel");
	getPointerv = load("glGetPointerv");
}

fn void load_gl_GL_VERSION_4_4(GLLoadFn load)
{
	bufferStorage = load("glBufferStorage");
	clearTexImage = load("glClearTexImage");
	clearTexSubImage = load("glClearTexSubImage");
	bindBuffersBase = load("glBindBuffersBase");
	bindBuffersRange = load("glBindBuffersRange");
	bindTextures = load("glBindTextures");
	bindSamplers = load("glBindSamplers");
	bindImageTextures = load("glBindImageTextures");
	bindVertexBuffers = load("glBindVertexBuffers");
}

fn void load_gl_GL_VERSION_4_5(GLLoadFn load)
{
	clipControl = load("glClipControl");
	createTransformFeedbacks = load("glCreateTransformFeedbacks");
	transformFeedbackBufferBase = load("glTransformFeedbackBufferBase");
	transformFeedbackBufferRange = load("glTransformFeedbackBufferRange");
	getTransformFeedbackiv = load("glGetTransformFeedbackiv");
	getTransformFeedbacki_v = load("glGetTransformFeedbacki_v");
	getTransformFeedbacki64_v = load("glGetTransformFeedbacki64_v");
	createBuffers = load("glCreateBuffers");
	namedBufferStorage = load("glNamedBufferStorage");
	namedBufferData = load("glNamedBufferData");
	namedBufferSubData = load("glNamedBufferSubData");
	copyNamedBufferSubData = load("glCopyNamedBufferSubData");
	clearNamedBufferData = load("glClearNamedBufferData");
	clearNamedBufferSubData = load("glClearNamedBufferSubData");
	mapNamedBuffer = load("glMapNamedBuffer");
	mapNamedBufferRange = load("glMapNamedBufferRange");
	unmapNamedBuffer = load("glUnmapNamedBuffer");
	flushMappedNamedBufferRange = load("glFlushMappedNamedBufferRange");
	getNamedBufferParameteriv = load("glGetNamedBufferParameteriv");
	getNamedBufferParameteri64v = load("glGetNamedBufferParameteri64v");
	getNamedBufferPointerv = load("glGetNamedBufferPointerv");
	getNamedBufferSubData = load("glGetNamedBufferSubData");
	createFramebuffers = load("glCreateFramebuffers");
	namedFramebufferRenderbuffer = load("glNamedFramebufferRenderbuffer");
	namedFramebufferParameteri = load("glNamedFramebufferParameteri");
	namedFramebufferTexture = load("glNamedFramebufferTexture");
	namedFramebufferTextureLayer = load("glNamedFramebufferTextureLayer");
	namedFramebufferDrawBuffer = load("glNamedFramebufferDrawBuffer");
	namedFramebufferDrawBuffers = load("glNamedFramebufferDrawBuffers");
	namedFramebufferReadBuffer = load("glNamedFramebufferReadBuffer");
	invalidateNamedFramebufferData = load("glInvalidateNamedFramebufferData");
	invalidateNamedFramebufferSubData = load("glInvalidateNamedFramebufferSubData");
	clearNamedFramebufferiv = load("glClearNamedFramebufferiv");
	clearNamedFramebufferuiv = load("glClearNamedFramebufferuiv");
	clearNamedFramebufferfv = load("glClearNamedFramebufferfv");
	clearNamedFramebufferfi = load("glClearNamedFramebufferfi");
	blitNamedFramebuffer = load("glBlitNamedFramebuffer");
	checkNamedFramebufferStatus = load("glCheckNamedFramebufferStatus");
	getNamedFramebufferParameteriv = load("glGetNamedFramebufferParameteriv");
	getNamedFramebufferAttachmentParameteriv = load("glGetNamedFramebufferAttachmentParameteriv");
	createRenderbuffers = load("glCreateRenderbuffers");
	namedRenderbufferStorage = load("glNamedRenderbufferStorage");
	namedRenderbufferStorageMultisample = load("glNamedRenderbufferStorageMultisample");
	getNamedRenderbufferParameteriv = load("glGetNamedRenderbufferParameteriv");
	createTextures = load("glCreateTextures");
	textureBuffer = load("glTextureBuffer");
	textureBufferRange = load("glTextureBufferRange");
	textureStorage1D = load("glTextureStorage1D");
	textureStorage2D = load("glTextureStorage2D");
	textureStorage3D = load("glTextureStorage3D");
	textureStorage2DMultisample = load("glTextureStorage2DMultisample");
	textureStorage3DMultisample = load("glTextureStorage3DMultisample");
	textureSubImage1D = load("glTextureSubImage1D");
	textureSubImage2D = load("glTextureSubImage2D");
	textureSubImage3D = load("glTextureSubImage3D");
	compressedTextureSubImage1D = load("glCompressedTextureSubImage1D");
	compressedTextureSubImage2D = load("glCompressedTextureSubImage2D");
	compressedTextureSubImage3D = load("glCompressedTextureSubImage3D");
	copyTextureSubImage1D = load("glCopyTextureSubImage1D");
	copyTextureSubImage2D = load("glCopyTextureSubImage2D");
	copyTextureSubImage3D = load("glCopyTextureSubImage3D");
	textureParameterf = load("glTextureParameterf");
	textureParameterfv = load("glTextureParameterfv");
	textureParameteri = load("glTextureParameteri");
	textureParameterIiv = load("glTextureParameterIiv");
	textureParameterIuiv = load("glTextureParameterIuiv");
	textureParameteriv = load("glTextureParameteriv");
	generateTextureMipmap = load("glGenerateTextureMipmap");
	bindTextureUnit = load("glBindTextureUnit");
	getTextureImage = load("glGetTextureImage");
	getCompressedTextureImage = load("glGetCompressedTextureImage");
	getTextureLevelParameterfv = load("glGetTextureLevelParameterfv");
	getTextureLevelParameteriv = load("glGetTextureLevelParameteriv");
	getTextureParameterfv = load("glGetTextureParameterfv");
	getTextureParameterIiv = load("glGetTextureParameterIiv");
	getTextureParameterIuiv = load("glGetTextureParameterIuiv");
	getTextureParameteriv = load("glGetTextureParameteriv");
	createVertexArrays = load("glCreateVertexArrays");
	disableVertexArrayAttrib = load("glDisableVertexArrayAttrib");
	enableVertexArrayAttrib = load("glEnableVertexArrayAttrib");
	vertexArrayElementBuffer = load("glVertexArrayElementBuffer");
	vertexArrayVertexBuffer = load("glVertexArrayVertexBuffer");
	vertexArrayVertexBuffers = load("glVertexArrayVertexBuffers");
	vertexArrayAttribBinding = load("glVertexArrayAttribBinding");
	vertexArrayAttribFormat = load("glVertexArrayAttribFormat");
	vertexArrayAttribIFormat = load("glVertexArrayAttribIFormat");
	vertexArrayAttribLFormat = load("glVertexArrayAttribLFormat");
	vertexArrayBindingDivisor = load("glVertexArrayBindingDivisor");
	getVertexArrayiv = load("glGetVertexArrayiv");
	getVertexArrayIndexediv = load("glGetVertexArrayIndexediv");
	getVertexArrayIndexed64iv = load("glGetVertexArrayIndexed64iv");
	createSamplers = load("glCreateSamplers");
	createProgramPipelines = load("glCreateProgramPipelines");
	createQueries = load("glCreateQueries");
	getQueryBufferObjecti64v = load("glGetQueryBufferObjecti64v");
	getQueryBufferObjectiv = load("glGetQueryBufferObjectiv");
	getQueryBufferObjectui64v = load("glGetQueryBufferObjectui64v");
	getQueryBufferObjectuiv = load("glGetQueryBufferObjectuiv");
	memoryBarrierByRegion = load("glMemoryBarrierByRegion");
	getTextureSubImage = load("glGetTextureSubImage");
	getCompressedTextureSubImage = load("glGetCompressedTextureSubImage");
	getGraphicsResetStatus = load("glGetGraphicsResetStatus");
	getnCompressedTexImage = load("glGetnCompressedTexImage");
	getnTexImage = load("glGetnTexImage");
	getnUniformdv = load("glGetnUniformdv");
	getnUniformfv = load("glGetnUniformfv");
	getnUniformiv = load("glGetnUniformiv");
	getnUniformuiv = load("glGetnUniformuiv");
	readnPixels = load("glReadnPixels");
	getnMapdv = load("glGetnMapdv");
	getnMapfv = load("glGetnMapfv");
	getnMapiv = load("glGetnMapiv");
	getnPixelMapfv = load("glGetnPixelMapfv");
	getnPixelMapuiv = load("glGetnPixelMapuiv");
	getnPixelMapusv = load("glGetnPixelMapusv");
	getnPolygonStipple = load("glGetnPolygonStipple");
	getnColorTable = load("glGetnColorTable");
	getnConvolutionFilter = load("glGetnConvolutionFilter");
	getnSeparableFilter = load("glGetnSeparableFilter");
	getnHistogram = load("glGetnHistogram");
	getnMinmax = load("glGetnMinmax");
	textureBarrier = load("glTextureBarrier");
}

fn void load_gl_GL_VERSION_4_6(GLLoadFn load)
{
	specializeShader = load("glSpecializeShader");
	multiDrawArraysIndirectCount = load("glMultiDrawArraysIndirectCount");
	multiDrawElementsIndirectCount = load("glMultiDrawElementsIndirectCount");
	polygonOffsetClamp = load("glPolygonOffsetClamp");
}

fn void load_all_gl(GLLoadFn load, int version) {
	if (version >= 1.0) load_gl_GL_VERSION_1_0(load);
	if (version >= 1.1) load_gl_GL_VERSION_1_1(load);
	if (version >= 1.2) load_gl_GL_VERSION_1_2(load);
	if (version >= 1.3) load_gl_GL_VERSION_1_3(load);
	if (version >= 1.4) load_gl_GL_VERSION_1_4(load);
	if (version >= 1.5) load_gl_GL_VERSION_1_5(load);
	if (version >= 2.0) load_gl_GL_VERSION_2_0(load);
	if (version >= 2.1) load_gl_GL_VERSION_2_1(load);
	if (version >= 3.0) load_gl_GL_VERSION_3_0(load);
	if (version >= 3.1) load_gl_GL_VERSION_3_1(load);
	if (version >= 3.2) load_gl_GL_VERSION_3_2(load);
	if (version >= 3.3) load_gl_GL_VERSION_3_3(load);
	if (version >= 4.0) load_gl_GL_VERSION_4_0(load);
	if (version >= 4.1) load_gl_GL_VERSION_4_1(load);
	if (version >= 4.2) load_gl_GL_VERSION_4_2(load);
	if (version >= 4.3) load_gl_GL_VERSION_4_3(load);
	if (version >= 4.4) load_gl_GL_VERSION_4_4(load);
	if (version >= 4.5) load_gl_GL_VERSION_4_5(load);
	if (version >= 4.6) load_gl_GL_VERSION_4_6(load);
}

fn int load_gl_internal(GLLoadFn load)
{
    getIntegerv = load("glGetIntegerv");
    if (getIntegerv == null) return 0;
    int major, minor;
    getIntegerv(GL_MAJOR_VERSION, &major);
    getIntegerv(GL_MINOR_VERSION, &minor);
    int version = (major * 10) + minor;
    load_all_gl(load, version);
    return version;
}

