module vulkan;

const VK_MAX_VERSION = vk::@make_api_version(0, 1, 3, 0);

module vulkan::internal;
import vulkan;
macro int vk_version()
{
    $if($defined(vulkan::VK_VERSION)):
    
        return vulkan::VK_VERSION;
    $else
        return vulkan::VK_MAX_VERSION;
    $endif
}

module vulkan::vk;

macro int @make_version($major, $minor, $patch)
{
   return (($major << 22U) | ($minor << 12U) | $patch);    
}
macro int @make_api_version($variant, $major, $minor, $patch)
{
    return (($variant << 29U) | ($major << 22U) | ($minor << 12U) | $patch);
}

const VK_API_VERSION_1_0 = @make_api_version(0, 1, 0, 0);
const VK_API_VERSION_1_1 = @make_api_version(0, 1, 1, 0);
const VK_API_VERSION_1_2 = @make_api_version(0, 1, 2, 0);
const VK_API_VERSION_1_3 = @make_api_version(0, 1, 3, 0);
