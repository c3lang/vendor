module raygui::rg;
import raylib5::rl;

const RAYGUI_VERSION_MAJOR = 4;
const RAYGUI_VERSION_MINOR = 0;
const RAYGUI_VERSION_PATCH = 0;
const RAYGUI_VERSION = "4.0";

const SCROLLBAR_LEFT_SIDE @builtin = 0;
const SCROLLBAR_RIGHT_SIDE @builtin = 1;

// Style property
// NOTE: Used when exporting style as code for convenience
struct GuiStyleProp {
  GuiControl controlId;   // Control identifier
  GuiControlProperty propertyId;  // Property identifier
  CInt propertyValue;          // Property value
}


// Controls text style -NOT USED-
// NOTE: Text style is defined by control
struct GuiTextStyle {
  CUInt size;
  CInt charSpacing;
  CInt lineSpacing;
  CInt alignmentH;
  CInt alignmentV;
  CInt padding;
}


// Gui control state
enum GuiState {
  STATE_NORMAL,
  STATE_FOCUSED,
  STATE_PRESSED,
  STATE_DISABLED
}

// Gui control text alignment
enum GuiTextAlignment {
  TEXT_ALIGN_LEFT,
  TEXT_ALIGN_CENTER,
  TEXT_ALIGN_RIGHT
}

// Gui control text alignment vertical
// NOTE: Text vertical position inside the text bounds
enum GuiTextAlignmentVertical {
  TEXT_ALIGN_TOP,
  TEXT_ALIGN_MIDDLE,
  TEXT_ALIGN_BOTTOM
}

// Gui control text wrap mode
// NOTE: Useful for multiline text
enum GuiTextWrapMode {
  TEXT_WRAP_NONE,
  TEXT_WRAP_CHAR,
  TEXT_WRAP_WORD
}

// Gui controls
enum GuiControl : CUShort {
  // Default -> populates to all controls when set
  DEFAULT,

  // Basic controls
  LABEL,          // Used also for: LABELBUTTON
  BUTTON,
  TOGGLE,         // Used also for: TOGGLEGROUP
  SLIDER,         // Used also for: SLIDERBAR, TOGGLESLIDER
  PROGRESSBAR,
  CHECKBOX,
  COMBOBOX,
  DROPDOWNBOX,
  TEXTBOX,        // Used also for: TEXTBOXMULTI
  VALUEBOX,
  SPINNER,        // Uses: BUTTON, VALUEBOX
  LISTVIEW,
  COLORPICKER,
  SCROLLBAR,
  STATUSBAR
}

//----------------------------------------------------------------------------------
// Global Variables Definition
//----------------------------------------------------------------------------------
// ...

//----------------------------------------------------------------------------------
// Module Functions Declaration
//----------------------------------------------------------------------------------

// Global gui state control functions
extern fn void guiEnable() @extern("GuiEnable");                                 // Enable gui controls (global state)
extern fn void guiDisable() @extern("GuiDisable");                                // Disable gui controls (global state)
extern fn void guiLock() @extern("GuiLock");                                   // Lock gui controls (global state)
extern fn void guiUnlock() @extern("GuiUnlock");                                 // Unlock gui controls (global state)
extern fn bool guiIsLocked() @extern("GuiIsLocked");                               // Check if gui is locked (global state)
extern fn void guiSetAlpha(float alpha) @extern("GuiSetAlpha");                        // Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f
extern fn void guiSetState(GuiState state) @extern("GuiSetState");                          // Set gui state (global state)
extern fn GuiState guiGetState() @extern("GuiGetState");                                // Get gui state (global state)

// Font set/get functions
extern fn void guiSetFont(Font font) @extern("GuiSetFont");                           // Set gui custom font (global state)
extern fn Font guiGetFont() @extern("GuiGetFont");                                // Get gui custom font (global state)

// Style set/get functions
extern fn void guiSetStyle(GuiControl control, GuiControlProperty property, CInt value) @extern("GuiSetStyle"); // Set one style property
extern fn CInt guiGetStyle(GuiControl control, GuiControlProperty property) @extern("GuiGetStyle");           // Get one style property

// Styles loading functions
extern fn void guiLoadStyle(char *fileName) @extern("GuiLoadStyle");              // Load style file over global style variable (.rgs)
extern fn void guiLoadStyleDefault() @extern("GuiLoadStyleDefault");                       // Load style default over global style

// Tooltips management functions
extern fn void guiEnableTooltip() @extern("GuiEnableTooltip");                          // Enable gui tooltips (global state)
extern fn void guiDisableTooltip() @extern("GuiDisableTooltip");                         // Disable gui tooltips (global state)
extern fn void guiSetTooltip(char *tooltip) @extern("GuiSetTooltip");              // Set tooltip string

// Icons functionality
extern fn char *guiIconText (GuiIconName iconId, char *text) @extern("GuiIconText"); // Get text with icon id prepended (if supported)
extern fn void guiSetIconScale(CInt scale) @extern("GuiSetIconScale");                      // Set default icon drawing size
extern fn CUInt *guiGetIcons() @extern("GuiGetIcons");                      // Get raygui icons data pointer
extern fn char **guiLoadIcons(char *fileName, bool loadIconsName) @extern("GuiLoadIcons"); // Load raygui icons file (.rgi) into internal icons data
extern fn void guiDrawIcon(GuiIconName iconId, CInt posX, CInt posY, CInt pixelSize, Color color) @extern("GuiDrawIcon"); // Draw icon using pixel size at specified position


// Controls
//----------------------------------------------------------------------------------------------------------
// Container/separator controls, useful for controls organization
extern fn bool guiWindowBox(Rectangle bounds, char *title) @extern("GuiWindowBox");                                       // Window Box control, shows a window that can be closed
extern fn bool guiGroupBox(Rectangle bounds, char *text) @extern("GuiGroupBox");                                         // Group Box control with text name
extern fn bool guiLine(Rectangle bounds, char *text) @extern("GuiLine");                                             // Line separator control, could contain text
extern fn bool guiPanel(Rectangle bounds, char *text) @extern("GuiPanel");                                            // Panel control, useful to group controls
extern fn bool guiTabBar(Rectangle bounds, char **text, CInt count, CInt *active) @extern("GuiTabBar");                  // Tab Bar control, returns TAB to be closed or -1
extern fn bool guiScrollPanel(Rectangle bounds, char *text, Rectangle content, Vector2 *scroll, Rectangle *view) @extern("GuiScrollPanel"); // Scroll Panel control

// Basic controls set
extern fn bool guiLabel(Rectangle bounds, char *text) @extern("GuiLabel");                                            // Label control, shows text
extern fn bool guiButton(Rectangle bounds, char *text) @extern("GuiButton");                                           // Button control, returns true when clicked
extern fn bool guiLabelButton(Rectangle bounds, char *text) @extern("GuiLabelButton");                                      // Label button control, show true when clicked
extern fn bool guiToggle(Rectangle bounds, char *text, bool *active) @extern("GuiToggle");                             // Toggle Button control, returns true when active
extern fn bool guiToggleGroup(Rectangle bounds, char *text, CInt *active) @extern("GuiToggleGroup");                         // Toggle Group control, returns active toggle index
extern fn bool guiToggleSlider(Rectangle bounds, char *text, CInt *active) @extern("GuiToggleSlider");                        // Toggle Slider control, returns true when clicked
extern fn bool guiCheckBox(Rectangle bounds, char *text, bool *checked) @extern("GuiCheckBox");                          // Check Box control, returns true when active
extern fn bool guiComboBox(Rectangle bounds, char *text, CInt *active) @extern("GuiComboBox");                            // Combo Box control, returns selected item index

extern fn bool guiDropdownBox(Rectangle bounds, char *text, CInt *active, bool editMode) @extern("GuiDropdownBox");          // Dropdown Box control, returns selected item
extern fn bool guiSpinner(Rectangle bounds, char *text, CInt *value, CInt minValue, CInt maxValue, bool editMode) @extern("GuiSpinner"); // Spinner control, returns selected value
extern fn bool guiValueBox(Rectangle bounds, char *text, CInt *value, CInt minValue, CInt maxValue, bool editMode) @extern("GuiValueBox"); // Value Box control, updates input text with numbers
extern fn bool guiTextBox(Rectangle bounds, char *text, CInt textSize, bool editMode) @extern("GuiTextBox");                   // Text Box control, updates input text

extern fn bool guiSlider(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiSlider"); // Slider control, returns selected value
extern fn bool guiSliderBar(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiSliderBar"); // Slider Bar control, returns selected value
extern fn bool guiProgressBar(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiProgressBar"); // Progress Bar control, shows current progress value
extern fn bool guiStatusBar(Rectangle bounds, char *text) @extern("GuiStatusBar");                                        // Status Bar control, shows info text
extern fn bool guiDummyRec(Rectangle bounds, char *text) @extern("GuiDummyRec");                                         // Dummy control for placeholders
extern fn bool guiGrid(Rectangle bounds, char *text, float spacing, CInt subdivs, Vector2 *mouseCell) @extern("GuiGrid"); // Grid control, returns mouse cell position

// Advance controls set
extern fn CInt guiListView(Rectangle bounds, char *text, CInt *scrollIndex, CInt *active) @extern("GuiListView");          // List View control, returns selected list item index
extern fn CInt guiListViewEx(Rectangle bounds, char **text, CInt count, CInt *scrollIndex, CInt *active, CInt *focus) @extern("GuiListViewEx"); // List View with extended parameters
extern fn CInt guiMessageBox(Rectangle bounds, char *title, char *message, char *buttons) @extern("GuiMessageBox"); // Message Box control, displays a message
extern fn CInt guiTextInputBox(Rectangle bounds, char *title, char *message, char *buttons, char *text, CInt textMaxSize, bool *secretViewActive) @extern("GuiTextInputBox"); // Text Input Box control, ask for text, supports secret
extern fn CInt guiColorPicker(Rectangle bounds, char *text, Color *color) @extern("GuiColorPicker");                        // Color Picker control (multiple color controls)
extern fn CInt guiColorPanel(Rectangle bounds, char *text, Color *color) @extern("GuiColorPanel");                         // Color Panel control
extern fn CInt guiColorBarAlpha(Rectangle bounds, char *text, float *alpha) @extern("GuiColorBarAlpha");                      // Color Bar Alpha control
extern fn CInt guiColorBarHue(Rectangle bounds, char *text, float *value) @extern("GuiColorBarHue");                        // Color Bar Hue control
extern fn CInt guiColorPickerHSV(Rectangle bounds, char *text, Vector3 *colorHsv) @extern("GuiColorPickerHSV");                // Color Picker control that avoids conversion to RGB on each call (multiple color controls)
extern fn CInt guiColorPanelHSV(Rectangle bounds, char *text, Vector3 *colorHsv) @extern("GuiColorPanelHSV");                 // Color Panel control that returns HSV color value, used by GuiColorPickerHSV()
//----------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------
// Icons enumeration
//----------------------------------------------------------------------------------
// NOTE(HM) zstr is the ID string for the "#iconID#sometext" ability.
// If you need the id as a integer, use the enum ordinal, like so:
// FILE_OPEN.ordinal;
enum GuiIconName : int (inline ZString zstr)  {
	ICON_NONE                = "#0#",
	FOLDER_FILE_OPEN         = "#1#",
	FILE_SAVE_CLASSIC        = "#2#",
	FOLDER_OPEN              = "#3#",
	FOLDER_SAVE              = "#4#",
	FILE_OPEN                = "#5#",
	FILE_SAVE                = "#6#",
	FILE_EXPORT              = "#7#",
	FILE_ADD                 = "#8#",
	FILE_DELETE              = "#9#",
	FILETYPE_TEXT            = "#10#",
	FILETYPE_AUDIO           = "#11#",
	FILETYPE_IMAGE           = "#12#",
	FILETYPE_PLAY            = "#13#",
	FILETYPE_VIDEO           = "#14#",
	FILETYPE_INFO            = "#15#",
	FILE_COPY                = "#16#",
	FILE_CUT                 = "#17#",
	FILE_PASTE               = "#18#",
	CURSOR_HAND              = "#19#",
	CURSOR_POINTER           = "#20#",
	CURSOR_CLASSIC           = "#21#",
	PENCIL                   = "#22#",
	PENCIL_BIG               = "#23#",
	BRUSH_CLASSIC            = "#24#",
	BRUSH_PAINTER            = "#25#",
	WATER_DROP               = "#26#",
	COLOR_PICKER             = "#27#",
	RUBBER                   = "#28#",
	COLOR_BUCKET             = "#29#",
	TEXT_T                   = "#30#",
	TEXT_A                   = "#31#",
	SCALE                    = "#32#",
	RESIZE                   = "#33#",
	FILTER_POINT             = "#34#",
	FILTER_BILINEAR          = "#35#",
	CROP                     = "#36#",
	CROP_ALPHA               = "#37#",
	SQUARE_TOGGLE            = "#38#",
	SYMMETRY                 = "#39#",
	SYMMETRY_HORIZONTAL      = "#40#",
	SYMMETRY_VERTICAL        = "#41#",
	LENS                     = "#42#",
	LENS_BIG                 = "#43#",
	EYE_ON                   = "#44#",
	EYE_OFF                  = "#45#",
	FILTER_TOP               = "#46#",
	FILTER                   = "#47#",
	TARGET_POINT             = "#48#",
	TARGET_SMALL             = "#49#",
	TARGET_BIG               = "#50#",
	TARGET_MOVE              = "#51#",
	CURSOR_MOVE              = "#52#",
	CURSOR_SCALE             = "#53#",
	CURSOR_SCALE_RIGHT       = "#54#",
	CURSOR_SCALE_LEFT        = "#55#",
	UNDO                     = "#56#",
	REDO                     = "#57#",
	REREDO                   = "#58#",
	MUTATE                   = "#59#",
	ROTATE                   = "#60#",
	REPEAT                   = "#61#",
	SHUFFLE                  = "#62#",
	EMPTYBOX                 = "#63#",
	TARGET                   = "#64#",
	TARGET_SMALL_FILL        = "#65#",
	TARGET_BIG_FILL          = "#66#",
	TARGET_MOVE_FILL         = "#67#",
	CURSOR_MOVE_FILL         = "#68#",
	CURSOR_SCALE_FILL        = "#69#",
	CURSOR_SCALE_RIGHT_FILL  = "#70#",
	CURSOR_SCALE_LEFT_FILL   = "#71#",
	UNDO_FILL                = "#72#",
	REDO_FILL                = "#73#",
	REREDO_FILL              = "#74#",
	MUTATE_FILL              = "#75#",
	ROTATE_FILL              = "#76#",
	REPEAT_FILL              = "#77#",
	SHUFFLE_FILL             = "#78#",
	EMPTYBOX_SMALL           = "#79#",
	BOX                      = "#80#",
	BOX_TOP                  = "#81#",
	BOX_TOP_RIGHT            = "#82#",
	BOX_RIGHT                = "#83#",
	BOX_BOTTOM_RIGHT         = "#84#",
	BOX_BOTTOM               = "#85#",
	BOX_BOTTOM_LEFT          = "#86#",
	BOX_LEFT                 = "#87#",
	BOX_TOP_LEFT             = "#88#",
	BOX_CENTER               = "#89#",
	BOX_CIRCLE_MASK          = "#90#",
	POT                      = "#91#",
	ALPHA_MULTIPLY           = "#92#",
	ALPHA_CLEAR              = "#93#",
	DITHERING                = "#94#",
	MIPMAPS                  = "#95#",
	BOX_GRID                 = "#96#",
	GRID                     = "#97#",
	BOX_CORNERS_SMALL        = "#98#",
	BOX_CORNERS_BIG          = "#99#",
	FOUR_BOXES               = "#100#",
	GRID_FILL                = "#101#",
	BOX_MULTISIZE            = "#102#",
	ZOOM_SMALL               = "#103#",
	ZOOM_MEDIUM              = "#104#",
	ZOOM_BIG                 = "#105#",
	ZOOM_ALL                 = "#106#",
	ZOOM_CENTER              = "#107#",
	BOX_DOTS_SMALL           = "#108#",
	BOX_DOTS_BIG             = "#109#",
	BOX_CONCENTRIC           = "#110#",
	BOX_GRID_BIG             = "#111#",
	OK_TICK                  = "#112#",
	CROSS                    = "#113#",
	ARROW_LEFT               = "#114#",
	ARROW_RIGHT              = "#115#",
	ARROW_DOWN               = "#116#",
	ARROW_UP                 = "#117#",
	ARROW_LEFT_FILL          = "#118#",
	ARROW_RIGHT_FILL         = "#119#",
	ARROW_DOWN_FILL          = "#120#",
	ARROW_UP_FILL            = "#121#",
	AUDIO                    = "#122#",
	FX                       = "#123#",
	WAVE                     = "#124#",
	WAVE_SINUS               = "#125#",
	WAVE_SQUARE              = "#126#",
	WAVE_TRIANGULAR          = "#127#",
	CROSS_SMALL              = "#128#",
	PLAYER_PREVIOUS          = "#129#",
	PLAYER_PLAY_BACK         = "#130#",
	PLAYER_PLAY              = "#131#",
	PLAYER_PAUSE             = "#132#",
	PLAYER_STOP              = "#133#",
	PLAYER_NEXT              = "#134#",
	PLAYER_RECORD            = "#135#",
	MAGNET                   = "#136#",
	LOCK_CLOSE               = "#137#",
	LOCK_OPEN                = "#138#",
	CLOCK                    = "#139#",
	TOOLS                    = "#140#",
	GEAR                     = "#141#",
	GEAR_BIG                 = "#142#",
	BIN                      = "#143#",
	HAND_POINTER             = "#144#",
	LASER                    = "#145#",
	COIN                     = "#146#",
	EXPLOSION                = "#147#",
	//1UP                      
	ONEUP                    = "#148#",
	//                         
	PLAYER                   = "#149#",
	PLAYER_JUMP              = "#150#",
	KEY                      = "#151#",
	DEMON                    = "#152#",
	TEXT_POPUP               = "#153#",
	GEAR_EX                  = "#154#",
	CRACK                    = "#155#",
	CRACK_POINTS             = "#156#",
	STAR                     = "#157#",
	DOOR                     = "#158#",
	EXIT                     = "#159#",
	MODE_2D                  = "#160#",
	MODE_3D                  = "#161#",
	CUBE                     = "#162#",
	CUBE_FACE_TOP            = "#163#",
	CUBE_FACE_LEFT           = "#164#",
	CUBE_FACE_FRONT          = "#165#",
	CUBE_FACE_BOTTOM         = "#166#",
	CUBE_FACE_RIGHT          = "#167#",
	CUBE_FACE_BACK           = "#168#",
	CAMERA                   = "#169#",
	SPECIAL                  = "#170#",
	LINK_NET                 = "#171#",
	LINK_BOXES               = "#172#",
	LINK_MULTI               = "#173#",
	LINK                     = "#174#",
	LINK_BROKE               = "#175#",
	TEXT_NOTES               = "#176#",
	NOTEBOOK                 = "#177#",
	SUITCASE                 = "#178#",
	SUITCASE_ZIP             = "#179#",
	MAILBOX                  = "#180#",
	MONITOR                  = "#181#",
	PRINTER                  = "#182#",
	PHOTO_CAMERA             = "#183#",
	PHOTO_CAMERA_FLASH       = "#184#",
	HOUSE                    = "#185#",
	HEART                    = "#186#",
	CORNER                   = "#187#",
	VERTICAL_BARS            = "#188#",
	VERTICAL_BARS_FILL       = "#189#",
	LIFE_BARS                = "#190#",
	INFO                     = "#191#",
	CROSSLINE                = "#192#",
	HELP                     = "#193#",
	FILETYPE_ALPHA           = "#194#",
	FILETYPE_HOME            = "#195#",
	LAYERS_VISIBLE           = "#196#",
	LAYERS                   = "#197#",
	WINDOW                   = "#198#",
	HIDPI                    = "#199#",
	FILETYPE_BINARY          = "#200#",
	HEX                      = "#201#",
	SHIELD                   = "#202#",
	FILE_NEW                 = "#203#",
	FOLDER_ADD               = "#204#",
	ALARM                    = "#205#",
	CPU                      = "#206#",
	ROM                      = "#207#",
	STEP_OVER                = "#208#",
	STEP_INTO                = "#209#",
	STEP_OUT                 = "#210#",
	RESTART                  = "#211#",
	BREAKPOINT_ON            = "#212#",
	BREAKPOINT_OFF           = "#213#",
	BURGER_MENU              = "#214#",
	CASE_SENSITIVE           = "#215#",
	REG_EXP                  = "#216#",
	FOLDER                   = "#217#",
	FILE                     = "#218#",
	SAND_TIMER               = "#219#",
	WARNING                  = "#220#",
	HELP_BOX                 = "#221#",
	INFO_BOX                 = "#222#",
	PRIORITY                 = "#223#",
	LAYERS_ISO               = "#224#",
	LAYERS2                  = "#225#",
	MLAYERS                  = "#226#",
	MAPS                     = "#227#",
	HOT                      = "#228#",
	ICON_229                 = "#229#",
	ICON_230                 = "#230#",
	ICON_231                 = "#231#",
	ICON_232                 = "#232#",
	ICON_233                 = "#233#",
	ICON_234                 = "#234#",
	ICON_235                 = "#235#",
	ICON_236                 = "#236#",
	ICON_237                 = "#237#",
	ICON_238                 = "#238#",
	ICON_239                 = "#239#",
	ICON_240                 = "#240#",
	ICON_241                 = "#241#",
	ICON_242                 = "#242#",
	ICON_243                 = "#243#",
	ICON_244                 = "#244#",
	ICON_245                 = "#245#",
	ICON_246                 = "#246#",
	ICON_247                 = "#247#",
	ICON_248                 = "#248#",
	ICON_249                 = "#249#",
	ICON_250                 = "#250#",
	ICON_251                 = "#251#",
	ICON_252                 = "#252#",
	ICON_253                 = "#253#",
	ICON_254                 = "#254#",
	ICON_255                 = "#255#"
}

const TEXT_SIZE = 16;             // Text size (glyphs max height)
const TEXT_SPACING = 17;               // Text spacing between glyphs
const LINE_COLOR = 18;                 // Line control color
const BACKGROUND_COLOR = 19;           // Background color
const TEXT_LINE_SPACING = 20;          // Text spacing between lines
const TEXT_ALIGNMENT_VERTICAL = 21;    // Text vertical alignment inside text bounds (after border and padding)
const  TEXT_WRAP_MODE = 22;              // Text wrap-mode inside text bounds
//  //TEXT_DECORATION             // Text decoration: 0-None, 1-Underline, 2-Line-through, 3-Overline
//  //TEXT_DECORATION_THICK       // Text decoration line thikness


// Other possible text properties:
// TEXT_WEIGHT                  // Normal, Italic, Bold -> Requires specific font change
// TEXT_INDENT                  // Text indentation -> Now using TEXT_PADDING...


typedef GuiControlProperty = CInt;
module raygui::rg::property_element;

const GuiControlProperty BORDER = 0;
const GuiControlProperty BASE = 1;
const GuiControlProperty TEXT = 2;
const GuiControlProperty OTHER = 3;

module raygui::rg::control_property;

const GuiControlProperty BORDER_COLOR_NORMAL = 0;        // Control border color in STATE_NORMAL
const GuiControlProperty BASE_COLOR_NORMAL = 1;          // Control base color in STATE_NORMAL
const GuiControlProperty TEXT_COLOR_NORMAL = 2;          // Control text color in STATE_NORMAL
const GuiControlProperty BORDER_COLOR_FOCUSED = 3;       // Control border color in STATE_FOCUSED
const GuiControlProperty BASE_COLOR_FOCUSED = 4;         // Control base color in STATE_FOCUSED
const GuiControlProperty TEXT_COLOR_FOCUSED = 5;         // Control text color in STATE_FOCUSED
const GuiControlProperty BORDER_COLOR_PRESSED = 6;       // Control border color in STATE_PRESSED
const GuiControlProperty BASE_COLOR_PRESSED = 7;         // Control base color in STATE_PRESSED
const GuiControlProperty TEXT_COLOR_PRESSED = 8;         // Control text color in STATE_PRESSED
const GuiControlProperty BORDER_COLOR_DISABLED = 9;      // Control border color in STATE_DISABLED
const GuiControlProperty BASE_COLOR_DISABLED = 10;        // Control base color in STATE_DISABLED
const GuiControlProperty TEXT_COLOR_DISABLED = 11;        // Control text color in STATE_DISABLED
const GuiControlProperty BORDER_WIDTH = 12;               // Control border size, 0 for no border

const GuiControlProperty TEXT_PADDING = 13;               // Control text padding, not considering border
const GuiControlProperty TEXT_ALIGNMENT = 14;             // Control text horizontal alignment inside control text bound (after border and padding)

const GuiControlProperty GROUP_PADDING = 16;         // ToggleGroup separation between toggles

// Slider/SliderBar
const GuiControlProperty SLIDER_WIDTH = 16;          // Slider size of internal bar
const GuiControlProperty SLIDER_PADDING = 17;         // Slider/SliderBar internal bar padding

// ProgressBar
const GuiControlProperty PROGRESS_PADDING = 16;      // ProgressBar internal padding

// ScrollBar
const GuiControlProperty ARROWS_SIZE = 16;           // ScrollBar arrows size
const GuiControlProperty ARROWS_VISIBLE = 17;             // ScrollBar arrows visible
const GuiControlProperty SCROLL_SLIDER_PADDING = 18;      // ScrollBar slider internal padding
const GuiControlProperty SCROLL_SLIDER_SIZE = 19;         // ScrollBar slider size
const GuiControlProperty SCROLL_PADDING = 20;             // ScrollBar scroll padding from arrows
const GuiControlProperty SCROLL_SPEED = 21;               // ScrollBar scrolling speed

// CheckBox
const GuiControlProperty CHECK_PADDING = 16;          // CheckBox internal check padding


// ComboBox
const GuiControlProperty COMBO_BUTTON_WIDTH = 16;    // ComboBox right button width
const GuiControlProperty COMBO_BUTTON_SPACING = 17;       // ComboBox button separation

// DropdownBox
const GuiControlProperty ARROW_PADDING = 16;         // DropdownBox arrow separation from border and items
const GuiControlProperty DROPDOWN_ITEMS_SPACING = 17;     // DropdownBox items separation

// TextBox/TextBoxMulti/ValueBox/Spinner
const GuiControlProperty TEXT_READONLY = 16;         // TextBox in read-only mode: 0-text editable, 1-text no-editable

// Spinner
const GuiControlProperty SPIN_BUTTON_WIDTH = 16;     // Spinner left/right buttons width
const GuiControlProperty SPIN_BUTTON_SPACING = 17;        // Spinner buttons separation

// ListView
const GuiControlProperty LIST_ITEMS_HEIGHT = 16;     // ListView items height
const GuiControlProperty LIST_ITEMS_SPACING = 17;         // ListView items separation
const GuiControlProperty SCROLLBAR_WIDTH = 18;            // ListView scrollbar size (usually width)
const GuiControlProperty SCROLLBAR_SIDE = 19;             // ListView scrollbar side (0-SCROLLBAR_LEFT_SIDE, 1-SCROLLBAR_RIGHT_SIDE)

// ColorPicker
const GuiControlProperty COLOR_SELECTOR_SIZE = 16;
const GuiControlProperty HUEBAR_WIDTH = 17;               // ColorPicker right hue bar width
const GuiControlProperty HUEBAR_PADDING = 18;             // ColorPicker right hue bar separation from panel
const GuiControlProperty HUEBAR_SELECTOR_HEIGHT = 19;     // ColorPicker right hue bar selector height
const GuiControlProperty HUEBAR_SELECTOR_OVERFLOW = 20;   // ColorPicker right hue bar selector overflow
