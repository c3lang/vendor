/*******************************************************************************************
 *
 *   raygui v4.0 - A simple and easy-to-use immediate-mode gui library
 *
 *   DESCRIPTION:
 *       raygui is a tools-dev-focused immediate-mode-gui library based on raylib but also
 *       available as a standalone library, as long as input and drawing functions are provided.
 *
 *   FEATURES:
 *       - Immediate-mode gui, minimal retained data
 *       - +25 controls provided (basic and advanced)
 *       - Styling system for colors, font and metrics
 *       - Icons supported, embedded as a 1-bit icons pack
 *       - Standalone mode option (custom input/graphics backend)
 *       - Multiple support tools provided for raygui development
 *
 *   POSSIBLE IMPROVEMENTS:
 *       - Better standalone mode API for easy plug of custom backends
 *       - Externalize required inputs, allow user easier customization
 *
 *   LIMITATIONS:
 *       - No editable multi-line word-wraped text box supported
 *       - No auto-layout mechanism, up to the user to define controls position and size
 *       - Standalone mode requires library modification and some user work to plug another backend
 *
 *   NOTES:
 *       - WARNING: GuiLoadStyle() and GuiLoadStyle{Custom}() functions, allocate memory for
 *         font atlas recs and glyphs, freeing that memory is (usually) up to the user,
 *         no unload function is explicitly provided... but note that GuiLoadStyleDefaulf() unloads
 *         by default any previously loaded font (texture, recs, glyphs).
 *       - Global UI alpha (guiAlpha) is applied inside GuiDrawRectangle() and GuiDrawText() functions
 *
 *   CONTROLS PROVIDED:
 *     # Container/separators Controls
 *       - WindowBox     --> StatusBar, Panel
 *       - GroupBox      --> Line
 *       - Line
 *       - Panel         --> StatusBar
 *       - ScrollPanel   --> StatusBar
 *       - TabBar        --> Button
 *
 *     # Basic Controls
 *       - Label
 *       - LabelButton   --> Label
 *       - Button
 *       - Toggle
 *       - ToggleGroup   --> Toggle
 *       - ToggleSlider
 *       - CheckBox
 *       - ComboBox
 *       - DropdownBox
 *       - TextBox
 *       - ValueBox      --> TextBox
 *       - Spinner       --> Button, ValueBox
 *       - Slider
 *       - SliderBar     --> Slider
 *       - ProgressBar
 *       - StatusBar
 *       - DummyRec
 *       - Grid
 *
 *     # Advance Controls
 *       - ListView
 *       - ColorPicker   --> ColorPanel, ColorBarHue
 *       - MessageBox    --> Window, Label, Button
 *       - TextInputBox  --> Window, Label, TextBox, Button
 *
 *     It also provides a set of functions for styling the controls based on its properties (size, color).
 *
 *
 *   RAYGUI STYLE (guiStyle):
 *       raygui uses a global data array for all gui style properties (allocated on data segment by default),
 *       when a new style is loaded, it is loaded over the global style... but a default gui style could always be
 *       recovered with GuiLoadStyleDefault() function, that overwrites the current style to the default one
 *
 *       The global style array size is fixed and depends on the number of controls and properties:
 *
 *           static unsigned int guiStyle[RAYGUI_MAX_CONTROLS*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED)];
 *
 *       guiStyle size is by default: 16*(16 + 8) = 384*4 = 1536 bytes = 1.5 KB
 *
 *       Note that the first set of BASE properties (by default guiStyle[0..15]) belong to the generic style
 *       used for all controls, when any of those base values is set, it is automatically populated to all
 *       controls, so, specific control values overwriting generic style should be set after base values.
 *
 *       After the first BASE set we have the EXTENDED properties (by default guiStyle[16..23]), those
 *       properties are actually common to all controls and can not be overwritten individually (like BASE ones)
 *       Some of those properties are: TEXT_SIZE, TEXT_SPACING, LINE_COLOR, BACKGROUND_COLOR
 *
 *       Custom control properties can be defined using the EXTENDED properties for each independent control.
 *
 *       TOOL: rGuiStyler is a visual tool to customize raygui style: github.com/raysan5/rguistyler
 *
 *
 *   RAYGUI ICONS (guiIcons):
 *       raygui could use a global array containing icons data (allocated on data segment by default),
 *       a custom icons set could be loaded over this array using GuiLoadIcons(), but loaded icons set
 *       must be same RAYGUI_ICON_SIZE and no more than RAYGUI_ICON_MAX_ICONS will be loaded
 *
 *       Every icon is codified in binary form, using 1 bit per pixel, so, every 16x16 icon
 *       requires 8 integers (16*16/32) to be stored in memory.
 *
 *       When the icon is draw, actually one quad per pixel is drawn if the bit for that pixel is set.
 *
 *       The global icons array size is fixed and depends on the number of icons and size:
 *
 *           static unsigned int guiIcons[RAYGUI_ICON_MAX_ICONS*RAYGUI_ICON_DATA_ELEMENTS];
 *
 *       guiIcons size is by default: 256*(16*16/32) = 2048*4 = 8192 bytes = 8 KB
 *
 *       TOOL: rGuiIcons is a visual tool to customize/create raygui icons: github.com/raysan5/rguiicons
 *
 *   RAYGUI LAYOUT:
 *       raygui currently does not provide an auto-layout mechanism like other libraries,
 *       layouts must be defined manually on controls drawing, providing the right bounds Rectangle for it.
 *
 *       TOOL: rGuiLayout is a visual tool to create raygui layouts: github.com/raysan5/rguilayout
 *
 *   CONFIGURATION:
 *       #define RAYGUI_IMPLEMENTATION
 *           Generates the implementation of the library into the included file.
 *           If not defined, the library is in header only mode and can be included in other headers
 *           or source files without problems. But only ONE file should hold the implementation.
 *
 *       #define RAYGUI_STANDALONE
 *           Avoid raylib.h header inclusion in this file. Data types defined on raylib are defined
 *           internally in the library and input management and drawing functions must be provided by
 *           the user (check library implementation for further details).
 *
 *       #define RAYGUI_NO_ICONS
 *           Avoid including embedded ricons data (256 icons, 16x16 pixels, 1-bit per pixel, 2KB)
 *
 *       #define RAYGUI_CUSTOM_ICONS
 *           Includes custom ricons.h header defining a set of custom icons,
 *           this file can be generated using rGuiIcons tool
 *
 *       #define RAYGUI_DEBUG_RECS_BOUNDS
 *           Draw control bounds rectangles for debug
 *
 *       #define RAYGUI_DEBUG_TEXT_BOUNDS
 *           Draw text bounds rectangles for debug
 *
 *   VERSIONS HISTORY:
 *       4.0 (12-Sep-2023) ADDED: GuiToggleSlider()
 *                         ADDED: GuiColorPickerHSV() and GuiColorPanelHSV()
 *                         ADDED: Multiple new icons, mostly compiler related
 *                         ADDED: New DEFAULT properties: TEXT_LINE_SPACING, TEXT_ALIGNMENT_VERTICAL, TEXT_WRAP_MODE
 *                         ADDED: New enum values: GuiTextAlignment, GuiTextAlignmentVertical, GuiTextWrapMode
 *                         ADDED: Support loading styles with custom font charset from external file
 *                         REDESIGNED: GuiTextBox(), support mouse cursor positioning
 *                         REDESIGNED: GuiDrawText(), support multiline and word-wrap modes (read only)
 *                         REDESIGNED: GuiProgressBar() to be more visual, progress affects border color
 *                         REDESIGNED: Global alpha consideration moved to GuiDrawRectangle() and GuiDrawText()
 *                         REDESIGNED: GuiScrollPanel(), get parameters by reference and return result value
 *                         REDESIGNED: GuiToggleGroup(), get parameters by reference and return result value
 *                         REDESIGNED: GuiComboBox(), get parameters by reference and return result value
 *                         REDESIGNED: GuiCheckBox(), get parameters by reference and return result value
 *                         REDESIGNED: GuiSlider(), get parameters by reference and return result value
 *                         REDESIGNED: GuiSliderBar(), get parameters by reference and return result value
 *                         REDESIGNED: GuiProgressBar(), get parameters by reference and return result value
 *                         REDESIGNED: GuiListView(), get parameters by reference and return result value
 *                         REDESIGNED: GuiColorPicker(), get parameters by reference and return result value
 *                         REDESIGNED: GuiColorPanel(), get parameters by reference and return result value
 *                         REDESIGNED: GuiColorBarAlpha(), get parameters by reference and return result value
 *                         REDESIGNED: GuiColorBarHue(), get parameters by reference and return result value
 *                         REDESIGNED: GuiGrid(), get parameters by reference and return result value
 *                         REDESIGNED: GuiGrid(), added extra parameter
 *                         REDESIGNED: GuiListViewEx(), change parameters order
 *                         REDESIGNED: All controls return result as int value
 *                         REVIEWED: GuiScrollPanel() to avoid smallish scroll-bars
 *                         REVIEWED: All examples and specially controls_test_suite
 *                         RENAMED: gui_file_dialog module to gui_window_file_dialog
 *                         UPDATED: All styles to include ISO-8859-15 charset (as much as possible)
 *
 *       3.6 (10-May-2023) ADDED: New icon: SAND_TIMER
 *                         ADDED: GuiLoadStyleFromMemory() (binary only)
 *                         REVIEWED: GuiScrollBar() horizontal movement key
 *                         REVIEWED: GuiTextBox() crash on cursor movement
 *                         REVIEWED: GuiTextBox(), additional inputs support
 *                         REVIEWED: GuiLabelButton(), avoid text cut
 *                         REVIEWED: GuiTextInputBox(), password input
 *                         REVIEWED: Local GetCodepointNext(), aligned with raylib
 *                         REDESIGNED: GuiSlider*()/GuiScrollBar() to support out-of-bounds
 *
 *       3.5 (20-Apr-2023) ADDED: GuiTabBar(), based on GuiToggle()
 *                         ADDED: Helper functions to split text in separate lines
 *                         ADDED: Multiple new icons, useful for code editing tools
 *                         REMOVED: Unneeded icon editing functions
 *                         REMOVED: GuiTextBoxMulti(), very limited and broken
 *                         REMOVED: MeasureTextEx() dependency, logic directly implemented
 *                         REMOVED: DrawTextEx() dependency, logic directly implemented
 *                         REVIEWED: GuiScrollBar(), improve mouse-click behaviour
 *                         REVIEWED: Library header info, more info, better organized
 *                         REDESIGNED: GuiTextBox() to support cursor movement
 *                         REDESIGNED: GuiDrawText() to divide drawing by lines
 *
 *       3.2 (22-May-2022) RENAMED: Some enum values, for unification, avoiding prefixes
 *                         REMOVED: GuiScrollBar(), only internal
 *                         REDESIGNED: GuiPanel() to support text parameter
 *                         REDESIGNED: GuiScrollPanel() to support text parameter
 *                         REDESIGNED: GuiColorPicker() to support text parameter
 *                         REDESIGNED: GuiColorPanel() to support text parameter
 *                         REDESIGNED: GuiColorBarAlpha() to support text parameter
 *                         REDESIGNED: GuiColorBarHue() to support text parameter
 *                         REDESIGNED: GuiTextInputBox() to support password
 *
 *       3.1 (12-Jan-2022) REVIEWED: Default style for consistency (aligned with rGuiLayout v2.5 tool)
 *                         REVIEWED: GuiLoadStyle() to support compressed font atlas image data and unload previous textures
 *                         REVIEWED: External icons usage logic
 *                         REVIEWED: GuiLine() for centered alignment when including text
 *                         RENAMED: Multiple controls properties definitions to prepend RAYGUI_
 *                         RENAMED: RICON_ references to RAYGUI_ICON_ for library consistency
 *                         Projects updated and multiple tweaks
 *
 *       3.0 (04-Nov-2021) Integrated ricons data to avoid external file
 *                         REDESIGNED: GuiTextBoxMulti()
 *                         REMOVED: GuiImageButton*()
 *                         Multiple minor tweaks and bugs corrected
 *
 *       2.9 (17-Mar-2021) REMOVED: Tooltip API
 *       2.8 (03-May-2020) Centralized rectangles drawing to GuiDrawRectangle()
 *       2.7 (20-Feb-2020) ADDED: Possible tooltips API
 *       2.6 (09-Sep-2019) ADDED: GuiTextInputBox()
 *                         REDESIGNED: GuiListView*(), GuiDropdownBox(), GuiSlider*(), GuiProgressBar(), GuiMessageBox()
 *                         REVIEWED: GuiTextBox(), GuiSpinner(), GuiValueBox(), GuiLoadStyle()
 *                         Replaced property INNER_PADDING by TEXT_PADDING, renamed some properties
 *                         ADDED: 8 new custom styles ready to use
 *                         Multiple minor tweaks and bugs corrected
 *
 *       2.5 (28-May-2019) Implemented extended GuiTextBox(), GuiValueBox(), GuiSpinner()
 *       2.3 (29-Apr-2019) ADDED: rIcons auxiliar library and support for it, multiple controls reviewed
 *                         Refactor all controls drawing mechanism to use control state
 *       2.2 (05-Feb-2019) ADDED: GuiScrollBar(), GuiScrollPanel(), reviewed GuiListView(), removed Gui*Ex() controls
 *       2.1 (26-Dec-2018) REDESIGNED: GuiCheckBox(), GuiComboBox(), GuiDropdownBox(), GuiToggleGroup() > Use combined text string
 *                         REDESIGNED: Style system (breaking change)
 *       2.0 (08-Nov-2018) ADDED: Support controls guiLock and custom fonts
 *                         REVIEWED: GuiComboBox(), GuiListView()...
 *       1.9 (09-Oct-2018) REVIEWED: GuiGrid(), GuiTextBox(), GuiTextBoxMulti(), GuiValueBox()...
 *       1.8 (01-May-2018) Lot of rework and redesign to align with rGuiStyler and rGuiLayout
 *       1.5 (21-Jun-2017) Working in an improved styles system
 *       1.4 (15-Jun-2017) Rewritten all GUI functions (removed useless ones)
 *       1.3 (12-Jun-2017) Complete redesign of style system
 *       1.1 (01-Jun-2017) Complete review of the library
 *       1.0 (07-Jun-2016) Converted to header-only by Ramon Santamaria.
 *       0.9 (07-Mar-2016) Reviewed and tested by Albert Martos, Ian Eito, Sergio Martinez and Ramon Santamaria.
 *       0.8 (27-Aug-2015) Initial release. Implemented by Kevin Gato, Daniel Nicolás and Ramon Santamaria.
 *
 *   DEPENDENCIES:
 *       raylib 4.6-dev      Inputs reading (keyboard/mouse), shapes drawing, font loading and text drawing
 *
 *   STANDALONE MODE:
 *       By default raygui depends on raylib mostly for the inputs and the drawing functionality but that dependency can be disabled
 *       with the config flag RAYGUI_STANDALONE. In that case is up to the user to provide another backend to cover library needs.
 *
 *       The following functions should be redefined for a custom backend:
 *
 *           - Vector2 GetMousePosition(void);
 *           - float GetMouseWheelMove(void);
 *           - bool IsMouseButtonDown(int button);
 *           - bool IsMouseButtonPressed(int button);
 *           - bool IsMouseButtonReleased(int button);
 *           - bool IsKeyDown(int key);
 *           - bool IsKeyPressed(int key);
 *           - int GetCharPressed(void);         // -- GuiTextBox(), GuiValueBox()
 *
 *           - void DrawRectangle(int x, int y, int width, int height, Color color); // -- GuiDrawRectangle()
 *           - void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4); // -- GuiColorPicker()
 *
 *           - Font GetFontDefault(void);                            // -- GuiLoadStyleDefault()
 *           - Font LoadFontEx(const char *fileName, int fontSize, int *codepoints, int codepointCount); // -- GuiLoadStyle()
 *           - Texture2D LoadTextureFromImage(Image image);          // -- GuiLoadStyle(), required to load texture from embedded font atlas image
 *           - void SetShapesTexture(Texture2D tex, Rectangle rec);  // -- GuiLoadStyle(), required to set shapes rec to font white rec (optimization)
 *           - char *LoadFileText(const char *fileName);             // -- GuiLoadStyle(), required to load charset data
 *           - void UnloadFileText(char *text);                      // -- GuiLoadStyle(), required to unload charset data
 *           - const char *GetDirectoryPath(const char *filePath);   // -- GuiLoadStyle(), required to find charset/font file from text .rgs
 *           - int *LoadCodepoints(const char *text, int *count);    // -- GuiLoadStyle(), required to load required font codepoints list
 *           - void UnloadCodepoints(int *codepoints);               // -- GuiLoadStyle(), required to unload codepoints list
 *           - unsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataSize); // -- GuiLoadStyle()
 *
 *   CONTRIBUTORS:
 *       Ramon Santamaria:   Supervision, review, redesign, update and maintenance
 *       Vlad Adrian:        Complete rewrite of GuiTextBox() to support extended features (2019)
 *       Sergio Martinez:    Review, testing (2015) and redesign of multiple controls (2018)
 *       Adria Arranz:       Testing and implementation of additional controls (2018)
 *       Jordi Jorba:        Testing and implementation of additional controls (2018)
 *       Albert Martos:      Review and testing of the library (2015)
 *       Ian Eito:           Review and testing of the library (2015)
 *       Kevin Gato:         Initial implementation of basic components (2014)
 *       Daniel Nicolas:     Initial implementation of basic components (2014)
 *
 *
 *   LICENSE: zlib/libpng
 *
 *   Copyright (c) 2014-2023 Ramon Santamaria (@raysan5)
 *
 *   This software is provided "as-is", without any express or implied warranty. In no event
 *   will the authors be held liable for any damages arising from the use of this software.
 *
 *   Permission is granted to anyone to use this software for any purpose, including commercial
 *   applications, and to alter it and redistribute it freely, subject to the following restrictions:
 *
 *     1. The origin of this software must not be misrepresented; you must not claim that you
 *     wrote the original software. If you use this software in a product, an acknowledgment
 *     in the product documentation would be appreciated but is not required.
 *
 *     2. Altered source versions must be plainly marked as such, and must not be misrepresented
 *     as being the original software.
 *
 *     3. This notice may not be removed or altered from any source distribution.
 *
 **********************************************************************************************/
module raygui::rg;
import raylib5::rl;

const RAYGUI_VERSION_MAJOR = 4;
const RAYGUI_VERSION_MINOR = 0;
const RAYGUI_VERSION_PATCH = 0;
const RAYGUI_VERSION = "4.0";

const SCROLLBAR_LEFT_SIDE @builtin = 0;
const SCROLLBAR_RIGHT_SIDE @builtin = 1;


GuiState guiState = GuiState.STATE_NORMAL;        // Gui global state, if !STATE_NORMAL, forces defined state

Font guiFont;                    // Gui current font (WARNING: highly coupled to raylib)
bool guiLocked = false;                  // Gui lock state (no inputs processed)
float guiAlpha = 1.0f;                   // Gui controls transparency

CUInt guiIconScale = 1;           // Gui icon default scale (if icons enabled)

// FIXME: conflicts with function guiTooltip
// bool guiTooltip = false;                 // Tooltip enabled/disabled
char *guiTooltipPtr = null;        // Tooltip string pointer (string provided by user)

bool guiSliderDragging = false;          // Gui slider drag state (no inputs processed except dragged slider)
Rectangle guiSliderActive;       // Gui slider active bounds rectangle, used as an unique identifier

int textBoxCursorIndex = 0;              // Cursor index, shared by all GuiTextBox*()
// int blinkCursorFrameCounter = 0;       // Frame counter for cursor blinking
int autoCursorCooldownCounter = 0;       // Cooldown frame counter for automatic cursor movement on key-down
int autoCursorDelayCounter = 0;          // Delay frame counter for automatic cursor movement

// Function specifiers in case library is build/used as a shared library (Windows)
// NOTE: Microsoft specifiers to tell compiler that symbols are imported/exported from a .dll
// $if defined(_WIN32)
//     $if defined(BUILD_LIBTYPE_SHARED)
//         $define RAYGUIAPI __declspec(dllexport)     // We are building the library as a Win32 shared library (.dll)
//     $elif defined(USE_LIBTYPE_SHARED)
//         $define RAYGUIAPI __declspec(dllimport)     // We are using the library as a Win32 shared library (.dll)
//     $endif
// $endif


// //----------------------------------------------------------------------------------
// // Defines and Macros
// //----------------------------------------------------------------------------------
// // Allow custom memory allocators
// #ifndef RAYGUI_MALLOC
//     #define RAYGUI_MALLOC(sz)       malloc(sz)
// #endif
// #ifndef RAYGUI_CALLOC
//     #define RAYGUI_CALLOC(n,sz)     calloc(n,sz)
// #endif
// #ifndef RAYGUI_FREE
//     #define RAYGUI_FREE(p)          free(p)
// #endif

// Simple log system to avoid printf() calls if required
// NOTE: Avoiding those calls, also avoids const strings memory usage
// #define RAYGUI_SUPPORT_LOG_INFO
// #if defined(RAYGUI_SUPPORT_LOG_INFO)
//   #define RAYGUI_LOG(...)           printf(__VA_ARGS__)
// #else
//   #define RAYGUI_LOG(...)
// #endif

//----------------------------------------------------------------------------------
// Types and Structures Definition
// NOTE: Some types are required for RAYGUI_STANDALONE usage
//----------------------------------------------------------------------------------
/*
// NOTE: possible start of raylib5.c3l conflicting types
// Vector2 type
struct Vector2 {
  float x;
  float y;
}

// Vector3 type                 // -- ConvertHSVtoRGB(), ConvertRGBtoHSV()
struct Vector3 {
  float x;
  float y;
  float z;
}

// Color type, RGBA (32bit)
struct Color {
  char r;
  char g;
  char b;
  char a;
}

// Rectangle type
struct Rectangle {
  float x;
  float y;
  float width;
  float height;
}

// TODO: Texture2D type is very coupled to raylib, required by Font type
// It should be redesigned to be provided by user
struct Texture2D {
  CUInt id;        // OpenGL texture id
  CInt width;              // Texture base width
  CInt height;             // Texture base height
  CInt mipmaps;            // Mipmap levels, 1 by default
  CInt format;             // Data format (PixelFormat type)
}

// Image, pixel data stored in CPU memory (RAM)
struct Image {
  void *data;             // Image raw data
  CInt width;              // Image base width
  CInt height;             // Image base height
  CInt mipmaps;            // Mipmap levels, 1 by default
  CInt format;             // Data format (PixelFormat type)
}

// GlyphInfo, font characters glyphs info
struct GlyphInfo {
  CInt value;              // Character value (Unicode)
  CInt offsetX;            // Character offset X when drawing
  CInt offsetY;            // Character offset Y when drawing
  CInt advanceX;           // Character advance position X
  Image image;            // Character image data
}

// TODO: Font type is very coupled to raylib, mostly required by GuiLoadStyle()
// It should be redesigned to be provided by user
struct Font {
  CInt baseSize;           // Base size (default chars height)
  CInt glyphCount;         // Number of glyph characters
  CInt glyphPadding;       // Padding around the glyph characters
  Texture2D texture;      // Texture atlas containing the glyphs
  Rectangle *recs;        // Rectangles in texture for the glyphs
  GlyphInfo *glyphs;      // Glyphs info data
}
// #endif
// NOTE: possible end of raylib5.c3l conflicting types
*/
// Style property
// NOTE: Used when exporting style as code for convenience
struct GuiStyleProp {
  CUShort controlId;   // Control identifier
  CUShort propertyId;  // Property identifier
  CInt propertyValue;          // Property value
}


// Controls text style -NOT USED-
// NOTE: Text style is defined by control
struct GuiTextStyle {
  CUInt size;
  CInt charSpacing;
  CInt lineSpacing;
  CInt alignmentH;
  CInt alignmentV;
  CInt padding;
}


// Gui control state
enum GuiState {
  STATE_NORMAL,
  STATE_FOCUSED,
  STATE_PRESSED,
  STATE_DISABLED
}

// Gui control text alignment
enum GuiTextAlignment {
  TEXT_ALIGN_LEFT,
  TEXT_ALIGN_CENTER,
  TEXT_ALIGN_RIGHT
}

// Gui control text alignment vertical
// NOTE: Text vertical position inside the text bounds
enum GuiTextAlignmentVertical {
  TEXT_ALIGN_TOP,
  TEXT_ALIGN_MIDDLE,
  TEXT_ALIGN_BOTTOM
}

// Gui control text wrap mode
// NOTE: Useful for multiline text
enum GuiTextWrapMode {
  TEXT_WRAP_NONE,
  TEXT_WRAP_CHAR,
  TEXT_WRAP_WORD
}

// Gui controls
enum GuiControl {
  // Default -> populates to all controls when set
  DEFAULT,

  // Basic controls
  LABEL,          // Used also for: LABELBUTTON
  BUTTON,
  TOGGLE,         // Used also for: TOGGLEGROUP
  SLIDER,         // Used also for: SLIDERBAR, TOGGLESLIDER
  PROGRESSBAR,
  CHECKBOX,
  COMBOBOX,
  DROPDOWNBOX,
  TEXTBOX,        // Used also for: TEXTBOXMULTI
  VALUEBOX,
  SPINNER,        // Uses: BUTTON, VALUEBOX
  LISTVIEW,
  COLORPICKER,
  SCROLLBAR,
  STATUSBAR
}

//----------------------------------------------------------------------------------
// Global Variables Definition
//----------------------------------------------------------------------------------
// ...

//----------------------------------------------------------------------------------
// Module Functions Declaration
//----------------------------------------------------------------------------------

// Global gui state control functions
extern fn void guiEnable() @extern("GuiEnable");                                 // Enable gui controls (global state)
extern fn void guiDisable() @extern("GuiDisable");                                // Disable gui controls (global state)
extern fn void guiLock() @extern("GuiLock");                                   // Lock gui controls (global state)
extern fn void guiUnlock() @extern("GuiUnlock");                                 // Unlock gui controls (global state)
extern fn bool guiIsLocked() @extern("GuiIsLocked");                               // Check if gui is locked (global state)
extern fn void guiSetAlpha(float alpha) @extern("GuiSetAlpha");                        // Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f
extern fn void guiSetState(GuiState state) @extern("GuiSetState");                          // Set gui state (global state)
extern fn GuiState guiGetState() @extern("GuiGetState");                                // Get gui state (global state)

// Font set/get functions
extern fn void guiSetFont(Font font) @extern("GuiSetFont");                           // Set gui custom font (global state)
extern fn Font guiGetFont() @extern("GuiGetFont");                                // Get gui custom font (global state)

// Style set/get functions
extern fn void guiSetStyle(GuiControl control, GuiControlProperty property, CInt value) @extern("GuiSetStyle"); // Set one style property
extern fn CInt guiGetStyle(GuiControl control, GuiControlProperty property) @extern("GuiGetStyle");           // Get one style property

// Styles loading functions
extern fn void guiLoadStyle(char *fileName) @extern("GuiLoadStyle");              // Load style file over global style variable (.rgs)
extern fn void guiLoadStyleDefault() @extern("GuiLoadStyleDefault");                       // Load style default over global style

// Tooltips management functions
extern fn void guiEnableTooltip() @extern("GuiEnableTooltip");                          // Enable gui tooltips (global state)
extern fn void guiDisableTooltip() @extern("GuiDisableTooltip");                         // Disable gui tooltips (global state)
extern fn void guiSetTooltip(char *tooltip) @extern("GuiSetTooltip");              // Set tooltip string

// Icons functionality
extern fn char *guiIconText (GuiIconName iconId, char *text) @extern("GuiIconText"); // Get text with icon id prepended (if supported)
// #if !defined(RAYGUI_NO_ICONS)
extern fn void guiSetIconScale(CInt scale) @extern("GuiSetIconScale");                      // Set default icon drawing size
extern fn CUInt *guiGetIcons() @extern("GuiGetIcons");                      // Get raygui icons data pointer
extern fn char **guiLoadIcons(char *fileName, bool loadIconsName) @extern("GuiLoadIcons"); // Load raygui icons file (.rgi) into internal icons data
extern fn void guiDrawIcon(GuiIconName iconId, CInt posX, CInt posY, CInt pixelSize, Color color) @extern("GuiDrawIcon"); // Draw icon using pixel size at specified position
// #endif


// Controls
//----------------------------------------------------------------------------------------------------------
// Container/separator controls, useful for controls organization
extern fn CInt guiWindowBox(Rectangle bounds, char *title) @extern("GuiWindowBox");                                       // Window Box control, shows a window that can be closed
extern fn CInt guiGroupBox(Rectangle bounds, char *text) @extern("GuiGroupBox");                                         // Group Box control with text name
extern fn CInt guiLine(Rectangle bounds, char *text) @extern("GuiLine");                                             // Line separator control, could contain text
extern fn CInt guiPanel(Rectangle bounds, char *text) @extern("GuiPanel");                                            // Panel control, useful to group controls
extern fn CInt guiTabBar(Rectangle bounds, char **text, CInt count, CInt *active) @extern("GuiTabBar");                  // Tab Bar control, returns TAB to be closed or -1
extern fn CInt guiScrollPanel(Rectangle bounds, char *text, Rectangle content, Vector2 *scroll, Rectangle *view) @extern("GuiScrollPanel"); // Scroll Panel control

// Basic controls set
extern fn CInt guiLabel(Rectangle bounds, char *text) @extern("GuiLabel");                                            // Label control, shows text
extern fn CInt guiButton(Rectangle bounds, char *text) @extern("GuiButton");                                           // Button control, returns true when clicked
extern fn CInt guiLabelButton(Rectangle bounds, char *text) @extern("GuiLabelButton");                                      // Label button control, show true when clicked
extern fn CInt guiToggle(Rectangle bounds, char *text, bool *active) @extern("GuiToggle");                             // Toggle Button control, returns true when active
extern fn CInt guiToggleGroup(Rectangle bounds, char *text, CInt *active) @extern("GuiToggleGroup");                         // Toggle Group control, returns active toggle index
extern fn CInt guiToggleSlider(Rectangle bounds, char *text, CInt *active) @extern("GuiToggleSlider");                        // Toggle Slider control, returns true when clicked
extern fn CInt guiCheckBox(Rectangle bounds, char *text, bool *checked) @extern("GuiCheckBox");                          // Check Box control, returns true when active
extern fn CInt guiComboBox(Rectangle bounds, char *text, CInt *active) @extern("GuiComboBox");                            // Combo Box control, returns selected item index

extern fn CInt guiDropdownBox(Rectangle bounds, char *text, CInt *active, bool editMode) @extern("GuiDropdownBox");          // Dropdown Box control, returns selected item
extern fn CInt guiSpinner(Rectangle bounds, char *text, CInt *value, CInt minValue, CInt maxValue, bool editMode) @extern("GuiSpinner"); // Spinner control, returns selected value
extern fn CInt guiValueBox(Rectangle bounds, char *text, CInt *value, CInt minValue, CInt maxValue, bool editMode) @extern("GuiValueBox"); // Value Box control, updates input text with numbers
extern fn CInt guiTextBox(Rectangle bounds, char *text, CInt textSize, bool editMode) @extern("GuiTextBox");                   // Text Box control, updates input text

extern fn CInt guiSlider(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiSlider"); // Slider control, returns selected value
extern fn CInt guiSliderBar(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiSliderBar"); // Slider Bar control, returns selected value
extern fn CInt guiProgressBar(Rectangle bounds, char *textLeft, char *textRight, float *value, float minValue, float maxValue) @extern("GuiProgressBar"); // Progress Bar control, shows current progress value
extern fn CInt guiStatusBar(Rectangle bounds, char *text) @extern("GuiStatusBar");                                        // Status Bar control, shows info text
extern fn CInt guiDummyRec(Rectangle bounds, char *text) @extern("GuiDummyRec");                                         // Dummy control for placeholders
extern fn CInt guiGrid(Rectangle bounds, char *text, float spacing, CInt subdivs, Vector2 *mouseCell) @extern("GuiGrid"); // Grid control, returns mouse cell position

// Advance controls set
extern fn CInt guiListView(Rectangle bounds, char *text, CInt *scrollIndex, CInt *active) @extern("GuiListView");          // List View control, returns selected list item index
extern fn CInt guiListViewEx(Rectangle bounds, char **text, CInt count, CInt *scrollIndex, CInt *active, CInt *focus) @extern("GuiListViewEx"); // List View with extended parameters
extern fn CInt guiMessageBox(Rectangle bounds, char *title, char *message, char *buttons) @extern("GuiMessageBox"); // Message Box control, displays a message
extern fn CInt guiTextInputBox(Rectangle bounds, char *title, char *message, char *buttons, char *text, CInt textMaxSize, bool *secretViewActive) @extern("GuiTextInputBox"); // Text Input Box control, ask for text, supports secret
extern fn CInt guiColorPicker(Rectangle bounds, char *text, Color *color) @extern("GuiColorPicker");                        // Color Picker control (multiple color controls)
extern fn CInt guiColorPanel(Rectangle bounds, char *text, Color *color) @extern("GuiColorPanel");                         // Color Panel control
extern fn CInt guiColorBarAlpha(Rectangle bounds, char *text, float *alpha) @extern("GuiColorBarAlpha");                      // Color Bar Alpha control
extern fn CInt guiColorBarHue(Rectangle bounds, char *text, float *value) @extern("GuiColorBarHue");                        // Color Bar Hue control
extern fn CInt guiColorPickerHSV(Rectangle bounds, char *text, Vector3 *colorHsv) @extern("GuiColorPickerHSV");                // Color Picker control that avoids conversion to RGB on each call (multiple color controls)
extern fn CInt guiColorPanelHSV(Rectangle bounds, char *text, Vector3 *colorHsv) @extern("GuiColorPanelHSV");                 // Color Panel control that returns HSV color value, used by GuiColorPickerHSV()
//----------------------------------------------------------------------------------------------------------


extern fn void guiLoadStyleFromMemory(char *fileData, int dataSize) @extern("GuiLoadStyleFromMemory");    // Load style from memory (binary only)

extern fn int getTextWidth(char *text) @extern("GetTextWidth");                      // Gui get text width using gui font and style
extern fn Rectangle getTextBounds(int control, Rectangle bounds) @extern("GetTextBounds");  // Get text bounds considering control bounds
extern fn char *getTextIcon(char *text, int *iconId) @extern("GetTextIcon");  // Get text icon if provided and move text cursor

extern fn void guiDrawText(char *text, Rectangle textBounds, GuiTextAlignment alignment, Color tint) @extern("GuiDrawText");     // Gui draw text using default font
extern fn void guiDrawRectangle(Rectangle rec, int borderWidth, Color borderColor, Color color) @extern("GuiDrawRectangle");   // Gui draw rectangle using default raygui style

extern fn char **guiTextSplit (char *text, char delimiter, int *count, int *textRow) @extern("GuiTextSplit");   // Split controls text into multiple strings
extern fn Vector3 convertHSVtoRGB(Vector3 hsv) @extern("ConvertHSVtoRGB");                    // Convert color data from HSV to RGB
extern fn Vector3 convertRGBtoHSV(Vector3 rgb) @extern("ConvertRGBtoHSV");                    // Convert color data from RGB to HSV

extern fn int guiScrollBar(Rectangle bounds, int value, int minValue, int maxValue) @extern("GuiScrollBar");   // Scroll bar control, used by GuiScrollPanel()
extern fn void guiTooltip(Rectangle controlRec) @extern("GuiTooltip");                   // Draw tooltip using control rec position

extern fn Color guiFade(Color color, float alpha) @extern("GuiFade");         // Fade color by an alpha factor

//----------------------------------------------------------------------------------
// Icons enumeration
//----------------------------------------------------------------------------------
enum GuiIconName {
  ICON_NONE,
  FOLDER_FILE_OPEN,
  FILE_SAVE_CLASSIC,
  FOLDER_OPEN,
  FOLDER_SAVE,
  FILE_OPEN,
  FILE_SAVE,
  FILE_EXPORT,
  FILE_ADD,
  FILE_DELETE,
  FILETYPE_TEXT,
  FILETYPE_AUDIO,
  FILETYPE_IMAGE,
  FILETYPE_PLAY,
  FILETYPE_VIDEO,
  FILETYPE_INFO,
  FILE_COPY,
  FILE_CUT,
  FILE_PASTE,
  CURSOR_HAND,
  CURSOR_POINTER,
  CURSOR_CLASSIC,
  PENCIL,
  PENCIL_BIG,
  BRUSH_CLASSIC,
  BRUSH_PAINTER,
  WATER_DROP,
  COLOR_PICKER,
  RUBBER,
  COLOR_BUCKET,
  TEXT_T,
  TEXT_A,
  SCALE,
  RESIZE,
  FILTER_POINT,
  FILTER_BILINEAR,
  CROP,
  CROP_ALPHA,
  SQUARE_TOGGLE,
  SYMMETRY,
  SYMMETRY_HORIZONTAL,
  SYMMETRY_VERTICAL,
  LENS,
  LENS_BIG,
  EYE_ON,
  EYE_OFF,
  FILTER_TOP,
  FILTER,
  TARGET_POINT,
  TARGET_SMALL,
  TARGET_BIG,
  TARGET_MOVE,
  CURSOR_MOVE,
  CURSOR_SCALE,
  CURSOR_SCALE_RIGHT,
  CURSOR_SCALE_LEFT,
  UNDO,
  REDO,
  REREDO,
  MUTATE,
  ROTATE,
  REPEAT,
  SHUFFLE,
  EMPTYBOX,
  TARGET,
  TARGET_SMALL_FILL,
  TARGET_BIG_FILL,
  TARGET_MOVE_FILL,
  CURSOR_MOVE_FILL,
  CURSOR_SCALE_FILL,
  CURSOR_SCALE_RIGHT_FILL,
  CURSOR_SCALE_LEFT_FILL,
  UNDO_FILL,
  REDO_FILL,
  REREDO_FILL,
  MUTATE_FILL,
  ROTATE_FILL,
  REPEAT_FILL,
  SHUFFLE_FILL,
  EMPTYBOX_SMALL,
  BOX,
  BOX_TOP,
  BOX_TOP_RIGHT,
  BOX_RIGHT,
  BOX_BOTTOM_RIGHT,
  BOX_BOTTOM,
  BOX_BOTTOM_LEFT,
  BOX_LEFT,
  BOX_TOP_LEFT,
  BOX_CENTER,
  BOX_CIRCLE_MASK,
  POT,
  ALPHA_MULTIPLY,
  ALPHA_CLEAR,
  DITHERING,
  MIPMAPS,
  BOX_GRID,
  GRID,
  BOX_CORNERS_SMALL,
  BOX_CORNERS_BIG,
  FOUR_BOXES,
  GRID_FILL,
  BOX_MULTISIZE,
  ZOOM_SMALL,
  ZOOM_MEDIUM,
  ZOOM_BIG,
  ZOOM_ALL,
  ZOOM_CENTER,
  BOX_DOTS_SMALL,
  BOX_DOTS_BIG,
  BOX_CONCENTRIC,
  BOX_GRID_BIG,
  OK_TICK,
  CROSS,
  ARROW_LEFT,
  ARROW_RIGHT,
  ARROW_DOWN,
  ARROW_UP,
  ARROW_LEFT_FILL,
  ARROW_RIGHT_FILL,
  ARROW_DOWN_FILL,
  ARROW_UP_FILL,
  AUDIO,
  FX,
  WAVE,
  WAVE_SINUS,
  WAVE_SQUARE,
  WAVE_TRIANGULAR,
  CROSS_SMALL,
  PLAYER_PREVIOUS,
  PLAYER_PLAY_BACK,
  PLAYER_PLAY,
  PLAYER_PAUSE,
  PLAYER_STOP,
  PLAYER_NEXT,
  PLAYER_RECORD,
  MAGNET,
  LOCK_CLOSE,
  LOCK_OPEN,
  CLOCK,
  TOOLS,
  GEAR,
  GEAR_BIG,
  BIN,
  HAND_POINTER,
  LASER,
  COIN,
  EXPLOSION,
  // NOTE 1UP
  ONEUP,
  PLAYER,
  PLAYER_JUMP,
  KEY,
  DEMON,
  TEXT_POPUP,
  GEAR_EX,
  CRACK,
  CRACK_POINTS,
  STAR,
  DOOR,
  EXIT,
  MODE_2D,
  MODE_3D,
  CUBE,
  CUBE_FACE_TOP,
  CUBE_FACE_LEFT,
  CUBE_FACE_FRONT,
  CUBE_FACE_BOTTOM,
  CUBE_FACE_RIGHT,
  CUBE_FACE_BACK,
  CAMERA,
  SPECIAL,
  LINK_NET,
  LINK_BOXES,
  LINK_MULTI,
  LINK,
  LINK_BROKE,
  TEXT_NOTES,
  NOTEBOOK,
  SUITCASE,
  SUITCASE_ZIP,
  MAILBOX,
  MONITOR,
  PRINTER,
  PHOTO_CAMERA,
  PHOTO_CAMERA_FLASH,
  HOUSE,
  HEART,
  CORNER,
  VERTICAL_BARS,
  VERTICAL_BARS_FILL,
  LIFE_BARS,
  INFO,
  CROSSLINE,
  HELP,
  FILETYPE_ALPHA,
  FILETYPE_HOME,
  LAYERS_VISIBLE,
  LAYERS,
  WINDOW,
  HIDPI,
  FILETYPE_BINARY,
  HEX,
  SHIELD,
  FILE_NEW,
  FOLDER_ADD,
  ALARM,
  CPU,
  ROM,
  STEP_OVER,
  STEP_INTO,
  STEP_OUT,
  RESTART,
  BREAKPOINT_ON,
  BREAKPOINT_OFF,
  BURGER_MENU,
  CASE_SENSITIVE,
  REG_EXP,
  FOLDER,
  FILE,
  SAND_TIMER,
  ICON_220,
  ICON_221,
  ICON_222,
  ICON_223,
  ICON_224,
  ICON_225,
  ICON_226,
  ICON_227,
  ICON_228,
  ICON_229,
  ICON_230,
  ICON_231,
  ICON_232,
  ICON_233,
  ICON_234,
  ICON_235,
  ICON_236,
  ICON_237,
  ICON_238,
  ICON_239,
  ICON_240,
  ICON_241,
  ICON_242,
  ICON_243,
  ICON_244,
  ICON_245,
  ICON_246,
  ICON_247,
  ICON_248,
  ICON_249,
  ICON_250,
  ICON_251,
  ICON_252,
  ICON_253,
  ICON_254,
  ICON_255,
}

const TEXT_SIZE = 16;             // Text size (glyphs max height)
const TEXT_SPACING = 17;               // Text spacing between glyphs
const LINE_COLOR = 18;                 // Line control color
const BACKGROUND_COLOR = 19;           // Background color
const TEXT_LINE_SPACING = 20;          // Text spacing between lines
const TEXT_ALIGNMENT_VERTICAL = 21;    // Text vertical alignment inside text bounds (after border and padding)
const  TEXT_WRAP_MODE = 22;              // Text wrap-mode inside text bounds
//  //TEXT_DECORATION             // Text decoration: 0-None, 1-Underline, 2-Line-through, 3-Overline
//  //TEXT_DECORATION_THICK       // Text decoration line thikness


// Other possible text properties:
// TEXT_WEIGHT                  // Normal, Italic, Bold -> Requires specific font change
// TEXT_INDENT                  // Text indentation -> Now using TEXT_PADDING...

// Label
//typedef enum { } GuiLabelProperty;

// Button/Spinner
//typedef enum { } GuiButtonProperty;

// Gui extended properties depend on control
// NOTE: RAYGUI_MAX_PROPS_EXTENDED properties (by default, max 8 properties)
//----------------------------------------------------------------------------------
// DEFAULT extended properties
// NOTE: Those properties are common to all controls or global
// WARNING: We only have 8 slots for those properties by default!!! -> New global control: TEXT?

// Toggle/ToggleGroup
// module ryagui::rg::guitoggleproperty;
// Gui base properties for every control
// NOTE: RAYGUI_MAX_PROPS_BASE properties (by default 16 properties)
distinct GuiControlProperty = CInt;
module raygui::rg::property_element;
// enum GuiPropertyElement
// {
const GuiControlProperty BORDER = 0;
const GuiControlProperty BASE = 1;
const GuiControlProperty TEXT = 2;
const GuiControlProperty OTHER = 3;
// }

module raygui::rg::control_property;
// enum GuiControlProperty {
const GuiControlProperty BORDER_COLOR_NORMAL = 0;        // Control border color in STATE_NORMAL
const GuiControlProperty BASE_COLOR_NORMAL = 1;          // Control base color in STATE_NORMAL
const GuiControlProperty TEXT_COLOR_NORMAL = 2;          // Control text color in STATE_NORMAL
const GuiControlProperty BORDER_COLOR_FOCUSED = 3;       // Control border color in STATE_FOCUSED
const GuiControlProperty BASE_COLOR_FOCUSED = 4;         // Control base color in STATE_FOCUSED
const GuiControlProperty TEXT_COLOR_FOCUSED = 5;         // Control text color in STATE_FOCUSED
const GuiControlProperty BORDER_COLOR_PRESSED = 6;       // Control border color in STATE_PRESSED
const GuiControlProperty BASE_COLOR_PRESSED = 7;         // Control base color in STATE_PRESSED
const GuiControlProperty TEXT_COLOR_PRESSED = 8;         // Control text color in STATE_PRESSED
const GuiControlProperty BORDER_COLOR_DISABLED = 9;      // Control border color in STATE_DISABLED
const GuiControlProperty BASE_COLOR_DISABLED = 10;        // Control base color in STATE_DISABLED
const GuiControlProperty TEXT_COLOR_DISABLED = 11;        // Control text color in STATE_DISABLED
const GuiControlProperty BORDER_WIDTH = 12;               // Control border size, 0 for no border
// const  //TEXT_SIZE,                  // Control text size (glyphs max height) -> GLOBAL for all controls
// const  //TEXT_SPACING,               // Control text spacing between glyphs -> GLOBAL for all controls
// const  //TEXT_LINE_SPACING           // Control text spacing between lines -> GLOBAL for all controls
const GuiControlProperty TEXT_PADDING = 13;               // Control text padding, not considering border
const GuiControlProperty TEXT_ALIGNMENT = 14;             // Control text horizontal alignment inside control text bound (after border and padding)
//TEXT_WRAP_MODE              // Control text wrap-mode inside text bounds -> GLOBAL for all controls
// }

// TODO: Which text styling properties should be global or per-control?
// At this moment TEXT_PADDING and TEXT_ALIGNMENT is configured and saved per control while
// TEXT_SIZE, TEXT_SPACING, TEXT_LINE_SPACING, TEXT_ALIGNMENT_VERTICAL, TEXT_WRAP_MODE are global and
// should be configured by user as needed while defining the UI layout



const GuiControlProperty GROUP_PADDING = 16;         // ToggleGroup separation between toggles
// } ;

// Slider/SliderBar
// module ryagui::rg::guisliderproperty;
const GuiControlProperty SLIDER_WIDTH = 16;          // Slider size of internal bar
const GuiControlProperty SLIDER_PADDING = 17;         // Slider/SliderBar internal bar padding

// ProgressBar
// module ryagui::rg::guiprogressbarproperty;
const GuiControlProperty PROGRESS_PADDING = 16;      // ProgressBar internal padding

// ScrollBar
// module ryagui::rg::guiscrollbarproperty;
const GuiControlProperty ARROWS_SIZE = 16;           // ScrollBar arrows size
const GuiControlProperty ARROWS_VISIBLE = 17;             // ScrollBar arrows visible
const GuiControlProperty SCROLL_SLIDER_PADDING = 18;      // ScrollBar slider internal padding
const GuiControlProperty SCROLL_SLIDER_SIZE = 19;         // ScrollBar slider size
const GuiControlProperty SCROLL_PADDING = 20;             // ScrollBar scroll padding from arrows
const GuiControlProperty SCROLL_SPEED = 21;               // ScrollBar scrolling speed

// CheckBox
// module ryagui::rg::guicheckboxproperty;
const GuiControlProperty CHECK_PADDING = 16;          // CheckBox internal check padding


// ComboBox
// module ryagui::rg::guicomboboxproperty;
const GuiControlProperty COMBO_BUTTON_WIDTH = 16;    // ComboBox right button width
const GuiControlProperty COMBO_BUTTON_SPACING = 17;       // ComboBox button separation

// DropdownBox
// module ryagui::rg::guidropdownboxproperty;
const GuiControlProperty ARROW_PADDING = 16;         // DropdownBox arrow separation from border and items
const GuiControlProperty DROPDOWN_ITEMS_SPACING = 17;     // DropdownBox items separation

// TextBox/TextBoxMulti/ValueBox/Spinner
// module ryagui::rg::guitextboxproperty;
const GuiControlProperty TEXT_READONLY = 16;         // TextBox in read-only mode: 0-text editable, 1-text no-editable

// Spinner
// module ryagui::rg::guispinnerproperty;
const GuiControlProperty SPIN_BUTTON_WIDTH = 16;     // Spinner left/right buttons width
const GuiControlProperty SPIN_BUTTON_SPACING = 17;        // Spinner buttons separation

// ListView
// module ryagui::rg::guilistviewproperty;
const GuiControlProperty LIST_ITEMS_HEIGHT = 16;     // ListView items height
const GuiControlProperty LIST_ITEMS_SPACING = 17;         // ListView items separation
const GuiControlProperty SCROLLBAR_WIDTH = 18;            // ListView scrollbar size (usually width)
const GuiControlProperty SCROLLBAR_SIDE = 19;             // ListView scrollbar side (0-SCROLLBAR_LEFT_SIDE, 1-SCROLLBAR_RIGHT_SIDE)

// ColorPicker
// module ryagui::rg::guicolorpickerproperty;
const GuiControlProperty COLOR_SELECTOR_SIZE = 16;
const GuiControlProperty HUEBAR_WIDTH = 17;               // ColorPicker right hue bar width
const GuiControlProperty HUEBAR_PADDING = 18;             // ColorPicker right hue bar separation from panel
const GuiControlProperty HUEBAR_SELECTOR_HEIGHT = 19;     // ColorPicker right hue bar selector height
const GuiControlProperty HUEBAR_SELECTOR_OVERFLOW = 20;   // ColorPicker right hue bar selector overflow
